
ESC_Interface_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ed8  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08102178  08102178  00012178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081021b8  081021b8  000121b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081021bc  081021bc  000121bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  10000000  081021c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003fcc  10000014  081021d4  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10003fe0  081021d4  00023fe0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c445  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000020bd  00000000  00000000  0002c489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000b58  00000000  00000000  0002e548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000a60  00000000  00000000  0002f0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000399a5  00000000  00000000  0002fb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000bfce  00000000  00000000  000694a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017fd94  00000000  00000000  00075473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f5207  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002c5c  00000000  00000000  001f5258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000014 	.word	0x10000014
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08102160 	.word	0x08102160

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000018 	.word	0x10000018
 81002dc:	08102160 	.word	0x08102160

081002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002e0:	b480      	push	{r7}
 81002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002e4:	4b09      	ldr	r3, [pc, #36]	; (810030c <SystemInit+0x2c>)
 81002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002ea:	4a08      	ldr	r2, [pc, #32]	; (810030c <SystemInit+0x2c>)
 81002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002f4:	4b05      	ldr	r3, [pc, #20]	; (810030c <SystemInit+0x2c>)
 81002f6:	691b      	ldr	r3, [r3, #16]
 81002f8:	4a04      	ldr	r2, [pc, #16]	; (810030c <SystemInit+0x2c>)
 81002fa:	f043 0310 	orr.w	r3, r3, #16
 81002fe:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100300:	bf00      	nop
 8100302:	46bd      	mov	sp, r7
 8100304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100308:	4770      	bx	lr
 810030a:	bf00      	nop
 810030c:	e000ed00 	.word	0xe000ed00

08100310 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8100310:	b480      	push	{r7}
 8100312:	b085      	sub	sp, #20
 8100314:	af00      	add	r7, sp, #0
 8100316:	60f8      	str	r0, [r7, #12]
 8100318:	60b9      	str	r1, [r7, #8]
 810031a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 810031c:	68fb      	ldr	r3, [r7, #12]
 810031e:	4a07      	ldr	r2, [pc, #28]	; (810033c <vApplicationGetIdleTaskMemory+0x2c>)
 8100320:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8100322:	68bb      	ldr	r3, [r7, #8]
 8100324:	4a06      	ldr	r2, [pc, #24]	; (8100340 <vApplicationGetIdleTaskMemory+0x30>)
 8100326:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8100328:	687b      	ldr	r3, [r7, #4]
 810032a:	2280      	movs	r2, #128	; 0x80
 810032c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 810032e:	bf00      	nop
 8100330:	3714      	adds	r7, #20
 8100332:	46bd      	mov	sp, r7
 8100334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100338:	4770      	bx	lr
 810033a:	bf00      	nop
 810033c:	10000030 	.word	0x10000030
 8100340:	10000084 	.word	0x10000084

08100344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100344:	b5b0      	push	{r4, r5, r7, lr}
 8100346:	b088      	sub	sp, #32
 8100348:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810034a:	4b23      	ldr	r3, [pc, #140]	; (81003d8 <main+0x94>)
 810034c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100350:	4a21      	ldr	r2, [pc, #132]	; (81003d8 <main+0x94>)
 8100352:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810035a:	4b1f      	ldr	r3, [pc, #124]	; (81003d8 <main+0x94>)
 810035c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100364:	603b      	str	r3, [r7, #0]
 8100366:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100368:	2001      	movs	r0, #1
 810036a:	f000 fa53 	bl	8100814 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810036e:	f000 fadd 	bl	810092c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100372:	2201      	movs	r2, #1
 8100374:	2102      	movs	r1, #2
 8100376:	2000      	movs	r0, #0
 8100378:	f000 fa5e 	bl	8100838 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810037c:	4b17      	ldr	r3, [pc, #92]	; (81003dc <main+0x98>)
 810037e:	681b      	ldr	r3, [r3, #0]
 8100380:	091b      	lsrs	r3, r3, #4
 8100382:	f003 030f 	and.w	r3, r3, #15
 8100386:	2b07      	cmp	r3, #7
 8100388:	d108      	bne.n	810039c <main+0x58>
 810038a:	4b15      	ldr	r3, [pc, #84]	; (81003e0 <main+0x9c>)
 810038c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100390:	4a13      	ldr	r2, [pc, #76]	; (81003e0 <main+0x9c>)
 8100392:	f043 0301 	orr.w	r3, r3, #1
 8100396:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810039a:	e007      	b.n	81003ac <main+0x68>
 810039c:	4b10      	ldr	r3, [pc, #64]	; (81003e0 <main+0x9c>)
 810039e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81003a2:	4a0f      	ldr	r2, [pc, #60]	; (81003e0 <main+0x9c>)
 81003a4:	f043 0301 	orr.w	r3, r3, #1
 81003a8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81003ac:	f000 f892 	bl	81004d4 <HAL_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 81003b0:	4b0c      	ldr	r3, [pc, #48]	; (81003e4 <main+0xa0>)
 81003b2:	1d3c      	adds	r4, r7, #4
 81003b4:	461d      	mov	r5, r3
 81003b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81003b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81003ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 81003be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 81003c2:	1d3b      	adds	r3, r7, #4
 81003c4:	2100      	movs	r1, #0
 81003c6:	4618      	mov	r0, r3
 81003c8:	f000 fc57 	bl	8100c7a <osThreadCreate>
 81003cc:	4603      	mov	r3, r0
 81003ce:	4a06      	ldr	r2, [pc, #24]	; (81003e8 <main+0xa4>)
 81003d0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 81003d2:	f000 fc4b 	bl	8100c6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81003d6:	e7fe      	b.n	81003d6 <main+0x92>
 81003d8:	58024400 	.word	0x58024400
 81003dc:	e000ed00 	.word	0xe000ed00
 81003e0:	58026400 	.word	0x58026400
 81003e4:	08102184 	.word	0x08102184
 81003e8:	10000284 	.word	0x10000284

081003ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 81003ec:	b580      	push	{r7, lr}
 81003ee:	b082      	sub	sp, #8
 81003f0:	af00      	add	r7, sp, #0
 81003f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 81003f4:	2001      	movs	r0, #1
 81003f6:	f000 fc8c 	bl	8100d12 <osDelay>
 81003fa:	e7fb      	b.n	81003f4 <StartDefaultTask+0x8>

081003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81003fc:	b580      	push	{r7, lr}
 81003fe:	b082      	sub	sp, #8
 8100400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100402:	4b0c      	ldr	r3, [pc, #48]	; (8100434 <HAL_MspInit+0x38>)
 8100404:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100408:	4a0a      	ldr	r2, [pc, #40]	; (8100434 <HAL_MspInit+0x38>)
 810040a:	f043 0302 	orr.w	r3, r3, #2
 810040e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100412:	4b08      	ldr	r3, [pc, #32]	; (8100434 <HAL_MspInit+0x38>)
 8100414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100418:	f003 0302 	and.w	r3, r3, #2
 810041c:	607b      	str	r3, [r7, #4]
 810041e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100420:	2200      	movs	r2, #0
 8100422:	210f      	movs	r1, #15
 8100424:	f06f 0001 	mvn.w	r0, #1
 8100428:	f000 f9b9 	bl	810079e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810042c:	bf00      	nop
 810042e:	3708      	adds	r7, #8
 8100430:	46bd      	mov	sp, r7
 8100432:	bd80      	pop	{r7, pc}
 8100434:	58024400 	.word	0x58024400

08100438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100438:	b480      	push	{r7}
 810043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 810043c:	e7fe      	b.n	810043c <NMI_Handler+0x4>

0810043e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810043e:	b480      	push	{r7}
 8100440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100442:	e7fe      	b.n	8100442 <HardFault_Handler+0x4>

08100444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100444:	b480      	push	{r7}
 8100446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100448:	e7fe      	b.n	8100448 <MemManage_Handler+0x4>

0810044a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810044a:	b480      	push	{r7}
 810044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810044e:	e7fe      	b.n	810044e <BusFault_Handler+0x4>

08100450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100450:	b480      	push	{r7}
 8100452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100454:	e7fe      	b.n	8100454 <UsageFault_Handler+0x4>

08100456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100456:	b480      	push	{r7}
 8100458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810045a:	bf00      	nop
 810045c:	46bd      	mov	sp, r7
 810045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100462:	4770      	bx	lr

08100464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100464:	b580      	push	{r7, lr}
 8100466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100468:	f000 f8c8 	bl	81005fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 810046c:	f001 fdd0 	bl	8102010 <xTaskGetSchedulerState>
 8100470:	4603      	mov	r3, r0
 8100472:	2b01      	cmp	r3, #1
 8100474:	d001      	beq.n	810047a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8100476:	f001 f8bf 	bl	81015f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810047a:	bf00      	nop
 810047c:	bd80      	pop	{r7, pc}
	...

08100480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100480:	f8df d034 	ldr.w	sp, [pc, #52]	; 81004b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100484:	f7ff ff2c 	bl	81002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100488:	480c      	ldr	r0, [pc, #48]	; (81004bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810048a:	490d      	ldr	r1, [pc, #52]	; (81004c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 810048c:	4a0d      	ldr	r2, [pc, #52]	; (81004c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810048e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100490:	e002      	b.n	8100498 <LoopCopyDataInit>

08100492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100496:	3304      	adds	r3, #4

08100498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810049a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810049c:	d3f9      	bcc.n	8100492 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810049e:	4a0a      	ldr	r2, [pc, #40]	; (81004c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81004a0:	4c0a      	ldr	r4, [pc, #40]	; (81004cc <LoopFillZerobss+0x22>)
  movs r3, #0
 81004a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81004a4:	e001      	b.n	81004aa <LoopFillZerobss>

081004a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81004a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81004a8:	3204      	adds	r2, #4

081004aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81004aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81004ac:	d3fb      	bcc.n	81004a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81004ae:	f001 fe33 	bl	8102118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81004b2:	f7ff ff47 	bl	8100344 <main>
  bx  lr
 81004b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81004b8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81004bc:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81004c0:	10000014 	.word	0x10000014
  ldr r2, =_sidata
 81004c4:	081021c0 	.word	0x081021c0
  ldr r2, =_sbss
 81004c8:	10000014 	.word	0x10000014
  ldr r4, =_ebss
 81004cc:	10003fe0 	.word	0x10003fe0

081004d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81004d0:	e7fe      	b.n	81004d0 <ADC3_IRQHandler>
	...

081004d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81004d4:	b580      	push	{r7, lr}
 81004d6:	b082      	sub	sp, #8
 81004d8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81004da:	4b28      	ldr	r3, [pc, #160]	; (810057c <HAL_Init+0xa8>)
 81004dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81004e0:	4a26      	ldr	r2, [pc, #152]	; (810057c <HAL_Init+0xa8>)
 81004e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81004e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81004ea:	4b24      	ldr	r3, [pc, #144]	; (810057c <HAL_Init+0xa8>)
 81004ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81004f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81004f4:	603b      	str	r3, [r7, #0]
 81004f6:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81004f8:	4b21      	ldr	r3, [pc, #132]	; (8100580 <HAL_Init+0xac>)
 81004fa:	681b      	ldr	r3, [r3, #0]
 81004fc:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100500:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100504:	4a1e      	ldr	r2, [pc, #120]	; (8100580 <HAL_Init+0xac>)
 8100506:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810050a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810050c:	4b1c      	ldr	r3, [pc, #112]	; (8100580 <HAL_Init+0xac>)
 810050e:	681b      	ldr	r3, [r3, #0]
 8100510:	4a1b      	ldr	r2, [pc, #108]	; (8100580 <HAL_Init+0xac>)
 8100512:	f043 0301 	orr.w	r3, r3, #1
 8100516:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100518:	2003      	movs	r0, #3
 810051a:	f000 f935 	bl	8100788 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810051e:	f000 fa13 	bl	8100948 <HAL_RCC_GetSysClockFreq>
 8100522:	4602      	mov	r2, r0
 8100524:	4b15      	ldr	r3, [pc, #84]	; (810057c <HAL_Init+0xa8>)
 8100526:	699b      	ldr	r3, [r3, #24]
 8100528:	0a1b      	lsrs	r3, r3, #8
 810052a:	f003 030f 	and.w	r3, r3, #15
 810052e:	4915      	ldr	r1, [pc, #84]	; (8100584 <HAL_Init+0xb0>)
 8100530:	5ccb      	ldrb	r3, [r1, r3]
 8100532:	f003 031f 	and.w	r3, r3, #31
 8100536:	fa22 f303 	lsr.w	r3, r2, r3
 810053a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810053c:	4b0f      	ldr	r3, [pc, #60]	; (810057c <HAL_Init+0xa8>)
 810053e:	699b      	ldr	r3, [r3, #24]
 8100540:	f003 030f 	and.w	r3, r3, #15
 8100544:	4a0f      	ldr	r2, [pc, #60]	; (8100584 <HAL_Init+0xb0>)
 8100546:	5cd3      	ldrb	r3, [r2, r3]
 8100548:	f003 031f 	and.w	r3, r3, #31
 810054c:	687a      	ldr	r2, [r7, #4]
 810054e:	fa22 f303 	lsr.w	r3, r2, r3
 8100552:	4a0d      	ldr	r2, [pc, #52]	; (8100588 <HAL_Init+0xb4>)
 8100554:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100556:	4b0c      	ldr	r3, [pc, #48]	; (8100588 <HAL_Init+0xb4>)
 8100558:	681b      	ldr	r3, [r3, #0]
 810055a:	4a0c      	ldr	r2, [pc, #48]	; (810058c <HAL_Init+0xb8>)
 810055c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810055e:	200f      	movs	r0, #15
 8100560:	f000 f816 	bl	8100590 <HAL_InitTick>
 8100564:	4603      	mov	r3, r0
 8100566:	2b00      	cmp	r3, #0
 8100568:	d001      	beq.n	810056e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810056a:	2301      	movs	r3, #1
 810056c:	e002      	b.n	8100574 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810056e:	f7ff ff45 	bl	81003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100572:	2300      	movs	r3, #0
}
 8100574:	4618      	mov	r0, r3
 8100576:	3708      	adds	r7, #8
 8100578:	46bd      	mov	sp, r7
 810057a:	bd80      	pop	{r7, pc}
 810057c:	58024400 	.word	0x58024400
 8100580:	40024400 	.word	0x40024400
 8100584:	081021a8 	.word	0x081021a8
 8100588:	10000004 	.word	0x10000004
 810058c:	10000000 	.word	0x10000000

08100590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100590:	b580      	push	{r7, lr}
 8100592:	b082      	sub	sp, #8
 8100594:	af00      	add	r7, sp, #0
 8100596:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100598:	4b15      	ldr	r3, [pc, #84]	; (81005f0 <HAL_InitTick+0x60>)
 810059a:	781b      	ldrb	r3, [r3, #0]
 810059c:	2b00      	cmp	r3, #0
 810059e:	d101      	bne.n	81005a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81005a0:	2301      	movs	r3, #1
 81005a2:	e021      	b.n	81005e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81005a4:	4b13      	ldr	r3, [pc, #76]	; (81005f4 <HAL_InitTick+0x64>)
 81005a6:	681a      	ldr	r2, [r3, #0]
 81005a8:	4b11      	ldr	r3, [pc, #68]	; (81005f0 <HAL_InitTick+0x60>)
 81005aa:	781b      	ldrb	r3, [r3, #0]
 81005ac:	4619      	mov	r1, r3
 81005ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81005b2:	fbb3 f3f1 	udiv	r3, r3, r1
 81005b6:	fbb2 f3f3 	udiv	r3, r2, r3
 81005ba:	4618      	mov	r0, r3
 81005bc:	f000 f909 	bl	81007d2 <HAL_SYSTICK_Config>
 81005c0:	4603      	mov	r3, r0
 81005c2:	2b00      	cmp	r3, #0
 81005c4:	d001      	beq.n	81005ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81005c6:	2301      	movs	r3, #1
 81005c8:	e00e      	b.n	81005e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81005ca:	687b      	ldr	r3, [r7, #4]
 81005cc:	2b0f      	cmp	r3, #15
 81005ce:	d80a      	bhi.n	81005e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81005d0:	2200      	movs	r2, #0
 81005d2:	6879      	ldr	r1, [r7, #4]
 81005d4:	f04f 30ff 	mov.w	r0, #4294967295
 81005d8:	f000 f8e1 	bl	810079e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81005dc:	4a06      	ldr	r2, [pc, #24]	; (81005f8 <HAL_InitTick+0x68>)
 81005de:	687b      	ldr	r3, [r7, #4]
 81005e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81005e2:	2300      	movs	r3, #0
 81005e4:	e000      	b.n	81005e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81005e6:	2301      	movs	r3, #1
}
 81005e8:	4618      	mov	r0, r3
 81005ea:	3708      	adds	r7, #8
 81005ec:	46bd      	mov	sp, r7
 81005ee:	bd80      	pop	{r7, pc}
 81005f0:	1000000c 	.word	0x1000000c
 81005f4:	10000000 	.word	0x10000000
 81005f8:	10000008 	.word	0x10000008

081005fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81005fc:	b480      	push	{r7}
 81005fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100600:	4b06      	ldr	r3, [pc, #24]	; (810061c <HAL_IncTick+0x20>)
 8100602:	781b      	ldrb	r3, [r3, #0]
 8100604:	461a      	mov	r2, r3
 8100606:	4b06      	ldr	r3, [pc, #24]	; (8100620 <HAL_IncTick+0x24>)
 8100608:	681b      	ldr	r3, [r3, #0]
 810060a:	4413      	add	r3, r2
 810060c:	4a04      	ldr	r2, [pc, #16]	; (8100620 <HAL_IncTick+0x24>)
 810060e:	6013      	str	r3, [r2, #0]
}
 8100610:	bf00      	nop
 8100612:	46bd      	mov	sp, r7
 8100614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100618:	4770      	bx	lr
 810061a:	bf00      	nop
 810061c:	1000000c 	.word	0x1000000c
 8100620:	10000288 	.word	0x10000288

08100624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100624:	b480      	push	{r7}
 8100626:	b085      	sub	sp, #20
 8100628:	af00      	add	r7, sp, #0
 810062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810062c:	687b      	ldr	r3, [r7, #4]
 810062e:	f003 0307 	and.w	r3, r3, #7
 8100632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100634:	4b0c      	ldr	r3, [pc, #48]	; (8100668 <__NVIC_SetPriorityGrouping+0x44>)
 8100636:	68db      	ldr	r3, [r3, #12]
 8100638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810063a:	68ba      	ldr	r2, [r7, #8]
 810063c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100640:	4013      	ands	r3, r2
 8100642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100644:	68fb      	ldr	r3, [r7, #12]
 8100646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100648:	68bb      	ldr	r3, [r7, #8]
 810064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100656:	4a04      	ldr	r2, [pc, #16]	; (8100668 <__NVIC_SetPriorityGrouping+0x44>)
 8100658:	68bb      	ldr	r3, [r7, #8]
 810065a:	60d3      	str	r3, [r2, #12]
}
 810065c:	bf00      	nop
 810065e:	3714      	adds	r7, #20
 8100660:	46bd      	mov	sp, r7
 8100662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100666:	4770      	bx	lr
 8100668:	e000ed00 	.word	0xe000ed00

0810066c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810066c:	b480      	push	{r7}
 810066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100670:	4b04      	ldr	r3, [pc, #16]	; (8100684 <__NVIC_GetPriorityGrouping+0x18>)
 8100672:	68db      	ldr	r3, [r3, #12]
 8100674:	0a1b      	lsrs	r3, r3, #8
 8100676:	f003 0307 	and.w	r3, r3, #7
}
 810067a:	4618      	mov	r0, r3
 810067c:	46bd      	mov	sp, r7
 810067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100682:	4770      	bx	lr
 8100684:	e000ed00 	.word	0xe000ed00

08100688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100688:	b480      	push	{r7}
 810068a:	b083      	sub	sp, #12
 810068c:	af00      	add	r7, sp, #0
 810068e:	4603      	mov	r3, r0
 8100690:	6039      	str	r1, [r7, #0]
 8100692:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100698:	2b00      	cmp	r3, #0
 810069a:	db0a      	blt.n	81006b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810069c:	683b      	ldr	r3, [r7, #0]
 810069e:	b2da      	uxtb	r2, r3
 81006a0:	490c      	ldr	r1, [pc, #48]	; (81006d4 <__NVIC_SetPriority+0x4c>)
 81006a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81006a6:	0112      	lsls	r2, r2, #4
 81006a8:	b2d2      	uxtb	r2, r2
 81006aa:	440b      	add	r3, r1
 81006ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81006b0:	e00a      	b.n	81006c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81006b2:	683b      	ldr	r3, [r7, #0]
 81006b4:	b2da      	uxtb	r2, r3
 81006b6:	4908      	ldr	r1, [pc, #32]	; (81006d8 <__NVIC_SetPriority+0x50>)
 81006b8:	88fb      	ldrh	r3, [r7, #6]
 81006ba:	f003 030f 	and.w	r3, r3, #15
 81006be:	3b04      	subs	r3, #4
 81006c0:	0112      	lsls	r2, r2, #4
 81006c2:	b2d2      	uxtb	r2, r2
 81006c4:	440b      	add	r3, r1
 81006c6:	761a      	strb	r2, [r3, #24]
}
 81006c8:	bf00      	nop
 81006ca:	370c      	adds	r7, #12
 81006cc:	46bd      	mov	sp, r7
 81006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006d2:	4770      	bx	lr
 81006d4:	e000e100 	.word	0xe000e100
 81006d8:	e000ed00 	.word	0xe000ed00

081006dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81006dc:	b480      	push	{r7}
 81006de:	b089      	sub	sp, #36	; 0x24
 81006e0:	af00      	add	r7, sp, #0
 81006e2:	60f8      	str	r0, [r7, #12]
 81006e4:	60b9      	str	r1, [r7, #8]
 81006e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81006e8:	68fb      	ldr	r3, [r7, #12]
 81006ea:	f003 0307 	and.w	r3, r3, #7
 81006ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81006f0:	69fb      	ldr	r3, [r7, #28]
 81006f2:	f1c3 0307 	rsb	r3, r3, #7
 81006f6:	2b04      	cmp	r3, #4
 81006f8:	bf28      	it	cs
 81006fa:	2304      	movcs	r3, #4
 81006fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81006fe:	69fb      	ldr	r3, [r7, #28]
 8100700:	3304      	adds	r3, #4
 8100702:	2b06      	cmp	r3, #6
 8100704:	d902      	bls.n	810070c <NVIC_EncodePriority+0x30>
 8100706:	69fb      	ldr	r3, [r7, #28]
 8100708:	3b03      	subs	r3, #3
 810070a:	e000      	b.n	810070e <NVIC_EncodePriority+0x32>
 810070c:	2300      	movs	r3, #0
 810070e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100710:	f04f 32ff 	mov.w	r2, #4294967295
 8100714:	69bb      	ldr	r3, [r7, #24]
 8100716:	fa02 f303 	lsl.w	r3, r2, r3
 810071a:	43da      	mvns	r2, r3
 810071c:	68bb      	ldr	r3, [r7, #8]
 810071e:	401a      	ands	r2, r3
 8100720:	697b      	ldr	r3, [r7, #20]
 8100722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100724:	f04f 31ff 	mov.w	r1, #4294967295
 8100728:	697b      	ldr	r3, [r7, #20]
 810072a:	fa01 f303 	lsl.w	r3, r1, r3
 810072e:	43d9      	mvns	r1, r3
 8100730:	687b      	ldr	r3, [r7, #4]
 8100732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100734:	4313      	orrs	r3, r2
         );
}
 8100736:	4618      	mov	r0, r3
 8100738:	3724      	adds	r7, #36	; 0x24
 810073a:	46bd      	mov	sp, r7
 810073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100740:	4770      	bx	lr
	...

08100744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100744:	b580      	push	{r7, lr}
 8100746:	b082      	sub	sp, #8
 8100748:	af00      	add	r7, sp, #0
 810074a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 810074c:	687b      	ldr	r3, [r7, #4]
 810074e:	3b01      	subs	r3, #1
 8100750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100754:	d301      	bcc.n	810075a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100756:	2301      	movs	r3, #1
 8100758:	e00f      	b.n	810077a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810075a:	4a0a      	ldr	r2, [pc, #40]	; (8100784 <SysTick_Config+0x40>)
 810075c:	687b      	ldr	r3, [r7, #4]
 810075e:	3b01      	subs	r3, #1
 8100760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100762:	210f      	movs	r1, #15
 8100764:	f04f 30ff 	mov.w	r0, #4294967295
 8100768:	f7ff ff8e 	bl	8100688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810076c:	4b05      	ldr	r3, [pc, #20]	; (8100784 <SysTick_Config+0x40>)
 810076e:	2200      	movs	r2, #0
 8100770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100772:	4b04      	ldr	r3, [pc, #16]	; (8100784 <SysTick_Config+0x40>)
 8100774:	2207      	movs	r2, #7
 8100776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100778:	2300      	movs	r3, #0
}
 810077a:	4618      	mov	r0, r3
 810077c:	3708      	adds	r7, #8
 810077e:	46bd      	mov	sp, r7
 8100780:	bd80      	pop	{r7, pc}
 8100782:	bf00      	nop
 8100784:	e000e010 	.word	0xe000e010

08100788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100788:	b580      	push	{r7, lr}
 810078a:	b082      	sub	sp, #8
 810078c:	af00      	add	r7, sp, #0
 810078e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100790:	6878      	ldr	r0, [r7, #4]
 8100792:	f7ff ff47 	bl	8100624 <__NVIC_SetPriorityGrouping>
}
 8100796:	bf00      	nop
 8100798:	3708      	adds	r7, #8
 810079a:	46bd      	mov	sp, r7
 810079c:	bd80      	pop	{r7, pc}

0810079e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810079e:	b580      	push	{r7, lr}
 81007a0:	b086      	sub	sp, #24
 81007a2:	af00      	add	r7, sp, #0
 81007a4:	4603      	mov	r3, r0
 81007a6:	60b9      	str	r1, [r7, #8]
 81007a8:	607a      	str	r2, [r7, #4]
 81007aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81007ac:	f7ff ff5e 	bl	810066c <__NVIC_GetPriorityGrouping>
 81007b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81007b2:	687a      	ldr	r2, [r7, #4]
 81007b4:	68b9      	ldr	r1, [r7, #8]
 81007b6:	6978      	ldr	r0, [r7, #20]
 81007b8:	f7ff ff90 	bl	81006dc <NVIC_EncodePriority>
 81007bc:	4602      	mov	r2, r0
 81007be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81007c2:	4611      	mov	r1, r2
 81007c4:	4618      	mov	r0, r3
 81007c6:	f7ff ff5f 	bl	8100688 <__NVIC_SetPriority>
}
 81007ca:	bf00      	nop
 81007cc:	3718      	adds	r7, #24
 81007ce:	46bd      	mov	sp, r7
 81007d0:	bd80      	pop	{r7, pc}

081007d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81007d2:	b580      	push	{r7, lr}
 81007d4:	b082      	sub	sp, #8
 81007d6:	af00      	add	r7, sp, #0
 81007d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81007da:	6878      	ldr	r0, [r7, #4]
 81007dc:	f7ff ffb2 	bl	8100744 <SysTick_Config>
 81007e0:	4603      	mov	r3, r0
}
 81007e2:	4618      	mov	r0, r3
 81007e4:	3708      	adds	r7, #8
 81007e6:	46bd      	mov	sp, r7
 81007e8:	bd80      	pop	{r7, pc}
	...

081007ec <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81007ec:	b480      	push	{r7}
 81007ee:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81007f0:	4b07      	ldr	r3, [pc, #28]	; (8100810 <HAL_GetCurrentCPUID+0x24>)
 81007f2:	681b      	ldr	r3, [r3, #0]
 81007f4:	091b      	lsrs	r3, r3, #4
 81007f6:	f003 030f 	and.w	r3, r3, #15
 81007fa:	2b07      	cmp	r3, #7
 81007fc:	d101      	bne.n	8100802 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81007fe:	2303      	movs	r3, #3
 8100800:	e000      	b.n	8100804 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100802:	2301      	movs	r3, #1
  }
}
 8100804:	4618      	mov	r0, r3
 8100806:	46bd      	mov	sp, r7
 8100808:	f85d 7b04 	ldr.w	r7, [sp], #4
 810080c:	4770      	bx	lr
 810080e:	bf00      	nop
 8100810:	e000ed00 	.word	0xe000ed00

08100814 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100814:	b480      	push	{r7}
 8100816:	b083      	sub	sp, #12
 8100818:	af00      	add	r7, sp, #0
 810081a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810081c:	4b05      	ldr	r3, [pc, #20]	; (8100834 <HAL_HSEM_ActivateNotification+0x20>)
 810081e:	681a      	ldr	r2, [r3, #0]
 8100820:	4904      	ldr	r1, [pc, #16]	; (8100834 <HAL_HSEM_ActivateNotification+0x20>)
 8100822:	687b      	ldr	r3, [r7, #4]
 8100824:	4313      	orrs	r3, r2
 8100826:	600b      	str	r3, [r1, #0]
#endif
}
 8100828:	bf00      	nop
 810082a:	370c      	adds	r7, #12
 810082c:	46bd      	mov	sp, r7
 810082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100832:	4770      	bx	lr
 8100834:	58026510 	.word	0x58026510

08100838 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100838:	b580      	push	{r7, lr}
 810083a:	b084      	sub	sp, #16
 810083c:	af00      	add	r7, sp, #0
 810083e:	60f8      	str	r0, [r7, #12]
 8100840:	460b      	mov	r3, r1
 8100842:	607a      	str	r2, [r7, #4]
 8100844:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100846:	4b37      	ldr	r3, [pc, #220]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100848:	681b      	ldr	r3, [r3, #0]
 810084a:	f023 0201 	bic.w	r2, r3, #1
 810084e:	4935      	ldr	r1, [pc, #212]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100850:	68fb      	ldr	r3, [r7, #12]
 8100852:	4313      	orrs	r3, r2
 8100854:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100856:	687b      	ldr	r3, [r7, #4]
 8100858:	2b00      	cmp	r3, #0
 810085a:	d123      	bne.n	81008a4 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810085c:	f7ff ffc6 	bl	81007ec <HAL_GetCurrentCPUID>
 8100860:	4603      	mov	r3, r0
 8100862:	2b03      	cmp	r3, #3
 8100864:	d158      	bne.n	8100918 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100866:	4b2f      	ldr	r3, [pc, #188]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100868:	691b      	ldr	r3, [r3, #16]
 810086a:	4a2e      	ldr	r2, [pc, #184]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 810086c:	f023 0301 	bic.w	r3, r3, #1
 8100870:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100872:	4b2d      	ldr	r3, [pc, #180]	; (8100928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100874:	691b      	ldr	r3, [r3, #16]
 8100876:	4a2c      	ldr	r2, [pc, #176]	; (8100928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100878:	f043 0304 	orr.w	r3, r3, #4
 810087c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810087e:	f3bf 8f4f 	dsb	sy
}
 8100882:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100884:	f3bf 8f6f 	isb	sy
}
 8100888:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810088a:	7afb      	ldrb	r3, [r7, #11]
 810088c:	2b01      	cmp	r3, #1
 810088e:	d101      	bne.n	8100894 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100890:	bf30      	wfi
 8100892:	e000      	b.n	8100896 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100894:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100896:	4b24      	ldr	r3, [pc, #144]	; (8100928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100898:	691b      	ldr	r3, [r3, #16]
 810089a:	4a23      	ldr	r2, [pc, #140]	; (8100928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810089c:	f023 0304 	bic.w	r3, r3, #4
 81008a0:	6113      	str	r3, [r2, #16]
 81008a2:	e03c      	b.n	810091e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81008a4:	687b      	ldr	r3, [r7, #4]
 81008a6:	2b01      	cmp	r3, #1
 81008a8:	d123      	bne.n	81008f2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81008aa:	f7ff ff9f 	bl	81007ec <HAL_GetCurrentCPUID>
 81008ae:	4603      	mov	r3, r0
 81008b0:	2b01      	cmp	r3, #1
 81008b2:	d133      	bne.n	810091c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81008b4:	4b1b      	ldr	r3, [pc, #108]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 81008b6:	695b      	ldr	r3, [r3, #20]
 81008b8:	4a1a      	ldr	r2, [pc, #104]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 81008ba:	f023 0302 	bic.w	r3, r3, #2
 81008be:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81008c0:	4b19      	ldr	r3, [pc, #100]	; (8100928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81008c2:	691b      	ldr	r3, [r3, #16]
 81008c4:	4a18      	ldr	r2, [pc, #96]	; (8100928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81008c6:	f043 0304 	orr.w	r3, r3, #4
 81008ca:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81008cc:	f3bf 8f4f 	dsb	sy
}
 81008d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81008d2:	f3bf 8f6f 	isb	sy
}
 81008d6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81008d8:	7afb      	ldrb	r3, [r7, #11]
 81008da:	2b01      	cmp	r3, #1
 81008dc:	d101      	bne.n	81008e2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81008de:	bf30      	wfi
 81008e0:	e000      	b.n	81008e4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81008e2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81008e4:	4b10      	ldr	r3, [pc, #64]	; (8100928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81008e6:	691b      	ldr	r3, [r3, #16]
 81008e8:	4a0f      	ldr	r2, [pc, #60]	; (8100928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81008ea:	f023 0304 	bic.w	r3, r3, #4
 81008ee:	6113      	str	r3, [r2, #16]
 81008f0:	e015      	b.n	810091e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81008f2:	f7ff ff7b 	bl	81007ec <HAL_GetCurrentCPUID>
 81008f6:	4603      	mov	r3, r0
 81008f8:	2b03      	cmp	r3, #3
 81008fa:	d106      	bne.n	810090a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81008fc:	4b09      	ldr	r3, [pc, #36]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 81008fe:	691b      	ldr	r3, [r3, #16]
 8100900:	4a08      	ldr	r2, [pc, #32]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100902:	f023 0304 	bic.w	r3, r3, #4
 8100906:	6113      	str	r3, [r2, #16]
 8100908:	e009      	b.n	810091e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810090a:	4b06      	ldr	r3, [pc, #24]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 810090c:	695b      	ldr	r3, [r3, #20]
 810090e:	4a05      	ldr	r2, [pc, #20]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100910:	f023 0304 	bic.w	r3, r3, #4
 8100914:	6153      	str	r3, [r2, #20]
 8100916:	e002      	b.n	810091e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100918:	bf00      	nop
 810091a:	e000      	b.n	810091e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810091c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810091e:	3710      	adds	r7, #16
 8100920:	46bd      	mov	sp, r7
 8100922:	bd80      	pop	{r7, pc}
 8100924:	58024800 	.word	0x58024800
 8100928:	e000ed00 	.word	0xe000ed00

0810092c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810092c:	b580      	push	{r7, lr}
 810092e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100930:	f7ff ff5c 	bl	81007ec <HAL_GetCurrentCPUID>
 8100934:	4603      	mov	r3, r0
 8100936:	2b03      	cmp	r3, #3
 8100938:	d101      	bne.n	810093e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810093a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810093c:	e001      	b.n	8100942 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810093e:	bf40      	sev
    __WFE ();
 8100940:	bf20      	wfe
}
 8100942:	bf00      	nop
 8100944:	bd80      	pop	{r7, pc}
	...

08100948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100948:	b480      	push	{r7}
 810094a:	b089      	sub	sp, #36	; 0x24
 810094c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810094e:	4bb3      	ldr	r3, [pc, #716]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100950:	691b      	ldr	r3, [r3, #16]
 8100952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8100956:	2b18      	cmp	r3, #24
 8100958:	f200 8155 	bhi.w	8100c06 <HAL_RCC_GetSysClockFreq+0x2be>
 810095c:	a201      	add	r2, pc, #4	; (adr r2, 8100964 <HAL_RCC_GetSysClockFreq+0x1c>)
 810095e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100962:	bf00      	nop
 8100964:	081009c9 	.word	0x081009c9
 8100968:	08100c07 	.word	0x08100c07
 810096c:	08100c07 	.word	0x08100c07
 8100970:	08100c07 	.word	0x08100c07
 8100974:	08100c07 	.word	0x08100c07
 8100978:	08100c07 	.word	0x08100c07
 810097c:	08100c07 	.word	0x08100c07
 8100980:	08100c07 	.word	0x08100c07
 8100984:	081009ef 	.word	0x081009ef
 8100988:	08100c07 	.word	0x08100c07
 810098c:	08100c07 	.word	0x08100c07
 8100990:	08100c07 	.word	0x08100c07
 8100994:	08100c07 	.word	0x08100c07
 8100998:	08100c07 	.word	0x08100c07
 810099c:	08100c07 	.word	0x08100c07
 81009a0:	08100c07 	.word	0x08100c07
 81009a4:	081009f5 	.word	0x081009f5
 81009a8:	08100c07 	.word	0x08100c07
 81009ac:	08100c07 	.word	0x08100c07
 81009b0:	08100c07 	.word	0x08100c07
 81009b4:	08100c07 	.word	0x08100c07
 81009b8:	08100c07 	.word	0x08100c07
 81009bc:	08100c07 	.word	0x08100c07
 81009c0:	08100c07 	.word	0x08100c07
 81009c4:	081009fb 	.word	0x081009fb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81009c8:	4b94      	ldr	r3, [pc, #592]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81009ca:	681b      	ldr	r3, [r3, #0]
 81009cc:	f003 0320 	and.w	r3, r3, #32
 81009d0:	2b00      	cmp	r3, #0
 81009d2:	d009      	beq.n	81009e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81009d4:	4b91      	ldr	r3, [pc, #580]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81009d6:	681b      	ldr	r3, [r3, #0]
 81009d8:	08db      	lsrs	r3, r3, #3
 81009da:	f003 0303 	and.w	r3, r3, #3
 81009de:	4a90      	ldr	r2, [pc, #576]	; (8100c20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81009e0:	fa22 f303 	lsr.w	r3, r2, r3
 81009e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81009e6:	e111      	b.n	8100c0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81009e8:	4b8d      	ldr	r3, [pc, #564]	; (8100c20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81009ea:	61bb      	str	r3, [r7, #24]
    break;
 81009ec:	e10e      	b.n	8100c0c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81009ee:	4b8d      	ldr	r3, [pc, #564]	; (8100c24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81009f0:	61bb      	str	r3, [r7, #24]
    break;
 81009f2:	e10b      	b.n	8100c0c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81009f4:	4b8c      	ldr	r3, [pc, #560]	; (8100c28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81009f6:	61bb      	str	r3, [r7, #24]
    break;
 81009f8:	e108      	b.n	8100c0c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81009fa:	4b88      	ldr	r3, [pc, #544]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81009fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81009fe:	f003 0303 	and.w	r3, r3, #3
 8100a02:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8100a04:	4b85      	ldr	r3, [pc, #532]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100a08:	091b      	lsrs	r3, r3, #4
 8100a0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8100a0e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100a10:	4b82      	ldr	r3, [pc, #520]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100a14:	f003 0301 	and.w	r3, r3, #1
 8100a18:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8100a1a:	4b80      	ldr	r3, [pc, #512]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8100a1e:	08db      	lsrs	r3, r3, #3
 8100a20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100a24:	68fa      	ldr	r2, [r7, #12]
 8100a26:	fb02 f303 	mul.w	r3, r2, r3
 8100a2a:	ee07 3a90 	vmov	s15, r3
 8100a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100a32:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8100a36:	693b      	ldr	r3, [r7, #16]
 8100a38:	2b00      	cmp	r3, #0
 8100a3a:	f000 80e1 	beq.w	8100c00 <HAL_RCC_GetSysClockFreq+0x2b8>
 8100a3e:	697b      	ldr	r3, [r7, #20]
 8100a40:	2b02      	cmp	r3, #2
 8100a42:	f000 8083 	beq.w	8100b4c <HAL_RCC_GetSysClockFreq+0x204>
 8100a46:	697b      	ldr	r3, [r7, #20]
 8100a48:	2b02      	cmp	r3, #2
 8100a4a:	f200 80a1 	bhi.w	8100b90 <HAL_RCC_GetSysClockFreq+0x248>
 8100a4e:	697b      	ldr	r3, [r7, #20]
 8100a50:	2b00      	cmp	r3, #0
 8100a52:	d003      	beq.n	8100a5c <HAL_RCC_GetSysClockFreq+0x114>
 8100a54:	697b      	ldr	r3, [r7, #20]
 8100a56:	2b01      	cmp	r3, #1
 8100a58:	d056      	beq.n	8100b08 <HAL_RCC_GetSysClockFreq+0x1c0>
 8100a5a:	e099      	b.n	8100b90 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100a5c:	4b6f      	ldr	r3, [pc, #444]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a5e:	681b      	ldr	r3, [r3, #0]
 8100a60:	f003 0320 	and.w	r3, r3, #32
 8100a64:	2b00      	cmp	r3, #0
 8100a66:	d02d      	beq.n	8100ac4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100a68:	4b6c      	ldr	r3, [pc, #432]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a6a:	681b      	ldr	r3, [r3, #0]
 8100a6c:	08db      	lsrs	r3, r3, #3
 8100a6e:	f003 0303 	and.w	r3, r3, #3
 8100a72:	4a6b      	ldr	r2, [pc, #428]	; (8100c20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100a74:	fa22 f303 	lsr.w	r3, r2, r3
 8100a78:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100a7a:	687b      	ldr	r3, [r7, #4]
 8100a7c:	ee07 3a90 	vmov	s15, r3
 8100a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100a84:	693b      	ldr	r3, [r7, #16]
 8100a86:	ee07 3a90 	vmov	s15, r3
 8100a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100a92:	4b62      	ldr	r3, [pc, #392]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100a9a:	ee07 3a90 	vmov	s15, r3
 8100a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8100aa6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8100c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100abe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8100ac2:	e087      	b.n	8100bd4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100ac4:	693b      	ldr	r3, [r7, #16]
 8100ac6:	ee07 3a90 	vmov	s15, r3
 8100aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ace:	eddf 6a58 	vldr	s13, [pc, #352]	; 8100c30 <HAL_RCC_GetSysClockFreq+0x2e8>
 8100ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100ad6:	4b51      	ldr	r3, [pc, #324]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100ade:	ee07 3a90 	vmov	s15, r3
 8100ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8100aea:	eddf 5a50 	vldr	s11, [pc, #320]	; 8100c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100b06:	e065      	b.n	8100bd4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100b08:	693b      	ldr	r3, [r7, #16]
 8100b0a:	ee07 3a90 	vmov	s15, r3
 8100b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b12:	eddf 6a48 	vldr	s13, [pc, #288]	; 8100c34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100b1a:	4b40      	ldr	r3, [pc, #256]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100b22:	ee07 3a90 	vmov	s15, r3
 8100b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8100b2e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8100c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100b4a:	e043      	b.n	8100bd4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100b4c:	693b      	ldr	r3, [r7, #16]
 8100b4e:	ee07 3a90 	vmov	s15, r3
 8100b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b56:	eddf 6a38 	vldr	s13, [pc, #224]	; 8100c38 <HAL_RCC_GetSysClockFreq+0x2f0>
 8100b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100b5e:	4b2f      	ldr	r3, [pc, #188]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100b66:	ee07 3a90 	vmov	s15, r3
 8100b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8100b72:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8100c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100b8e:	e021      	b.n	8100bd4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100b90:	693b      	ldr	r3, [r7, #16]
 8100b92:	ee07 3a90 	vmov	s15, r3
 8100b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b9a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8100c34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100ba2:	4b1e      	ldr	r3, [pc, #120]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100baa:	ee07 3a90 	vmov	s15, r3
 8100bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8100bb6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8100c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100bd2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8100bd4:	4b11      	ldr	r3, [pc, #68]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100bd8:	0a5b      	lsrs	r3, r3, #9
 8100bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8100bde:	3301      	adds	r3, #1
 8100be0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8100be2:	683b      	ldr	r3, [r7, #0]
 8100be4:	ee07 3a90 	vmov	s15, r3
 8100be8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8100bec:	edd7 6a07 	vldr	s13, [r7, #28]
 8100bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8100bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100bf8:	ee17 3a90 	vmov	r3, s15
 8100bfc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8100bfe:	e005      	b.n	8100c0c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8100c00:	2300      	movs	r3, #0
 8100c02:	61bb      	str	r3, [r7, #24]
    break;
 8100c04:	e002      	b.n	8100c0c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8100c06:	4b07      	ldr	r3, [pc, #28]	; (8100c24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100c08:	61bb      	str	r3, [r7, #24]
    break;
 8100c0a:	bf00      	nop
  }

  return sysclockfreq;
 8100c0c:	69bb      	ldr	r3, [r7, #24]
}
 8100c0e:	4618      	mov	r0, r3
 8100c10:	3724      	adds	r7, #36	; 0x24
 8100c12:	46bd      	mov	sp, r7
 8100c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c18:	4770      	bx	lr
 8100c1a:	bf00      	nop
 8100c1c:	58024400 	.word	0x58024400
 8100c20:	03d09000 	.word	0x03d09000
 8100c24:	003d0900 	.word	0x003d0900
 8100c28:	007a1200 	.word	0x007a1200
 8100c2c:	46000000 	.word	0x46000000
 8100c30:	4c742400 	.word	0x4c742400
 8100c34:	4a742400 	.word	0x4a742400
 8100c38:	4af42400 	.word	0x4af42400

08100c3c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8100c3c:	b480      	push	{r7}
 8100c3e:	b085      	sub	sp, #20
 8100c40:	af00      	add	r7, sp, #0
 8100c42:	4603      	mov	r3, r0
 8100c44:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8100c46:	2300      	movs	r3, #0
 8100c48:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8100c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100c4e:	2b84      	cmp	r3, #132	; 0x84
 8100c50:	d005      	beq.n	8100c5e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8100c52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8100c56:	68fb      	ldr	r3, [r7, #12]
 8100c58:	4413      	add	r3, r2
 8100c5a:	3303      	adds	r3, #3
 8100c5c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8100c5e:	68fb      	ldr	r3, [r7, #12]
}
 8100c60:	4618      	mov	r0, r3
 8100c62:	3714      	adds	r7, #20
 8100c64:	46bd      	mov	sp, r7
 8100c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c6a:	4770      	bx	lr

08100c6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8100c6c:	b580      	push	{r7, lr}
 8100c6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8100c70:	f000 feda 	bl	8101a28 <vTaskStartScheduler>
  
  return osOK;
 8100c74:	2300      	movs	r3, #0
}
 8100c76:	4618      	mov	r0, r3
 8100c78:	bd80      	pop	{r7, pc}

08100c7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8100c7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8100c7c:	b089      	sub	sp, #36	; 0x24
 8100c7e:	af04      	add	r7, sp, #16
 8100c80:	6078      	str	r0, [r7, #4]
 8100c82:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8100c84:	687b      	ldr	r3, [r7, #4]
 8100c86:	695b      	ldr	r3, [r3, #20]
 8100c88:	2b00      	cmp	r3, #0
 8100c8a:	d020      	beq.n	8100cce <osThreadCreate+0x54>
 8100c8c:	687b      	ldr	r3, [r7, #4]
 8100c8e:	699b      	ldr	r3, [r3, #24]
 8100c90:	2b00      	cmp	r3, #0
 8100c92:	d01c      	beq.n	8100cce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8100c94:	687b      	ldr	r3, [r7, #4]
 8100c96:	685c      	ldr	r4, [r3, #4]
 8100c98:	687b      	ldr	r3, [r7, #4]
 8100c9a:	681d      	ldr	r5, [r3, #0]
 8100c9c:	687b      	ldr	r3, [r7, #4]
 8100c9e:	691e      	ldr	r6, [r3, #16]
 8100ca0:	687b      	ldr	r3, [r7, #4]
 8100ca2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8100ca6:	4618      	mov	r0, r3
 8100ca8:	f7ff ffc8 	bl	8100c3c <makeFreeRtosPriority>
 8100cac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8100cae:	687b      	ldr	r3, [r7, #4]
 8100cb0:	695b      	ldr	r3, [r3, #20]
 8100cb2:	687a      	ldr	r2, [r7, #4]
 8100cb4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8100cb6:	9202      	str	r2, [sp, #8]
 8100cb8:	9301      	str	r3, [sp, #4]
 8100cba:	9100      	str	r1, [sp, #0]
 8100cbc:	683b      	ldr	r3, [r7, #0]
 8100cbe:	4632      	mov	r2, r6
 8100cc0:	4629      	mov	r1, r5
 8100cc2:	4620      	mov	r0, r4
 8100cc4:	f000 fce8 	bl	8101698 <xTaskCreateStatic>
 8100cc8:	4603      	mov	r3, r0
 8100cca:	60fb      	str	r3, [r7, #12]
 8100ccc:	e01c      	b.n	8100d08 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8100cce:	687b      	ldr	r3, [r7, #4]
 8100cd0:	685c      	ldr	r4, [r3, #4]
 8100cd2:	687b      	ldr	r3, [r7, #4]
 8100cd4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8100cd6:	687b      	ldr	r3, [r7, #4]
 8100cd8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8100cda:	b29e      	uxth	r6, r3
 8100cdc:	687b      	ldr	r3, [r7, #4]
 8100cde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8100ce2:	4618      	mov	r0, r3
 8100ce4:	f7ff ffaa 	bl	8100c3c <makeFreeRtosPriority>
 8100ce8:	4602      	mov	r2, r0
 8100cea:	f107 030c 	add.w	r3, r7, #12
 8100cee:	9301      	str	r3, [sp, #4]
 8100cf0:	9200      	str	r2, [sp, #0]
 8100cf2:	683b      	ldr	r3, [r7, #0]
 8100cf4:	4632      	mov	r2, r6
 8100cf6:	4629      	mov	r1, r5
 8100cf8:	4620      	mov	r0, r4
 8100cfa:	f000 fd2a 	bl	8101752 <xTaskCreate>
 8100cfe:	4603      	mov	r3, r0
 8100d00:	2b01      	cmp	r3, #1
 8100d02:	d001      	beq.n	8100d08 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8100d04:	2300      	movs	r3, #0
 8100d06:	e000      	b.n	8100d0a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8100d08:	68fb      	ldr	r3, [r7, #12]
}
 8100d0a:	4618      	mov	r0, r3
 8100d0c:	3714      	adds	r7, #20
 8100d0e:	46bd      	mov	sp, r7
 8100d10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08100d12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8100d12:	b580      	push	{r7, lr}
 8100d14:	b084      	sub	sp, #16
 8100d16:	af00      	add	r7, sp, #0
 8100d18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8100d1a:	687b      	ldr	r3, [r7, #4]
 8100d1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8100d1e:	68fb      	ldr	r3, [r7, #12]
 8100d20:	2b00      	cmp	r3, #0
 8100d22:	d001      	beq.n	8100d28 <osDelay+0x16>
 8100d24:	68fb      	ldr	r3, [r7, #12]
 8100d26:	e000      	b.n	8100d2a <osDelay+0x18>
 8100d28:	2301      	movs	r3, #1
 8100d2a:	4618      	mov	r0, r3
 8100d2c:	f000 fe48 	bl	81019c0 <vTaskDelay>
  
  return osOK;
 8100d30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8100d32:	4618      	mov	r0, r3
 8100d34:	3710      	adds	r7, #16
 8100d36:	46bd      	mov	sp, r7
 8100d38:	bd80      	pop	{r7, pc}
	...

08100d3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8100d3c:	b580      	push	{r7, lr}
 8100d3e:	b08a      	sub	sp, #40	; 0x28
 8100d40:	af00      	add	r7, sp, #0
 8100d42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8100d44:	2300      	movs	r3, #0
 8100d46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8100d48:	f000 fece 	bl	8101ae8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8100d4c:	4b5b      	ldr	r3, [pc, #364]	; (8100ebc <pvPortMalloc+0x180>)
 8100d4e:	681b      	ldr	r3, [r3, #0]
 8100d50:	2b00      	cmp	r3, #0
 8100d52:	d101      	bne.n	8100d58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8100d54:	f000 f920 	bl	8100f98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8100d58:	4b59      	ldr	r3, [pc, #356]	; (8100ec0 <pvPortMalloc+0x184>)
 8100d5a:	681a      	ldr	r2, [r3, #0]
 8100d5c:	687b      	ldr	r3, [r7, #4]
 8100d5e:	4013      	ands	r3, r2
 8100d60:	2b00      	cmp	r3, #0
 8100d62:	f040 8093 	bne.w	8100e8c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8100d66:	687b      	ldr	r3, [r7, #4]
 8100d68:	2b00      	cmp	r3, #0
 8100d6a:	d01d      	beq.n	8100da8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8100d6c:	2208      	movs	r2, #8
 8100d6e:	687b      	ldr	r3, [r7, #4]
 8100d70:	4413      	add	r3, r2
 8100d72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8100d74:	687b      	ldr	r3, [r7, #4]
 8100d76:	f003 0307 	and.w	r3, r3, #7
 8100d7a:	2b00      	cmp	r3, #0
 8100d7c:	d014      	beq.n	8100da8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8100d7e:	687b      	ldr	r3, [r7, #4]
 8100d80:	f023 0307 	bic.w	r3, r3, #7
 8100d84:	3308      	adds	r3, #8
 8100d86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8100d88:	687b      	ldr	r3, [r7, #4]
 8100d8a:	f003 0307 	and.w	r3, r3, #7
 8100d8e:	2b00      	cmp	r3, #0
 8100d90:	d00a      	beq.n	8100da8 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8100d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8100d96:	f383 8811 	msr	BASEPRI, r3
 8100d9a:	f3bf 8f6f 	isb	sy
 8100d9e:	f3bf 8f4f 	dsb	sy
 8100da2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8100da4:	bf00      	nop
 8100da6:	e7fe      	b.n	8100da6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8100da8:	687b      	ldr	r3, [r7, #4]
 8100daa:	2b00      	cmp	r3, #0
 8100dac:	d06e      	beq.n	8100e8c <pvPortMalloc+0x150>
 8100dae:	4b45      	ldr	r3, [pc, #276]	; (8100ec4 <pvPortMalloc+0x188>)
 8100db0:	681b      	ldr	r3, [r3, #0]
 8100db2:	687a      	ldr	r2, [r7, #4]
 8100db4:	429a      	cmp	r2, r3
 8100db6:	d869      	bhi.n	8100e8c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8100db8:	4b43      	ldr	r3, [pc, #268]	; (8100ec8 <pvPortMalloc+0x18c>)
 8100dba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8100dbc:	4b42      	ldr	r3, [pc, #264]	; (8100ec8 <pvPortMalloc+0x18c>)
 8100dbe:	681b      	ldr	r3, [r3, #0]
 8100dc0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8100dc2:	e004      	b.n	8100dce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8100dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100dc6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8100dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100dca:	681b      	ldr	r3, [r3, #0]
 8100dcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8100dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100dd0:	685b      	ldr	r3, [r3, #4]
 8100dd2:	687a      	ldr	r2, [r7, #4]
 8100dd4:	429a      	cmp	r2, r3
 8100dd6:	d903      	bls.n	8100de0 <pvPortMalloc+0xa4>
 8100dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100dda:	681b      	ldr	r3, [r3, #0]
 8100ddc:	2b00      	cmp	r3, #0
 8100dde:	d1f1      	bne.n	8100dc4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8100de0:	4b36      	ldr	r3, [pc, #216]	; (8100ebc <pvPortMalloc+0x180>)
 8100de2:	681b      	ldr	r3, [r3, #0]
 8100de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8100de6:	429a      	cmp	r2, r3
 8100de8:	d050      	beq.n	8100e8c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8100dea:	6a3b      	ldr	r3, [r7, #32]
 8100dec:	681b      	ldr	r3, [r3, #0]
 8100dee:	2208      	movs	r2, #8
 8100df0:	4413      	add	r3, r2
 8100df2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8100df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100df6:	681a      	ldr	r2, [r3, #0]
 8100df8:	6a3b      	ldr	r3, [r7, #32]
 8100dfa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8100dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100dfe:	685a      	ldr	r2, [r3, #4]
 8100e00:	687b      	ldr	r3, [r7, #4]
 8100e02:	1ad2      	subs	r2, r2, r3
 8100e04:	2308      	movs	r3, #8
 8100e06:	005b      	lsls	r3, r3, #1
 8100e08:	429a      	cmp	r2, r3
 8100e0a:	d91f      	bls.n	8100e4c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8100e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8100e0e:	687b      	ldr	r3, [r7, #4]
 8100e10:	4413      	add	r3, r2
 8100e12:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8100e14:	69bb      	ldr	r3, [r7, #24]
 8100e16:	f003 0307 	and.w	r3, r3, #7
 8100e1a:	2b00      	cmp	r3, #0
 8100e1c:	d00a      	beq.n	8100e34 <pvPortMalloc+0xf8>
	__asm volatile
 8100e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8100e22:	f383 8811 	msr	BASEPRI, r3
 8100e26:	f3bf 8f6f 	isb	sy
 8100e2a:	f3bf 8f4f 	dsb	sy
 8100e2e:	613b      	str	r3, [r7, #16]
}
 8100e30:	bf00      	nop
 8100e32:	e7fe      	b.n	8100e32 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8100e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100e36:	685a      	ldr	r2, [r3, #4]
 8100e38:	687b      	ldr	r3, [r7, #4]
 8100e3a:	1ad2      	subs	r2, r2, r3
 8100e3c:	69bb      	ldr	r3, [r7, #24]
 8100e3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8100e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100e42:	687a      	ldr	r2, [r7, #4]
 8100e44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8100e46:	69b8      	ldr	r0, [r7, #24]
 8100e48:	f000 f908 	bl	810105c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8100e4c:	4b1d      	ldr	r3, [pc, #116]	; (8100ec4 <pvPortMalloc+0x188>)
 8100e4e:	681a      	ldr	r2, [r3, #0]
 8100e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100e52:	685b      	ldr	r3, [r3, #4]
 8100e54:	1ad3      	subs	r3, r2, r3
 8100e56:	4a1b      	ldr	r2, [pc, #108]	; (8100ec4 <pvPortMalloc+0x188>)
 8100e58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8100e5a:	4b1a      	ldr	r3, [pc, #104]	; (8100ec4 <pvPortMalloc+0x188>)
 8100e5c:	681a      	ldr	r2, [r3, #0]
 8100e5e:	4b1b      	ldr	r3, [pc, #108]	; (8100ecc <pvPortMalloc+0x190>)
 8100e60:	681b      	ldr	r3, [r3, #0]
 8100e62:	429a      	cmp	r2, r3
 8100e64:	d203      	bcs.n	8100e6e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8100e66:	4b17      	ldr	r3, [pc, #92]	; (8100ec4 <pvPortMalloc+0x188>)
 8100e68:	681b      	ldr	r3, [r3, #0]
 8100e6a:	4a18      	ldr	r2, [pc, #96]	; (8100ecc <pvPortMalloc+0x190>)
 8100e6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8100e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100e70:	685a      	ldr	r2, [r3, #4]
 8100e72:	4b13      	ldr	r3, [pc, #76]	; (8100ec0 <pvPortMalloc+0x184>)
 8100e74:	681b      	ldr	r3, [r3, #0]
 8100e76:	431a      	orrs	r2, r3
 8100e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100e7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8100e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100e7e:	2200      	movs	r2, #0
 8100e80:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8100e82:	4b13      	ldr	r3, [pc, #76]	; (8100ed0 <pvPortMalloc+0x194>)
 8100e84:	681b      	ldr	r3, [r3, #0]
 8100e86:	3301      	adds	r3, #1
 8100e88:	4a11      	ldr	r2, [pc, #68]	; (8100ed0 <pvPortMalloc+0x194>)
 8100e8a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8100e8c:	f000 fe3a 	bl	8101b04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8100e90:	69fb      	ldr	r3, [r7, #28]
 8100e92:	f003 0307 	and.w	r3, r3, #7
 8100e96:	2b00      	cmp	r3, #0
 8100e98:	d00a      	beq.n	8100eb0 <pvPortMalloc+0x174>
	__asm volatile
 8100e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8100e9e:	f383 8811 	msr	BASEPRI, r3
 8100ea2:	f3bf 8f6f 	isb	sy
 8100ea6:	f3bf 8f4f 	dsb	sy
 8100eaa:	60fb      	str	r3, [r7, #12]
}
 8100eac:	bf00      	nop
 8100eae:	e7fe      	b.n	8100eae <pvPortMalloc+0x172>
	return pvReturn;
 8100eb0:	69fb      	ldr	r3, [r7, #28]
}
 8100eb2:	4618      	mov	r0, r3
 8100eb4:	3728      	adds	r7, #40	; 0x28
 8100eb6:	46bd      	mov	sp, r7
 8100eb8:	bd80      	pop	{r7, pc}
 8100eba:	bf00      	nop
 8100ebc:	10003e94 	.word	0x10003e94
 8100ec0:	10003ea8 	.word	0x10003ea8
 8100ec4:	10003e98 	.word	0x10003e98
 8100ec8:	10003e8c 	.word	0x10003e8c
 8100ecc:	10003e9c 	.word	0x10003e9c
 8100ed0:	10003ea0 	.word	0x10003ea0

08100ed4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8100ed4:	b580      	push	{r7, lr}
 8100ed6:	b086      	sub	sp, #24
 8100ed8:	af00      	add	r7, sp, #0
 8100eda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8100edc:	687b      	ldr	r3, [r7, #4]
 8100ede:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8100ee0:	687b      	ldr	r3, [r7, #4]
 8100ee2:	2b00      	cmp	r3, #0
 8100ee4:	d04d      	beq.n	8100f82 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8100ee6:	2308      	movs	r3, #8
 8100ee8:	425b      	negs	r3, r3
 8100eea:	697a      	ldr	r2, [r7, #20]
 8100eec:	4413      	add	r3, r2
 8100eee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8100ef0:	697b      	ldr	r3, [r7, #20]
 8100ef2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8100ef4:	693b      	ldr	r3, [r7, #16]
 8100ef6:	685a      	ldr	r2, [r3, #4]
 8100ef8:	4b24      	ldr	r3, [pc, #144]	; (8100f8c <vPortFree+0xb8>)
 8100efa:	681b      	ldr	r3, [r3, #0]
 8100efc:	4013      	ands	r3, r2
 8100efe:	2b00      	cmp	r3, #0
 8100f00:	d10a      	bne.n	8100f18 <vPortFree+0x44>
	__asm volatile
 8100f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8100f06:	f383 8811 	msr	BASEPRI, r3
 8100f0a:	f3bf 8f6f 	isb	sy
 8100f0e:	f3bf 8f4f 	dsb	sy
 8100f12:	60fb      	str	r3, [r7, #12]
}
 8100f14:	bf00      	nop
 8100f16:	e7fe      	b.n	8100f16 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8100f18:	693b      	ldr	r3, [r7, #16]
 8100f1a:	681b      	ldr	r3, [r3, #0]
 8100f1c:	2b00      	cmp	r3, #0
 8100f1e:	d00a      	beq.n	8100f36 <vPortFree+0x62>
	__asm volatile
 8100f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8100f24:	f383 8811 	msr	BASEPRI, r3
 8100f28:	f3bf 8f6f 	isb	sy
 8100f2c:	f3bf 8f4f 	dsb	sy
 8100f30:	60bb      	str	r3, [r7, #8]
}
 8100f32:	bf00      	nop
 8100f34:	e7fe      	b.n	8100f34 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8100f36:	693b      	ldr	r3, [r7, #16]
 8100f38:	685a      	ldr	r2, [r3, #4]
 8100f3a:	4b14      	ldr	r3, [pc, #80]	; (8100f8c <vPortFree+0xb8>)
 8100f3c:	681b      	ldr	r3, [r3, #0]
 8100f3e:	4013      	ands	r3, r2
 8100f40:	2b00      	cmp	r3, #0
 8100f42:	d01e      	beq.n	8100f82 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8100f44:	693b      	ldr	r3, [r7, #16]
 8100f46:	681b      	ldr	r3, [r3, #0]
 8100f48:	2b00      	cmp	r3, #0
 8100f4a:	d11a      	bne.n	8100f82 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8100f4c:	693b      	ldr	r3, [r7, #16]
 8100f4e:	685a      	ldr	r2, [r3, #4]
 8100f50:	4b0e      	ldr	r3, [pc, #56]	; (8100f8c <vPortFree+0xb8>)
 8100f52:	681b      	ldr	r3, [r3, #0]
 8100f54:	43db      	mvns	r3, r3
 8100f56:	401a      	ands	r2, r3
 8100f58:	693b      	ldr	r3, [r7, #16]
 8100f5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8100f5c:	f000 fdc4 	bl	8101ae8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8100f60:	693b      	ldr	r3, [r7, #16]
 8100f62:	685a      	ldr	r2, [r3, #4]
 8100f64:	4b0a      	ldr	r3, [pc, #40]	; (8100f90 <vPortFree+0xbc>)
 8100f66:	681b      	ldr	r3, [r3, #0]
 8100f68:	4413      	add	r3, r2
 8100f6a:	4a09      	ldr	r2, [pc, #36]	; (8100f90 <vPortFree+0xbc>)
 8100f6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8100f6e:	6938      	ldr	r0, [r7, #16]
 8100f70:	f000 f874 	bl	810105c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8100f74:	4b07      	ldr	r3, [pc, #28]	; (8100f94 <vPortFree+0xc0>)
 8100f76:	681b      	ldr	r3, [r3, #0]
 8100f78:	3301      	adds	r3, #1
 8100f7a:	4a06      	ldr	r2, [pc, #24]	; (8100f94 <vPortFree+0xc0>)
 8100f7c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8100f7e:	f000 fdc1 	bl	8101b04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8100f82:	bf00      	nop
 8100f84:	3718      	adds	r7, #24
 8100f86:	46bd      	mov	sp, r7
 8100f88:	bd80      	pop	{r7, pc}
 8100f8a:	bf00      	nop
 8100f8c:	10003ea8 	.word	0x10003ea8
 8100f90:	10003e98 	.word	0x10003e98
 8100f94:	10003ea4 	.word	0x10003ea4

08100f98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8100f98:	b480      	push	{r7}
 8100f9a:	b085      	sub	sp, #20
 8100f9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8100f9e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8100fa2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8100fa4:	4b27      	ldr	r3, [pc, #156]	; (8101044 <prvHeapInit+0xac>)
 8100fa6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8100fa8:	68fb      	ldr	r3, [r7, #12]
 8100faa:	f003 0307 	and.w	r3, r3, #7
 8100fae:	2b00      	cmp	r3, #0
 8100fb0:	d00c      	beq.n	8100fcc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8100fb2:	68fb      	ldr	r3, [r7, #12]
 8100fb4:	3307      	adds	r3, #7
 8100fb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8100fb8:	68fb      	ldr	r3, [r7, #12]
 8100fba:	f023 0307 	bic.w	r3, r3, #7
 8100fbe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8100fc0:	68ba      	ldr	r2, [r7, #8]
 8100fc2:	68fb      	ldr	r3, [r7, #12]
 8100fc4:	1ad3      	subs	r3, r2, r3
 8100fc6:	4a1f      	ldr	r2, [pc, #124]	; (8101044 <prvHeapInit+0xac>)
 8100fc8:	4413      	add	r3, r2
 8100fca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8100fcc:	68fb      	ldr	r3, [r7, #12]
 8100fce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8100fd0:	4a1d      	ldr	r2, [pc, #116]	; (8101048 <prvHeapInit+0xb0>)
 8100fd2:	687b      	ldr	r3, [r7, #4]
 8100fd4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8100fd6:	4b1c      	ldr	r3, [pc, #112]	; (8101048 <prvHeapInit+0xb0>)
 8100fd8:	2200      	movs	r2, #0
 8100fda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8100fdc:	687b      	ldr	r3, [r7, #4]
 8100fde:	68ba      	ldr	r2, [r7, #8]
 8100fe0:	4413      	add	r3, r2
 8100fe2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8100fe4:	2208      	movs	r2, #8
 8100fe6:	68fb      	ldr	r3, [r7, #12]
 8100fe8:	1a9b      	subs	r3, r3, r2
 8100fea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8100fec:	68fb      	ldr	r3, [r7, #12]
 8100fee:	f023 0307 	bic.w	r3, r3, #7
 8100ff2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8100ff4:	68fb      	ldr	r3, [r7, #12]
 8100ff6:	4a15      	ldr	r2, [pc, #84]	; (810104c <prvHeapInit+0xb4>)
 8100ff8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8100ffa:	4b14      	ldr	r3, [pc, #80]	; (810104c <prvHeapInit+0xb4>)
 8100ffc:	681b      	ldr	r3, [r3, #0]
 8100ffe:	2200      	movs	r2, #0
 8101000:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8101002:	4b12      	ldr	r3, [pc, #72]	; (810104c <prvHeapInit+0xb4>)
 8101004:	681b      	ldr	r3, [r3, #0]
 8101006:	2200      	movs	r2, #0
 8101008:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810100a:	687b      	ldr	r3, [r7, #4]
 810100c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810100e:	683b      	ldr	r3, [r7, #0]
 8101010:	68fa      	ldr	r2, [r7, #12]
 8101012:	1ad2      	subs	r2, r2, r3
 8101014:	683b      	ldr	r3, [r7, #0]
 8101016:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8101018:	4b0c      	ldr	r3, [pc, #48]	; (810104c <prvHeapInit+0xb4>)
 810101a:	681a      	ldr	r2, [r3, #0]
 810101c:	683b      	ldr	r3, [r7, #0]
 810101e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101020:	683b      	ldr	r3, [r7, #0]
 8101022:	685b      	ldr	r3, [r3, #4]
 8101024:	4a0a      	ldr	r2, [pc, #40]	; (8101050 <prvHeapInit+0xb8>)
 8101026:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101028:	683b      	ldr	r3, [r7, #0]
 810102a:	685b      	ldr	r3, [r3, #4]
 810102c:	4a09      	ldr	r2, [pc, #36]	; (8101054 <prvHeapInit+0xbc>)
 810102e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8101030:	4b09      	ldr	r3, [pc, #36]	; (8101058 <prvHeapInit+0xc0>)
 8101032:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8101036:	601a      	str	r2, [r3, #0]
}
 8101038:	bf00      	nop
 810103a:	3714      	adds	r7, #20
 810103c:	46bd      	mov	sp, r7
 810103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101042:	4770      	bx	lr
 8101044:	1000028c 	.word	0x1000028c
 8101048:	10003e8c 	.word	0x10003e8c
 810104c:	10003e94 	.word	0x10003e94
 8101050:	10003e9c 	.word	0x10003e9c
 8101054:	10003e98 	.word	0x10003e98
 8101058:	10003ea8 	.word	0x10003ea8

0810105c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810105c:	b480      	push	{r7}
 810105e:	b085      	sub	sp, #20
 8101060:	af00      	add	r7, sp, #0
 8101062:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8101064:	4b28      	ldr	r3, [pc, #160]	; (8101108 <prvInsertBlockIntoFreeList+0xac>)
 8101066:	60fb      	str	r3, [r7, #12]
 8101068:	e002      	b.n	8101070 <prvInsertBlockIntoFreeList+0x14>
 810106a:	68fb      	ldr	r3, [r7, #12]
 810106c:	681b      	ldr	r3, [r3, #0]
 810106e:	60fb      	str	r3, [r7, #12]
 8101070:	68fb      	ldr	r3, [r7, #12]
 8101072:	681b      	ldr	r3, [r3, #0]
 8101074:	687a      	ldr	r2, [r7, #4]
 8101076:	429a      	cmp	r2, r3
 8101078:	d8f7      	bhi.n	810106a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810107a:	68fb      	ldr	r3, [r7, #12]
 810107c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810107e:	68fb      	ldr	r3, [r7, #12]
 8101080:	685b      	ldr	r3, [r3, #4]
 8101082:	68ba      	ldr	r2, [r7, #8]
 8101084:	4413      	add	r3, r2
 8101086:	687a      	ldr	r2, [r7, #4]
 8101088:	429a      	cmp	r2, r3
 810108a:	d108      	bne.n	810109e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810108c:	68fb      	ldr	r3, [r7, #12]
 810108e:	685a      	ldr	r2, [r3, #4]
 8101090:	687b      	ldr	r3, [r7, #4]
 8101092:	685b      	ldr	r3, [r3, #4]
 8101094:	441a      	add	r2, r3
 8101096:	68fb      	ldr	r3, [r7, #12]
 8101098:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810109a:	68fb      	ldr	r3, [r7, #12]
 810109c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810109e:	687b      	ldr	r3, [r7, #4]
 81010a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 81010a2:	687b      	ldr	r3, [r7, #4]
 81010a4:	685b      	ldr	r3, [r3, #4]
 81010a6:	68ba      	ldr	r2, [r7, #8]
 81010a8:	441a      	add	r2, r3
 81010aa:	68fb      	ldr	r3, [r7, #12]
 81010ac:	681b      	ldr	r3, [r3, #0]
 81010ae:	429a      	cmp	r2, r3
 81010b0:	d118      	bne.n	81010e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 81010b2:	68fb      	ldr	r3, [r7, #12]
 81010b4:	681a      	ldr	r2, [r3, #0]
 81010b6:	4b15      	ldr	r3, [pc, #84]	; (810110c <prvInsertBlockIntoFreeList+0xb0>)
 81010b8:	681b      	ldr	r3, [r3, #0]
 81010ba:	429a      	cmp	r2, r3
 81010bc:	d00d      	beq.n	81010da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 81010be:	687b      	ldr	r3, [r7, #4]
 81010c0:	685a      	ldr	r2, [r3, #4]
 81010c2:	68fb      	ldr	r3, [r7, #12]
 81010c4:	681b      	ldr	r3, [r3, #0]
 81010c6:	685b      	ldr	r3, [r3, #4]
 81010c8:	441a      	add	r2, r3
 81010ca:	687b      	ldr	r3, [r7, #4]
 81010cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 81010ce:	68fb      	ldr	r3, [r7, #12]
 81010d0:	681b      	ldr	r3, [r3, #0]
 81010d2:	681a      	ldr	r2, [r3, #0]
 81010d4:	687b      	ldr	r3, [r7, #4]
 81010d6:	601a      	str	r2, [r3, #0]
 81010d8:	e008      	b.n	81010ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 81010da:	4b0c      	ldr	r3, [pc, #48]	; (810110c <prvInsertBlockIntoFreeList+0xb0>)
 81010dc:	681a      	ldr	r2, [r3, #0]
 81010de:	687b      	ldr	r3, [r7, #4]
 81010e0:	601a      	str	r2, [r3, #0]
 81010e2:	e003      	b.n	81010ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 81010e4:	68fb      	ldr	r3, [r7, #12]
 81010e6:	681a      	ldr	r2, [r3, #0]
 81010e8:	687b      	ldr	r3, [r7, #4]
 81010ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 81010ec:	68fa      	ldr	r2, [r7, #12]
 81010ee:	687b      	ldr	r3, [r7, #4]
 81010f0:	429a      	cmp	r2, r3
 81010f2:	d002      	beq.n	81010fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 81010f4:	68fb      	ldr	r3, [r7, #12]
 81010f6:	687a      	ldr	r2, [r7, #4]
 81010f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81010fa:	bf00      	nop
 81010fc:	3714      	adds	r7, #20
 81010fe:	46bd      	mov	sp, r7
 8101100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101104:	4770      	bx	lr
 8101106:	bf00      	nop
 8101108:	10003e8c 	.word	0x10003e8c
 810110c:	10003e94 	.word	0x10003e94

08101110 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8101110:	b480      	push	{r7}
 8101112:	b083      	sub	sp, #12
 8101114:	af00      	add	r7, sp, #0
 8101116:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101118:	687b      	ldr	r3, [r7, #4]
 810111a:	f103 0208 	add.w	r2, r3, #8
 810111e:	687b      	ldr	r3, [r7, #4]
 8101120:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8101122:	687b      	ldr	r3, [r7, #4]
 8101124:	f04f 32ff 	mov.w	r2, #4294967295
 8101128:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810112a:	687b      	ldr	r3, [r7, #4]
 810112c:	f103 0208 	add.w	r2, r3, #8
 8101130:	687b      	ldr	r3, [r7, #4]
 8101132:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101134:	687b      	ldr	r3, [r7, #4]
 8101136:	f103 0208 	add.w	r2, r3, #8
 810113a:	687b      	ldr	r3, [r7, #4]
 810113c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810113e:	687b      	ldr	r3, [r7, #4]
 8101140:	2200      	movs	r2, #0
 8101142:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8101144:	bf00      	nop
 8101146:	370c      	adds	r7, #12
 8101148:	46bd      	mov	sp, r7
 810114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810114e:	4770      	bx	lr

08101150 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8101150:	b480      	push	{r7}
 8101152:	b083      	sub	sp, #12
 8101154:	af00      	add	r7, sp, #0
 8101156:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8101158:	687b      	ldr	r3, [r7, #4]
 810115a:	2200      	movs	r2, #0
 810115c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810115e:	bf00      	nop
 8101160:	370c      	adds	r7, #12
 8101162:	46bd      	mov	sp, r7
 8101164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101168:	4770      	bx	lr

0810116a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810116a:	b480      	push	{r7}
 810116c:	b085      	sub	sp, #20
 810116e:	af00      	add	r7, sp, #0
 8101170:	6078      	str	r0, [r7, #4]
 8101172:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8101174:	687b      	ldr	r3, [r7, #4]
 8101176:	685b      	ldr	r3, [r3, #4]
 8101178:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810117a:	683b      	ldr	r3, [r7, #0]
 810117c:	68fa      	ldr	r2, [r7, #12]
 810117e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8101180:	68fb      	ldr	r3, [r7, #12]
 8101182:	689a      	ldr	r2, [r3, #8]
 8101184:	683b      	ldr	r3, [r7, #0]
 8101186:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8101188:	68fb      	ldr	r3, [r7, #12]
 810118a:	689b      	ldr	r3, [r3, #8]
 810118c:	683a      	ldr	r2, [r7, #0]
 810118e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8101190:	68fb      	ldr	r3, [r7, #12]
 8101192:	683a      	ldr	r2, [r7, #0]
 8101194:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8101196:	683b      	ldr	r3, [r7, #0]
 8101198:	687a      	ldr	r2, [r7, #4]
 810119a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810119c:	687b      	ldr	r3, [r7, #4]
 810119e:	681b      	ldr	r3, [r3, #0]
 81011a0:	1c5a      	adds	r2, r3, #1
 81011a2:	687b      	ldr	r3, [r7, #4]
 81011a4:	601a      	str	r2, [r3, #0]
}
 81011a6:	bf00      	nop
 81011a8:	3714      	adds	r7, #20
 81011aa:	46bd      	mov	sp, r7
 81011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011b0:	4770      	bx	lr

081011b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81011b2:	b480      	push	{r7}
 81011b4:	b085      	sub	sp, #20
 81011b6:	af00      	add	r7, sp, #0
 81011b8:	6078      	str	r0, [r7, #4]
 81011ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 81011bc:	683b      	ldr	r3, [r7, #0]
 81011be:	681b      	ldr	r3, [r3, #0]
 81011c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 81011c2:	68bb      	ldr	r3, [r7, #8]
 81011c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81011c8:	d103      	bne.n	81011d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 81011ca:	687b      	ldr	r3, [r7, #4]
 81011cc:	691b      	ldr	r3, [r3, #16]
 81011ce:	60fb      	str	r3, [r7, #12]
 81011d0:	e00c      	b.n	81011ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 81011d2:	687b      	ldr	r3, [r7, #4]
 81011d4:	3308      	adds	r3, #8
 81011d6:	60fb      	str	r3, [r7, #12]
 81011d8:	e002      	b.n	81011e0 <vListInsert+0x2e>
 81011da:	68fb      	ldr	r3, [r7, #12]
 81011dc:	685b      	ldr	r3, [r3, #4]
 81011de:	60fb      	str	r3, [r7, #12]
 81011e0:	68fb      	ldr	r3, [r7, #12]
 81011e2:	685b      	ldr	r3, [r3, #4]
 81011e4:	681b      	ldr	r3, [r3, #0]
 81011e6:	68ba      	ldr	r2, [r7, #8]
 81011e8:	429a      	cmp	r2, r3
 81011ea:	d2f6      	bcs.n	81011da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 81011ec:	68fb      	ldr	r3, [r7, #12]
 81011ee:	685a      	ldr	r2, [r3, #4]
 81011f0:	683b      	ldr	r3, [r7, #0]
 81011f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 81011f4:	683b      	ldr	r3, [r7, #0]
 81011f6:	685b      	ldr	r3, [r3, #4]
 81011f8:	683a      	ldr	r2, [r7, #0]
 81011fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 81011fc:	683b      	ldr	r3, [r7, #0]
 81011fe:	68fa      	ldr	r2, [r7, #12]
 8101200:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8101202:	68fb      	ldr	r3, [r7, #12]
 8101204:	683a      	ldr	r2, [r7, #0]
 8101206:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8101208:	683b      	ldr	r3, [r7, #0]
 810120a:	687a      	ldr	r2, [r7, #4]
 810120c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810120e:	687b      	ldr	r3, [r7, #4]
 8101210:	681b      	ldr	r3, [r3, #0]
 8101212:	1c5a      	adds	r2, r3, #1
 8101214:	687b      	ldr	r3, [r7, #4]
 8101216:	601a      	str	r2, [r3, #0]
}
 8101218:	bf00      	nop
 810121a:	3714      	adds	r7, #20
 810121c:	46bd      	mov	sp, r7
 810121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101222:	4770      	bx	lr

08101224 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8101224:	b480      	push	{r7}
 8101226:	b085      	sub	sp, #20
 8101228:	af00      	add	r7, sp, #0
 810122a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810122c:	687b      	ldr	r3, [r7, #4]
 810122e:	691b      	ldr	r3, [r3, #16]
 8101230:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8101232:	687b      	ldr	r3, [r7, #4]
 8101234:	685b      	ldr	r3, [r3, #4]
 8101236:	687a      	ldr	r2, [r7, #4]
 8101238:	6892      	ldr	r2, [r2, #8]
 810123a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810123c:	687b      	ldr	r3, [r7, #4]
 810123e:	689b      	ldr	r3, [r3, #8]
 8101240:	687a      	ldr	r2, [r7, #4]
 8101242:	6852      	ldr	r2, [r2, #4]
 8101244:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8101246:	68fb      	ldr	r3, [r7, #12]
 8101248:	685b      	ldr	r3, [r3, #4]
 810124a:	687a      	ldr	r2, [r7, #4]
 810124c:	429a      	cmp	r2, r3
 810124e:	d103      	bne.n	8101258 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8101250:	687b      	ldr	r3, [r7, #4]
 8101252:	689a      	ldr	r2, [r3, #8]
 8101254:	68fb      	ldr	r3, [r7, #12]
 8101256:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8101258:	687b      	ldr	r3, [r7, #4]
 810125a:	2200      	movs	r2, #0
 810125c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810125e:	68fb      	ldr	r3, [r7, #12]
 8101260:	681b      	ldr	r3, [r3, #0]
 8101262:	1e5a      	subs	r2, r3, #1
 8101264:	68fb      	ldr	r3, [r7, #12]
 8101266:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8101268:	68fb      	ldr	r3, [r7, #12]
 810126a:	681b      	ldr	r3, [r3, #0]
}
 810126c:	4618      	mov	r0, r3
 810126e:	3714      	adds	r7, #20
 8101270:	46bd      	mov	sp, r7
 8101272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101276:	4770      	bx	lr

08101278 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8101278:	b480      	push	{r7}
 810127a:	b085      	sub	sp, #20
 810127c:	af00      	add	r7, sp, #0
 810127e:	60f8      	str	r0, [r7, #12]
 8101280:	60b9      	str	r1, [r7, #8]
 8101282:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8101284:	68fb      	ldr	r3, [r7, #12]
 8101286:	3b04      	subs	r3, #4
 8101288:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810128a:	68fb      	ldr	r3, [r7, #12]
 810128c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8101290:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8101292:	68fb      	ldr	r3, [r7, #12]
 8101294:	3b04      	subs	r3, #4
 8101296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8101298:	68bb      	ldr	r3, [r7, #8]
 810129a:	f023 0201 	bic.w	r2, r3, #1
 810129e:	68fb      	ldr	r3, [r7, #12]
 81012a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81012a2:	68fb      	ldr	r3, [r7, #12]
 81012a4:	3b04      	subs	r3, #4
 81012a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 81012a8:	4a0c      	ldr	r2, [pc, #48]	; (81012dc <pxPortInitialiseStack+0x64>)
 81012aa:	68fb      	ldr	r3, [r7, #12]
 81012ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 81012ae:	68fb      	ldr	r3, [r7, #12]
 81012b0:	3b14      	subs	r3, #20
 81012b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 81012b4:	687a      	ldr	r2, [r7, #4]
 81012b6:	68fb      	ldr	r3, [r7, #12]
 81012b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 81012ba:	68fb      	ldr	r3, [r7, #12]
 81012bc:	3b04      	subs	r3, #4
 81012be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 81012c0:	68fb      	ldr	r3, [r7, #12]
 81012c2:	f06f 0202 	mvn.w	r2, #2
 81012c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 81012c8:	68fb      	ldr	r3, [r7, #12]
 81012ca:	3b20      	subs	r3, #32
 81012cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 81012ce:	68fb      	ldr	r3, [r7, #12]
}
 81012d0:	4618      	mov	r0, r3
 81012d2:	3714      	adds	r7, #20
 81012d4:	46bd      	mov	sp, r7
 81012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012da:	4770      	bx	lr
 81012dc:	081012e1 	.word	0x081012e1

081012e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 81012e0:	b480      	push	{r7}
 81012e2:	b085      	sub	sp, #20
 81012e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 81012e6:	2300      	movs	r3, #0
 81012e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 81012ea:	4b12      	ldr	r3, [pc, #72]	; (8101334 <prvTaskExitError+0x54>)
 81012ec:	681b      	ldr	r3, [r3, #0]
 81012ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 81012f2:	d00a      	beq.n	810130a <prvTaskExitError+0x2a>
	__asm volatile
 81012f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81012f8:	f383 8811 	msr	BASEPRI, r3
 81012fc:	f3bf 8f6f 	isb	sy
 8101300:	f3bf 8f4f 	dsb	sy
 8101304:	60fb      	str	r3, [r7, #12]
}
 8101306:	bf00      	nop
 8101308:	e7fe      	b.n	8101308 <prvTaskExitError+0x28>
	__asm volatile
 810130a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810130e:	f383 8811 	msr	BASEPRI, r3
 8101312:	f3bf 8f6f 	isb	sy
 8101316:	f3bf 8f4f 	dsb	sy
 810131a:	60bb      	str	r3, [r7, #8]
}
 810131c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810131e:	bf00      	nop
 8101320:	687b      	ldr	r3, [r7, #4]
 8101322:	2b00      	cmp	r3, #0
 8101324:	d0fc      	beq.n	8101320 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8101326:	bf00      	nop
 8101328:	bf00      	nop
 810132a:	3714      	adds	r7, #20
 810132c:	46bd      	mov	sp, r7
 810132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101332:	4770      	bx	lr
 8101334:	10000010 	.word	0x10000010
	...

08101340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8101340:	4b07      	ldr	r3, [pc, #28]	; (8101360 <pxCurrentTCBConst2>)
 8101342:	6819      	ldr	r1, [r3, #0]
 8101344:	6808      	ldr	r0, [r1, #0]
 8101346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810134a:	f380 8809 	msr	PSP, r0
 810134e:	f3bf 8f6f 	isb	sy
 8101352:	f04f 0000 	mov.w	r0, #0
 8101356:	f380 8811 	msr	BASEPRI, r0
 810135a:	4770      	bx	lr
 810135c:	f3af 8000 	nop.w

08101360 <pxCurrentTCBConst2>:
 8101360:	10003eb4 	.word	0x10003eb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8101364:	bf00      	nop
 8101366:	bf00      	nop

08101368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8101368:	4808      	ldr	r0, [pc, #32]	; (810138c <prvPortStartFirstTask+0x24>)
 810136a:	6800      	ldr	r0, [r0, #0]
 810136c:	6800      	ldr	r0, [r0, #0]
 810136e:	f380 8808 	msr	MSP, r0
 8101372:	f04f 0000 	mov.w	r0, #0
 8101376:	f380 8814 	msr	CONTROL, r0
 810137a:	b662      	cpsie	i
 810137c:	b661      	cpsie	f
 810137e:	f3bf 8f4f 	dsb	sy
 8101382:	f3bf 8f6f 	isb	sy
 8101386:	df00      	svc	0
 8101388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810138a:	bf00      	nop
 810138c:	e000ed08 	.word	0xe000ed08

08101390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8101390:	b580      	push	{r7, lr}
 8101392:	b086      	sub	sp, #24
 8101394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8101396:	4b46      	ldr	r3, [pc, #280]	; (81014b0 <xPortStartScheduler+0x120>)
 8101398:	681b      	ldr	r3, [r3, #0]
 810139a:	4a46      	ldr	r2, [pc, #280]	; (81014b4 <xPortStartScheduler+0x124>)
 810139c:	4293      	cmp	r3, r2
 810139e:	d10a      	bne.n	81013b6 <xPortStartScheduler+0x26>
	__asm volatile
 81013a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81013a4:	f383 8811 	msr	BASEPRI, r3
 81013a8:	f3bf 8f6f 	isb	sy
 81013ac:	f3bf 8f4f 	dsb	sy
 81013b0:	613b      	str	r3, [r7, #16]
}
 81013b2:	bf00      	nop
 81013b4:	e7fe      	b.n	81013b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 81013b6:	4b3e      	ldr	r3, [pc, #248]	; (81014b0 <xPortStartScheduler+0x120>)
 81013b8:	681b      	ldr	r3, [r3, #0]
 81013ba:	4a3f      	ldr	r2, [pc, #252]	; (81014b8 <xPortStartScheduler+0x128>)
 81013bc:	4293      	cmp	r3, r2
 81013be:	d10a      	bne.n	81013d6 <xPortStartScheduler+0x46>
	__asm volatile
 81013c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81013c4:	f383 8811 	msr	BASEPRI, r3
 81013c8:	f3bf 8f6f 	isb	sy
 81013cc:	f3bf 8f4f 	dsb	sy
 81013d0:	60fb      	str	r3, [r7, #12]
}
 81013d2:	bf00      	nop
 81013d4:	e7fe      	b.n	81013d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 81013d6:	4b39      	ldr	r3, [pc, #228]	; (81014bc <xPortStartScheduler+0x12c>)
 81013d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 81013da:	697b      	ldr	r3, [r7, #20]
 81013dc:	781b      	ldrb	r3, [r3, #0]
 81013de:	b2db      	uxtb	r3, r3
 81013e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 81013e2:	697b      	ldr	r3, [r7, #20]
 81013e4:	22ff      	movs	r2, #255	; 0xff
 81013e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 81013e8:	697b      	ldr	r3, [r7, #20]
 81013ea:	781b      	ldrb	r3, [r3, #0]
 81013ec:	b2db      	uxtb	r3, r3
 81013ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 81013f0:	78fb      	ldrb	r3, [r7, #3]
 81013f2:	b2db      	uxtb	r3, r3
 81013f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 81013f8:	b2da      	uxtb	r2, r3
 81013fa:	4b31      	ldr	r3, [pc, #196]	; (81014c0 <xPortStartScheduler+0x130>)
 81013fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 81013fe:	4b31      	ldr	r3, [pc, #196]	; (81014c4 <xPortStartScheduler+0x134>)
 8101400:	2207      	movs	r2, #7
 8101402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8101404:	e009      	b.n	810141a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8101406:	4b2f      	ldr	r3, [pc, #188]	; (81014c4 <xPortStartScheduler+0x134>)
 8101408:	681b      	ldr	r3, [r3, #0]
 810140a:	3b01      	subs	r3, #1
 810140c:	4a2d      	ldr	r2, [pc, #180]	; (81014c4 <xPortStartScheduler+0x134>)
 810140e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8101410:	78fb      	ldrb	r3, [r7, #3]
 8101412:	b2db      	uxtb	r3, r3
 8101414:	005b      	lsls	r3, r3, #1
 8101416:	b2db      	uxtb	r3, r3
 8101418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810141a:	78fb      	ldrb	r3, [r7, #3]
 810141c:	b2db      	uxtb	r3, r3
 810141e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101422:	2b80      	cmp	r3, #128	; 0x80
 8101424:	d0ef      	beq.n	8101406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8101426:	4b27      	ldr	r3, [pc, #156]	; (81014c4 <xPortStartScheduler+0x134>)
 8101428:	681b      	ldr	r3, [r3, #0]
 810142a:	f1c3 0307 	rsb	r3, r3, #7
 810142e:	2b04      	cmp	r3, #4
 8101430:	d00a      	beq.n	8101448 <xPortStartScheduler+0xb8>
	__asm volatile
 8101432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101436:	f383 8811 	msr	BASEPRI, r3
 810143a:	f3bf 8f6f 	isb	sy
 810143e:	f3bf 8f4f 	dsb	sy
 8101442:	60bb      	str	r3, [r7, #8]
}
 8101444:	bf00      	nop
 8101446:	e7fe      	b.n	8101446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8101448:	4b1e      	ldr	r3, [pc, #120]	; (81014c4 <xPortStartScheduler+0x134>)
 810144a:	681b      	ldr	r3, [r3, #0]
 810144c:	021b      	lsls	r3, r3, #8
 810144e:	4a1d      	ldr	r2, [pc, #116]	; (81014c4 <xPortStartScheduler+0x134>)
 8101450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8101452:	4b1c      	ldr	r3, [pc, #112]	; (81014c4 <xPortStartScheduler+0x134>)
 8101454:	681b      	ldr	r3, [r3, #0]
 8101456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 810145a:	4a1a      	ldr	r2, [pc, #104]	; (81014c4 <xPortStartScheduler+0x134>)
 810145c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810145e:	687b      	ldr	r3, [r7, #4]
 8101460:	b2da      	uxtb	r2, r3
 8101462:	697b      	ldr	r3, [r7, #20]
 8101464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8101466:	4b18      	ldr	r3, [pc, #96]	; (81014c8 <xPortStartScheduler+0x138>)
 8101468:	681b      	ldr	r3, [r3, #0]
 810146a:	4a17      	ldr	r2, [pc, #92]	; (81014c8 <xPortStartScheduler+0x138>)
 810146c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8101472:	4b15      	ldr	r3, [pc, #84]	; (81014c8 <xPortStartScheduler+0x138>)
 8101474:	681b      	ldr	r3, [r3, #0]
 8101476:	4a14      	ldr	r2, [pc, #80]	; (81014c8 <xPortStartScheduler+0x138>)
 8101478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 810147c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810147e:	f000 f8dd 	bl	810163c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8101482:	4b12      	ldr	r3, [pc, #72]	; (81014cc <xPortStartScheduler+0x13c>)
 8101484:	2200      	movs	r2, #0
 8101486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8101488:	f000 f8fc 	bl	8101684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810148c:	4b10      	ldr	r3, [pc, #64]	; (81014d0 <xPortStartScheduler+0x140>)
 810148e:	681b      	ldr	r3, [r3, #0]
 8101490:	4a0f      	ldr	r2, [pc, #60]	; (81014d0 <xPortStartScheduler+0x140>)
 8101492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8101496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8101498:	f7ff ff66 	bl	8101368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810149c:	f000 fc86 	bl	8101dac <vTaskSwitchContext>
	prvTaskExitError();
 81014a0:	f7ff ff1e 	bl	81012e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81014a4:	2300      	movs	r3, #0
}
 81014a6:	4618      	mov	r0, r3
 81014a8:	3718      	adds	r7, #24
 81014aa:	46bd      	mov	sp, r7
 81014ac:	bd80      	pop	{r7, pc}
 81014ae:	bf00      	nop
 81014b0:	e000ed00 	.word	0xe000ed00
 81014b4:	410fc271 	.word	0x410fc271
 81014b8:	410fc270 	.word	0x410fc270
 81014bc:	e000e400 	.word	0xe000e400
 81014c0:	10003eac 	.word	0x10003eac
 81014c4:	10003eb0 	.word	0x10003eb0
 81014c8:	e000ed20 	.word	0xe000ed20
 81014cc:	10000010 	.word	0x10000010
 81014d0:	e000ef34 	.word	0xe000ef34

081014d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 81014d4:	b480      	push	{r7}
 81014d6:	b083      	sub	sp, #12
 81014d8:	af00      	add	r7, sp, #0
	__asm volatile
 81014da:	f04f 0350 	mov.w	r3, #80	; 0x50
 81014de:	f383 8811 	msr	BASEPRI, r3
 81014e2:	f3bf 8f6f 	isb	sy
 81014e6:	f3bf 8f4f 	dsb	sy
 81014ea:	607b      	str	r3, [r7, #4]
}
 81014ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 81014ee:	4b0f      	ldr	r3, [pc, #60]	; (810152c <vPortEnterCritical+0x58>)
 81014f0:	681b      	ldr	r3, [r3, #0]
 81014f2:	3301      	adds	r3, #1
 81014f4:	4a0d      	ldr	r2, [pc, #52]	; (810152c <vPortEnterCritical+0x58>)
 81014f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 81014f8:	4b0c      	ldr	r3, [pc, #48]	; (810152c <vPortEnterCritical+0x58>)
 81014fa:	681b      	ldr	r3, [r3, #0]
 81014fc:	2b01      	cmp	r3, #1
 81014fe:	d10f      	bne.n	8101520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8101500:	4b0b      	ldr	r3, [pc, #44]	; (8101530 <vPortEnterCritical+0x5c>)
 8101502:	681b      	ldr	r3, [r3, #0]
 8101504:	b2db      	uxtb	r3, r3
 8101506:	2b00      	cmp	r3, #0
 8101508:	d00a      	beq.n	8101520 <vPortEnterCritical+0x4c>
	__asm volatile
 810150a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810150e:	f383 8811 	msr	BASEPRI, r3
 8101512:	f3bf 8f6f 	isb	sy
 8101516:	f3bf 8f4f 	dsb	sy
 810151a:	603b      	str	r3, [r7, #0]
}
 810151c:	bf00      	nop
 810151e:	e7fe      	b.n	810151e <vPortEnterCritical+0x4a>
	}
}
 8101520:	bf00      	nop
 8101522:	370c      	adds	r7, #12
 8101524:	46bd      	mov	sp, r7
 8101526:	f85d 7b04 	ldr.w	r7, [sp], #4
 810152a:	4770      	bx	lr
 810152c:	10000010 	.word	0x10000010
 8101530:	e000ed04 	.word	0xe000ed04

08101534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8101534:	b480      	push	{r7}
 8101536:	b083      	sub	sp, #12
 8101538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810153a:	4b12      	ldr	r3, [pc, #72]	; (8101584 <vPortExitCritical+0x50>)
 810153c:	681b      	ldr	r3, [r3, #0]
 810153e:	2b00      	cmp	r3, #0
 8101540:	d10a      	bne.n	8101558 <vPortExitCritical+0x24>
	__asm volatile
 8101542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101546:	f383 8811 	msr	BASEPRI, r3
 810154a:	f3bf 8f6f 	isb	sy
 810154e:	f3bf 8f4f 	dsb	sy
 8101552:	607b      	str	r3, [r7, #4]
}
 8101554:	bf00      	nop
 8101556:	e7fe      	b.n	8101556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8101558:	4b0a      	ldr	r3, [pc, #40]	; (8101584 <vPortExitCritical+0x50>)
 810155a:	681b      	ldr	r3, [r3, #0]
 810155c:	3b01      	subs	r3, #1
 810155e:	4a09      	ldr	r2, [pc, #36]	; (8101584 <vPortExitCritical+0x50>)
 8101560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8101562:	4b08      	ldr	r3, [pc, #32]	; (8101584 <vPortExitCritical+0x50>)
 8101564:	681b      	ldr	r3, [r3, #0]
 8101566:	2b00      	cmp	r3, #0
 8101568:	d105      	bne.n	8101576 <vPortExitCritical+0x42>
 810156a:	2300      	movs	r3, #0
 810156c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810156e:	683b      	ldr	r3, [r7, #0]
 8101570:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8101574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8101576:	bf00      	nop
 8101578:	370c      	adds	r7, #12
 810157a:	46bd      	mov	sp, r7
 810157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101580:	4770      	bx	lr
 8101582:	bf00      	nop
 8101584:	10000010 	.word	0x10000010
	...

08101590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8101590:	f3ef 8009 	mrs	r0, PSP
 8101594:	f3bf 8f6f 	isb	sy
 8101598:	4b15      	ldr	r3, [pc, #84]	; (81015f0 <pxCurrentTCBConst>)
 810159a:	681a      	ldr	r2, [r3, #0]
 810159c:	f01e 0f10 	tst.w	lr, #16
 81015a0:	bf08      	it	eq
 81015a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81015a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81015aa:	6010      	str	r0, [r2, #0]
 81015ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 81015b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 81015b4:	f380 8811 	msr	BASEPRI, r0
 81015b8:	f3bf 8f4f 	dsb	sy
 81015bc:	f3bf 8f6f 	isb	sy
 81015c0:	f000 fbf4 	bl	8101dac <vTaskSwitchContext>
 81015c4:	f04f 0000 	mov.w	r0, #0
 81015c8:	f380 8811 	msr	BASEPRI, r0
 81015cc:	bc09      	pop	{r0, r3}
 81015ce:	6819      	ldr	r1, [r3, #0]
 81015d0:	6808      	ldr	r0, [r1, #0]
 81015d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81015d6:	f01e 0f10 	tst.w	lr, #16
 81015da:	bf08      	it	eq
 81015dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 81015e0:	f380 8809 	msr	PSP, r0
 81015e4:	f3bf 8f6f 	isb	sy
 81015e8:	4770      	bx	lr
 81015ea:	bf00      	nop
 81015ec:	f3af 8000 	nop.w

081015f0 <pxCurrentTCBConst>:
 81015f0:	10003eb4 	.word	0x10003eb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 81015f4:	bf00      	nop
 81015f6:	bf00      	nop

081015f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 81015f8:	b580      	push	{r7, lr}
 81015fa:	b082      	sub	sp, #8
 81015fc:	af00      	add	r7, sp, #0
	__asm volatile
 81015fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101602:	f383 8811 	msr	BASEPRI, r3
 8101606:	f3bf 8f6f 	isb	sy
 810160a:	f3bf 8f4f 	dsb	sy
 810160e:	607b      	str	r3, [r7, #4]
}
 8101610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8101612:	f000 fb13 	bl	8101c3c <xTaskIncrementTick>
 8101616:	4603      	mov	r3, r0
 8101618:	2b00      	cmp	r3, #0
 810161a:	d003      	beq.n	8101624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810161c:	4b06      	ldr	r3, [pc, #24]	; (8101638 <xPortSysTickHandler+0x40>)
 810161e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101622:	601a      	str	r2, [r3, #0]
 8101624:	2300      	movs	r3, #0
 8101626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8101628:	683b      	ldr	r3, [r7, #0]
 810162a:	f383 8811 	msr	BASEPRI, r3
}
 810162e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8101630:	bf00      	nop
 8101632:	3708      	adds	r7, #8
 8101634:	46bd      	mov	sp, r7
 8101636:	bd80      	pop	{r7, pc}
 8101638:	e000ed04 	.word	0xe000ed04

0810163c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810163c:	b480      	push	{r7}
 810163e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8101640:	4b0b      	ldr	r3, [pc, #44]	; (8101670 <vPortSetupTimerInterrupt+0x34>)
 8101642:	2200      	movs	r2, #0
 8101644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8101646:	4b0b      	ldr	r3, [pc, #44]	; (8101674 <vPortSetupTimerInterrupt+0x38>)
 8101648:	2200      	movs	r2, #0
 810164a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810164c:	4b0a      	ldr	r3, [pc, #40]	; (8101678 <vPortSetupTimerInterrupt+0x3c>)
 810164e:	681b      	ldr	r3, [r3, #0]
 8101650:	4a0a      	ldr	r2, [pc, #40]	; (810167c <vPortSetupTimerInterrupt+0x40>)
 8101652:	fba2 2303 	umull	r2, r3, r2, r3
 8101656:	099b      	lsrs	r3, r3, #6
 8101658:	4a09      	ldr	r2, [pc, #36]	; (8101680 <vPortSetupTimerInterrupt+0x44>)
 810165a:	3b01      	subs	r3, #1
 810165c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810165e:	4b04      	ldr	r3, [pc, #16]	; (8101670 <vPortSetupTimerInterrupt+0x34>)
 8101660:	2207      	movs	r2, #7
 8101662:	601a      	str	r2, [r3, #0]
}
 8101664:	bf00      	nop
 8101666:	46bd      	mov	sp, r7
 8101668:	f85d 7b04 	ldr.w	r7, [sp], #4
 810166c:	4770      	bx	lr
 810166e:	bf00      	nop
 8101670:	e000e010 	.word	0xe000e010
 8101674:	e000e018 	.word	0xe000e018
 8101678:	10000004 	.word	0x10000004
 810167c:	10624dd3 	.word	0x10624dd3
 8101680:	e000e014 	.word	0xe000e014

08101684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8101684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8101694 <vPortEnableVFP+0x10>
 8101688:	6801      	ldr	r1, [r0, #0]
 810168a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810168e:	6001      	str	r1, [r0, #0]
 8101690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8101692:	bf00      	nop
 8101694:	e000ed88 	.word	0xe000ed88

08101698 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8101698:	b580      	push	{r7, lr}
 810169a:	b08e      	sub	sp, #56	; 0x38
 810169c:	af04      	add	r7, sp, #16
 810169e:	60f8      	str	r0, [r7, #12]
 81016a0:	60b9      	str	r1, [r7, #8]
 81016a2:	607a      	str	r2, [r7, #4]
 81016a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 81016a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81016a8:	2b00      	cmp	r3, #0
 81016aa:	d10a      	bne.n	81016c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 81016ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 81016b0:	f383 8811 	msr	BASEPRI, r3
 81016b4:	f3bf 8f6f 	isb	sy
 81016b8:	f3bf 8f4f 	dsb	sy
 81016bc:	623b      	str	r3, [r7, #32]
}
 81016be:	bf00      	nop
 81016c0:	e7fe      	b.n	81016c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 81016c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81016c4:	2b00      	cmp	r3, #0
 81016c6:	d10a      	bne.n	81016de <xTaskCreateStatic+0x46>
	__asm volatile
 81016c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81016cc:	f383 8811 	msr	BASEPRI, r3
 81016d0:	f3bf 8f6f 	isb	sy
 81016d4:	f3bf 8f4f 	dsb	sy
 81016d8:	61fb      	str	r3, [r7, #28]
}
 81016da:	bf00      	nop
 81016dc:	e7fe      	b.n	81016dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 81016de:	2354      	movs	r3, #84	; 0x54
 81016e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 81016e2:	693b      	ldr	r3, [r7, #16]
 81016e4:	2b54      	cmp	r3, #84	; 0x54
 81016e6:	d00a      	beq.n	81016fe <xTaskCreateStatic+0x66>
	__asm volatile
 81016e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81016ec:	f383 8811 	msr	BASEPRI, r3
 81016f0:	f3bf 8f6f 	isb	sy
 81016f4:	f3bf 8f4f 	dsb	sy
 81016f8:	61bb      	str	r3, [r7, #24]
}
 81016fa:	bf00      	nop
 81016fc:	e7fe      	b.n	81016fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 81016fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8101700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101702:	2b00      	cmp	r3, #0
 8101704:	d01e      	beq.n	8101744 <xTaskCreateStatic+0xac>
 8101706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101708:	2b00      	cmp	r3, #0
 810170a:	d01b      	beq.n	8101744 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810170c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810170e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8101710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8101714:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8101716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101718:	2202      	movs	r2, #2
 810171a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810171e:	2300      	movs	r3, #0
 8101720:	9303      	str	r3, [sp, #12]
 8101722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101724:	9302      	str	r3, [sp, #8]
 8101726:	f107 0314 	add.w	r3, r7, #20
 810172a:	9301      	str	r3, [sp, #4]
 810172c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810172e:	9300      	str	r3, [sp, #0]
 8101730:	683b      	ldr	r3, [r7, #0]
 8101732:	687a      	ldr	r2, [r7, #4]
 8101734:	68b9      	ldr	r1, [r7, #8]
 8101736:	68f8      	ldr	r0, [r7, #12]
 8101738:	f000 f850 	bl	81017dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810173c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810173e:	f000 f8d5 	bl	81018ec <prvAddNewTaskToReadyList>
 8101742:	e001      	b.n	8101748 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8101744:	2300      	movs	r3, #0
 8101746:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8101748:	697b      	ldr	r3, [r7, #20]
	}
 810174a:	4618      	mov	r0, r3
 810174c:	3728      	adds	r7, #40	; 0x28
 810174e:	46bd      	mov	sp, r7
 8101750:	bd80      	pop	{r7, pc}

08101752 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8101752:	b580      	push	{r7, lr}
 8101754:	b08c      	sub	sp, #48	; 0x30
 8101756:	af04      	add	r7, sp, #16
 8101758:	60f8      	str	r0, [r7, #12]
 810175a:	60b9      	str	r1, [r7, #8]
 810175c:	603b      	str	r3, [r7, #0]
 810175e:	4613      	mov	r3, r2
 8101760:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8101762:	88fb      	ldrh	r3, [r7, #6]
 8101764:	009b      	lsls	r3, r3, #2
 8101766:	4618      	mov	r0, r3
 8101768:	f7ff fae8 	bl	8100d3c <pvPortMalloc>
 810176c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810176e:	697b      	ldr	r3, [r7, #20]
 8101770:	2b00      	cmp	r3, #0
 8101772:	d00e      	beq.n	8101792 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8101774:	2054      	movs	r0, #84	; 0x54
 8101776:	f7ff fae1 	bl	8100d3c <pvPortMalloc>
 810177a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810177c:	69fb      	ldr	r3, [r7, #28]
 810177e:	2b00      	cmp	r3, #0
 8101780:	d003      	beq.n	810178a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8101782:	69fb      	ldr	r3, [r7, #28]
 8101784:	697a      	ldr	r2, [r7, #20]
 8101786:	631a      	str	r2, [r3, #48]	; 0x30
 8101788:	e005      	b.n	8101796 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810178a:	6978      	ldr	r0, [r7, #20]
 810178c:	f7ff fba2 	bl	8100ed4 <vPortFree>
 8101790:	e001      	b.n	8101796 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8101792:	2300      	movs	r3, #0
 8101794:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8101796:	69fb      	ldr	r3, [r7, #28]
 8101798:	2b00      	cmp	r3, #0
 810179a:	d017      	beq.n	81017cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810179c:	69fb      	ldr	r3, [r7, #28]
 810179e:	2200      	movs	r2, #0
 81017a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 81017a4:	88fa      	ldrh	r2, [r7, #6]
 81017a6:	2300      	movs	r3, #0
 81017a8:	9303      	str	r3, [sp, #12]
 81017aa:	69fb      	ldr	r3, [r7, #28]
 81017ac:	9302      	str	r3, [sp, #8]
 81017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81017b0:	9301      	str	r3, [sp, #4]
 81017b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81017b4:	9300      	str	r3, [sp, #0]
 81017b6:	683b      	ldr	r3, [r7, #0]
 81017b8:	68b9      	ldr	r1, [r7, #8]
 81017ba:	68f8      	ldr	r0, [r7, #12]
 81017bc:	f000 f80e 	bl	81017dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81017c0:	69f8      	ldr	r0, [r7, #28]
 81017c2:	f000 f893 	bl	81018ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 81017c6:	2301      	movs	r3, #1
 81017c8:	61bb      	str	r3, [r7, #24]
 81017ca:	e002      	b.n	81017d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 81017cc:	f04f 33ff 	mov.w	r3, #4294967295
 81017d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 81017d2:	69bb      	ldr	r3, [r7, #24]
	}
 81017d4:	4618      	mov	r0, r3
 81017d6:	3720      	adds	r7, #32
 81017d8:	46bd      	mov	sp, r7
 81017da:	bd80      	pop	{r7, pc}

081017dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 81017dc:	b580      	push	{r7, lr}
 81017de:	b088      	sub	sp, #32
 81017e0:	af00      	add	r7, sp, #0
 81017e2:	60f8      	str	r0, [r7, #12]
 81017e4:	60b9      	str	r1, [r7, #8]
 81017e6:	607a      	str	r2, [r7, #4]
 81017e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 81017ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81017ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81017ee:	687b      	ldr	r3, [r7, #4]
 81017f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 81017f4:	3b01      	subs	r3, #1
 81017f6:	009b      	lsls	r3, r3, #2
 81017f8:	4413      	add	r3, r2
 81017fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 81017fc:	69bb      	ldr	r3, [r7, #24]
 81017fe:	f023 0307 	bic.w	r3, r3, #7
 8101802:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8101804:	69bb      	ldr	r3, [r7, #24]
 8101806:	f003 0307 	and.w	r3, r3, #7
 810180a:	2b00      	cmp	r3, #0
 810180c:	d00a      	beq.n	8101824 <prvInitialiseNewTask+0x48>
	__asm volatile
 810180e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101812:	f383 8811 	msr	BASEPRI, r3
 8101816:	f3bf 8f6f 	isb	sy
 810181a:	f3bf 8f4f 	dsb	sy
 810181e:	617b      	str	r3, [r7, #20]
}
 8101820:	bf00      	nop
 8101822:	e7fe      	b.n	8101822 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8101824:	68bb      	ldr	r3, [r7, #8]
 8101826:	2b00      	cmp	r3, #0
 8101828:	d01f      	beq.n	810186a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810182a:	2300      	movs	r3, #0
 810182c:	61fb      	str	r3, [r7, #28]
 810182e:	e012      	b.n	8101856 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8101830:	68ba      	ldr	r2, [r7, #8]
 8101832:	69fb      	ldr	r3, [r7, #28]
 8101834:	4413      	add	r3, r2
 8101836:	7819      	ldrb	r1, [r3, #0]
 8101838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810183a:	69fb      	ldr	r3, [r7, #28]
 810183c:	4413      	add	r3, r2
 810183e:	3334      	adds	r3, #52	; 0x34
 8101840:	460a      	mov	r2, r1
 8101842:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8101844:	68ba      	ldr	r2, [r7, #8]
 8101846:	69fb      	ldr	r3, [r7, #28]
 8101848:	4413      	add	r3, r2
 810184a:	781b      	ldrb	r3, [r3, #0]
 810184c:	2b00      	cmp	r3, #0
 810184e:	d006      	beq.n	810185e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8101850:	69fb      	ldr	r3, [r7, #28]
 8101852:	3301      	adds	r3, #1
 8101854:	61fb      	str	r3, [r7, #28]
 8101856:	69fb      	ldr	r3, [r7, #28]
 8101858:	2b0f      	cmp	r3, #15
 810185a:	d9e9      	bls.n	8101830 <prvInitialiseNewTask+0x54>
 810185c:	e000      	b.n	8101860 <prvInitialiseNewTask+0x84>
			{
				break;
 810185e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8101860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101862:	2200      	movs	r2, #0
 8101864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8101868:	e003      	b.n	8101872 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810186a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810186c:	2200      	movs	r2, #0
 810186e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8101872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101874:	2b06      	cmp	r3, #6
 8101876:	d901      	bls.n	810187c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8101878:	2306      	movs	r3, #6
 810187a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810187c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810187e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8101880:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8101882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8101886:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8101888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810188a:	2200      	movs	r2, #0
 810188c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101890:	3304      	adds	r3, #4
 8101892:	4618      	mov	r0, r3
 8101894:	f7ff fc5c 	bl	8101150 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8101898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810189a:	3318      	adds	r3, #24
 810189c:	4618      	mov	r0, r3
 810189e:	f7ff fc57 	bl	8101150 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 81018a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81018a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81018a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81018a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81018aa:	f1c3 0207 	rsb	r2, r3, #7
 81018ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81018b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 81018b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81018b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81018b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 81018b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81018ba:	2200      	movs	r2, #0
 81018bc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81018be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81018c0:	2200      	movs	r2, #0
 81018c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 81018c6:	683a      	ldr	r2, [r7, #0]
 81018c8:	68f9      	ldr	r1, [r7, #12]
 81018ca:	69b8      	ldr	r0, [r7, #24]
 81018cc:	f7ff fcd4 	bl	8101278 <pxPortInitialiseStack>
 81018d0:	4602      	mov	r2, r0
 81018d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81018d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 81018d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81018d8:	2b00      	cmp	r3, #0
 81018da:	d002      	beq.n	81018e2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81018dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81018de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81018e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81018e2:	bf00      	nop
 81018e4:	3720      	adds	r7, #32
 81018e6:	46bd      	mov	sp, r7
 81018e8:	bd80      	pop	{r7, pc}
	...

081018ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 81018ec:	b580      	push	{r7, lr}
 81018ee:	b082      	sub	sp, #8
 81018f0:	af00      	add	r7, sp, #0
 81018f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 81018f4:	f7ff fdee 	bl	81014d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 81018f8:	4b2a      	ldr	r3, [pc, #168]	; (81019a4 <prvAddNewTaskToReadyList+0xb8>)
 81018fa:	681b      	ldr	r3, [r3, #0]
 81018fc:	3301      	adds	r3, #1
 81018fe:	4a29      	ldr	r2, [pc, #164]	; (81019a4 <prvAddNewTaskToReadyList+0xb8>)
 8101900:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8101902:	4b29      	ldr	r3, [pc, #164]	; (81019a8 <prvAddNewTaskToReadyList+0xbc>)
 8101904:	681b      	ldr	r3, [r3, #0]
 8101906:	2b00      	cmp	r3, #0
 8101908:	d109      	bne.n	810191e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810190a:	4a27      	ldr	r2, [pc, #156]	; (81019a8 <prvAddNewTaskToReadyList+0xbc>)
 810190c:	687b      	ldr	r3, [r7, #4]
 810190e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8101910:	4b24      	ldr	r3, [pc, #144]	; (81019a4 <prvAddNewTaskToReadyList+0xb8>)
 8101912:	681b      	ldr	r3, [r3, #0]
 8101914:	2b01      	cmp	r3, #1
 8101916:	d110      	bne.n	810193a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8101918:	f000 fabc 	bl	8101e94 <prvInitialiseTaskLists>
 810191c:	e00d      	b.n	810193a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810191e:	4b23      	ldr	r3, [pc, #140]	; (81019ac <prvAddNewTaskToReadyList+0xc0>)
 8101920:	681b      	ldr	r3, [r3, #0]
 8101922:	2b00      	cmp	r3, #0
 8101924:	d109      	bne.n	810193a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8101926:	4b20      	ldr	r3, [pc, #128]	; (81019a8 <prvAddNewTaskToReadyList+0xbc>)
 8101928:	681b      	ldr	r3, [r3, #0]
 810192a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810192c:	687b      	ldr	r3, [r7, #4]
 810192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101930:	429a      	cmp	r2, r3
 8101932:	d802      	bhi.n	810193a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8101934:	4a1c      	ldr	r2, [pc, #112]	; (81019a8 <prvAddNewTaskToReadyList+0xbc>)
 8101936:	687b      	ldr	r3, [r7, #4]
 8101938:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810193a:	4b1d      	ldr	r3, [pc, #116]	; (81019b0 <prvAddNewTaskToReadyList+0xc4>)
 810193c:	681b      	ldr	r3, [r3, #0]
 810193e:	3301      	adds	r3, #1
 8101940:	4a1b      	ldr	r2, [pc, #108]	; (81019b0 <prvAddNewTaskToReadyList+0xc4>)
 8101942:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8101944:	687b      	ldr	r3, [r7, #4]
 8101946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101948:	2201      	movs	r2, #1
 810194a:	409a      	lsls	r2, r3
 810194c:	4b19      	ldr	r3, [pc, #100]	; (81019b4 <prvAddNewTaskToReadyList+0xc8>)
 810194e:	681b      	ldr	r3, [r3, #0]
 8101950:	4313      	orrs	r3, r2
 8101952:	4a18      	ldr	r2, [pc, #96]	; (81019b4 <prvAddNewTaskToReadyList+0xc8>)
 8101954:	6013      	str	r3, [r2, #0]
 8101956:	687b      	ldr	r3, [r7, #4]
 8101958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810195a:	4613      	mov	r3, r2
 810195c:	009b      	lsls	r3, r3, #2
 810195e:	4413      	add	r3, r2
 8101960:	009b      	lsls	r3, r3, #2
 8101962:	4a15      	ldr	r2, [pc, #84]	; (81019b8 <prvAddNewTaskToReadyList+0xcc>)
 8101964:	441a      	add	r2, r3
 8101966:	687b      	ldr	r3, [r7, #4]
 8101968:	3304      	adds	r3, #4
 810196a:	4619      	mov	r1, r3
 810196c:	4610      	mov	r0, r2
 810196e:	f7ff fbfc 	bl	810116a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8101972:	f7ff fddf 	bl	8101534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8101976:	4b0d      	ldr	r3, [pc, #52]	; (81019ac <prvAddNewTaskToReadyList+0xc0>)
 8101978:	681b      	ldr	r3, [r3, #0]
 810197a:	2b00      	cmp	r3, #0
 810197c:	d00e      	beq.n	810199c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810197e:	4b0a      	ldr	r3, [pc, #40]	; (81019a8 <prvAddNewTaskToReadyList+0xbc>)
 8101980:	681b      	ldr	r3, [r3, #0]
 8101982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8101984:	687b      	ldr	r3, [r7, #4]
 8101986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101988:	429a      	cmp	r2, r3
 810198a:	d207      	bcs.n	810199c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810198c:	4b0b      	ldr	r3, [pc, #44]	; (81019bc <prvAddNewTaskToReadyList+0xd0>)
 810198e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101992:	601a      	str	r2, [r3, #0]
 8101994:	f3bf 8f4f 	dsb	sy
 8101998:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810199c:	bf00      	nop
 810199e:	3708      	adds	r7, #8
 81019a0:	46bd      	mov	sp, r7
 81019a2:	bd80      	pop	{r7, pc}
 81019a4:	10003fb4 	.word	0x10003fb4
 81019a8:	10003eb4 	.word	0x10003eb4
 81019ac:	10003fc0 	.word	0x10003fc0
 81019b0:	10003fd0 	.word	0x10003fd0
 81019b4:	10003fbc 	.word	0x10003fbc
 81019b8:	10003eb8 	.word	0x10003eb8
 81019bc:	e000ed04 	.word	0xe000ed04

081019c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 81019c0:	b580      	push	{r7, lr}
 81019c2:	b084      	sub	sp, #16
 81019c4:	af00      	add	r7, sp, #0
 81019c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 81019c8:	2300      	movs	r3, #0
 81019ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 81019cc:	687b      	ldr	r3, [r7, #4]
 81019ce:	2b00      	cmp	r3, #0
 81019d0:	d017      	beq.n	8101a02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 81019d2:	4b13      	ldr	r3, [pc, #76]	; (8101a20 <vTaskDelay+0x60>)
 81019d4:	681b      	ldr	r3, [r3, #0]
 81019d6:	2b00      	cmp	r3, #0
 81019d8:	d00a      	beq.n	81019f0 <vTaskDelay+0x30>
	__asm volatile
 81019da:	f04f 0350 	mov.w	r3, #80	; 0x50
 81019de:	f383 8811 	msr	BASEPRI, r3
 81019e2:	f3bf 8f6f 	isb	sy
 81019e6:	f3bf 8f4f 	dsb	sy
 81019ea:	60bb      	str	r3, [r7, #8]
}
 81019ec:	bf00      	nop
 81019ee:	e7fe      	b.n	81019ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 81019f0:	f000 f87a 	bl	8101ae8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 81019f4:	2100      	movs	r1, #0
 81019f6:	6878      	ldr	r0, [r7, #4]
 81019f8:	f000 fb28 	bl	810204c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 81019fc:	f000 f882 	bl	8101b04 <xTaskResumeAll>
 8101a00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8101a02:	68fb      	ldr	r3, [r7, #12]
 8101a04:	2b00      	cmp	r3, #0
 8101a06:	d107      	bne.n	8101a18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8101a08:	4b06      	ldr	r3, [pc, #24]	; (8101a24 <vTaskDelay+0x64>)
 8101a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101a0e:	601a      	str	r2, [r3, #0]
 8101a10:	f3bf 8f4f 	dsb	sy
 8101a14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8101a18:	bf00      	nop
 8101a1a:	3710      	adds	r7, #16
 8101a1c:	46bd      	mov	sp, r7
 8101a1e:	bd80      	pop	{r7, pc}
 8101a20:	10003fdc 	.word	0x10003fdc
 8101a24:	e000ed04 	.word	0xe000ed04

08101a28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8101a28:	b580      	push	{r7, lr}
 8101a2a:	b08a      	sub	sp, #40	; 0x28
 8101a2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8101a2e:	2300      	movs	r3, #0
 8101a30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8101a32:	2300      	movs	r3, #0
 8101a34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8101a36:	463a      	mov	r2, r7
 8101a38:	1d39      	adds	r1, r7, #4
 8101a3a:	f107 0308 	add.w	r3, r7, #8
 8101a3e:	4618      	mov	r0, r3
 8101a40:	f7fe fc66 	bl	8100310 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8101a44:	6839      	ldr	r1, [r7, #0]
 8101a46:	687b      	ldr	r3, [r7, #4]
 8101a48:	68ba      	ldr	r2, [r7, #8]
 8101a4a:	9202      	str	r2, [sp, #8]
 8101a4c:	9301      	str	r3, [sp, #4]
 8101a4e:	2300      	movs	r3, #0
 8101a50:	9300      	str	r3, [sp, #0]
 8101a52:	2300      	movs	r3, #0
 8101a54:	460a      	mov	r2, r1
 8101a56:	491e      	ldr	r1, [pc, #120]	; (8101ad0 <vTaskStartScheduler+0xa8>)
 8101a58:	481e      	ldr	r0, [pc, #120]	; (8101ad4 <vTaskStartScheduler+0xac>)
 8101a5a:	f7ff fe1d 	bl	8101698 <xTaskCreateStatic>
 8101a5e:	4603      	mov	r3, r0
 8101a60:	4a1d      	ldr	r2, [pc, #116]	; (8101ad8 <vTaskStartScheduler+0xb0>)
 8101a62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8101a64:	4b1c      	ldr	r3, [pc, #112]	; (8101ad8 <vTaskStartScheduler+0xb0>)
 8101a66:	681b      	ldr	r3, [r3, #0]
 8101a68:	2b00      	cmp	r3, #0
 8101a6a:	d002      	beq.n	8101a72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8101a6c:	2301      	movs	r3, #1
 8101a6e:	617b      	str	r3, [r7, #20]
 8101a70:	e001      	b.n	8101a76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8101a72:	2300      	movs	r3, #0
 8101a74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8101a76:	697b      	ldr	r3, [r7, #20]
 8101a78:	2b01      	cmp	r3, #1
 8101a7a:	d116      	bne.n	8101aaa <vTaskStartScheduler+0x82>
	__asm volatile
 8101a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101a80:	f383 8811 	msr	BASEPRI, r3
 8101a84:	f3bf 8f6f 	isb	sy
 8101a88:	f3bf 8f4f 	dsb	sy
 8101a8c:	613b      	str	r3, [r7, #16]
}
 8101a8e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8101a90:	4b12      	ldr	r3, [pc, #72]	; (8101adc <vTaskStartScheduler+0xb4>)
 8101a92:	f04f 32ff 	mov.w	r2, #4294967295
 8101a96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8101a98:	4b11      	ldr	r3, [pc, #68]	; (8101ae0 <vTaskStartScheduler+0xb8>)
 8101a9a:	2201      	movs	r2, #1
 8101a9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8101a9e:	4b11      	ldr	r3, [pc, #68]	; (8101ae4 <vTaskStartScheduler+0xbc>)
 8101aa0:	2200      	movs	r2, #0
 8101aa2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8101aa4:	f7ff fc74 	bl	8101390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8101aa8:	e00e      	b.n	8101ac8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8101aaa:	697b      	ldr	r3, [r7, #20]
 8101aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101ab0:	d10a      	bne.n	8101ac8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8101ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101ab6:	f383 8811 	msr	BASEPRI, r3
 8101aba:	f3bf 8f6f 	isb	sy
 8101abe:	f3bf 8f4f 	dsb	sy
 8101ac2:	60fb      	str	r3, [r7, #12]
}
 8101ac4:	bf00      	nop
 8101ac6:	e7fe      	b.n	8101ac6 <vTaskStartScheduler+0x9e>
}
 8101ac8:	bf00      	nop
 8101aca:	3718      	adds	r7, #24
 8101acc:	46bd      	mov	sp, r7
 8101ace:	bd80      	pop	{r7, pc}
 8101ad0:	081021a0 	.word	0x081021a0
 8101ad4:	08101e65 	.word	0x08101e65
 8101ad8:	10003fd8 	.word	0x10003fd8
 8101adc:	10003fd4 	.word	0x10003fd4
 8101ae0:	10003fc0 	.word	0x10003fc0
 8101ae4:	10003fb8 	.word	0x10003fb8

08101ae8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8101ae8:	b480      	push	{r7}
 8101aea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8101aec:	4b04      	ldr	r3, [pc, #16]	; (8101b00 <vTaskSuspendAll+0x18>)
 8101aee:	681b      	ldr	r3, [r3, #0]
 8101af0:	3301      	adds	r3, #1
 8101af2:	4a03      	ldr	r2, [pc, #12]	; (8101b00 <vTaskSuspendAll+0x18>)
 8101af4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8101af6:	bf00      	nop
 8101af8:	46bd      	mov	sp, r7
 8101afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101afe:	4770      	bx	lr
 8101b00:	10003fdc 	.word	0x10003fdc

08101b04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8101b04:	b580      	push	{r7, lr}
 8101b06:	b084      	sub	sp, #16
 8101b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8101b0a:	2300      	movs	r3, #0
 8101b0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8101b0e:	2300      	movs	r3, #0
 8101b10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8101b12:	4b41      	ldr	r3, [pc, #260]	; (8101c18 <xTaskResumeAll+0x114>)
 8101b14:	681b      	ldr	r3, [r3, #0]
 8101b16:	2b00      	cmp	r3, #0
 8101b18:	d10a      	bne.n	8101b30 <xTaskResumeAll+0x2c>
	__asm volatile
 8101b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101b1e:	f383 8811 	msr	BASEPRI, r3
 8101b22:	f3bf 8f6f 	isb	sy
 8101b26:	f3bf 8f4f 	dsb	sy
 8101b2a:	603b      	str	r3, [r7, #0]
}
 8101b2c:	bf00      	nop
 8101b2e:	e7fe      	b.n	8101b2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8101b30:	f7ff fcd0 	bl	81014d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8101b34:	4b38      	ldr	r3, [pc, #224]	; (8101c18 <xTaskResumeAll+0x114>)
 8101b36:	681b      	ldr	r3, [r3, #0]
 8101b38:	3b01      	subs	r3, #1
 8101b3a:	4a37      	ldr	r2, [pc, #220]	; (8101c18 <xTaskResumeAll+0x114>)
 8101b3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8101b3e:	4b36      	ldr	r3, [pc, #216]	; (8101c18 <xTaskResumeAll+0x114>)
 8101b40:	681b      	ldr	r3, [r3, #0]
 8101b42:	2b00      	cmp	r3, #0
 8101b44:	d161      	bne.n	8101c0a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8101b46:	4b35      	ldr	r3, [pc, #212]	; (8101c1c <xTaskResumeAll+0x118>)
 8101b48:	681b      	ldr	r3, [r3, #0]
 8101b4a:	2b00      	cmp	r3, #0
 8101b4c:	d05d      	beq.n	8101c0a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8101b4e:	e02e      	b.n	8101bae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8101b50:	4b33      	ldr	r3, [pc, #204]	; (8101c20 <xTaskResumeAll+0x11c>)
 8101b52:	68db      	ldr	r3, [r3, #12]
 8101b54:	68db      	ldr	r3, [r3, #12]
 8101b56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8101b58:	68fb      	ldr	r3, [r7, #12]
 8101b5a:	3318      	adds	r3, #24
 8101b5c:	4618      	mov	r0, r3
 8101b5e:	f7ff fb61 	bl	8101224 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8101b62:	68fb      	ldr	r3, [r7, #12]
 8101b64:	3304      	adds	r3, #4
 8101b66:	4618      	mov	r0, r3
 8101b68:	f7ff fb5c 	bl	8101224 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8101b6c:	68fb      	ldr	r3, [r7, #12]
 8101b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101b70:	2201      	movs	r2, #1
 8101b72:	409a      	lsls	r2, r3
 8101b74:	4b2b      	ldr	r3, [pc, #172]	; (8101c24 <xTaskResumeAll+0x120>)
 8101b76:	681b      	ldr	r3, [r3, #0]
 8101b78:	4313      	orrs	r3, r2
 8101b7a:	4a2a      	ldr	r2, [pc, #168]	; (8101c24 <xTaskResumeAll+0x120>)
 8101b7c:	6013      	str	r3, [r2, #0]
 8101b7e:	68fb      	ldr	r3, [r7, #12]
 8101b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8101b82:	4613      	mov	r3, r2
 8101b84:	009b      	lsls	r3, r3, #2
 8101b86:	4413      	add	r3, r2
 8101b88:	009b      	lsls	r3, r3, #2
 8101b8a:	4a27      	ldr	r2, [pc, #156]	; (8101c28 <xTaskResumeAll+0x124>)
 8101b8c:	441a      	add	r2, r3
 8101b8e:	68fb      	ldr	r3, [r7, #12]
 8101b90:	3304      	adds	r3, #4
 8101b92:	4619      	mov	r1, r3
 8101b94:	4610      	mov	r0, r2
 8101b96:	f7ff fae8 	bl	810116a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8101b9a:	68fb      	ldr	r3, [r7, #12]
 8101b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8101b9e:	4b23      	ldr	r3, [pc, #140]	; (8101c2c <xTaskResumeAll+0x128>)
 8101ba0:	681b      	ldr	r3, [r3, #0]
 8101ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101ba4:	429a      	cmp	r2, r3
 8101ba6:	d302      	bcc.n	8101bae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8101ba8:	4b21      	ldr	r3, [pc, #132]	; (8101c30 <xTaskResumeAll+0x12c>)
 8101baa:	2201      	movs	r2, #1
 8101bac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8101bae:	4b1c      	ldr	r3, [pc, #112]	; (8101c20 <xTaskResumeAll+0x11c>)
 8101bb0:	681b      	ldr	r3, [r3, #0]
 8101bb2:	2b00      	cmp	r3, #0
 8101bb4:	d1cc      	bne.n	8101b50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8101bb6:	68fb      	ldr	r3, [r7, #12]
 8101bb8:	2b00      	cmp	r3, #0
 8101bba:	d001      	beq.n	8101bc0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8101bbc:	f000 fa08 	bl	8101fd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8101bc0:	4b1c      	ldr	r3, [pc, #112]	; (8101c34 <xTaskResumeAll+0x130>)
 8101bc2:	681b      	ldr	r3, [r3, #0]
 8101bc4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8101bc6:	687b      	ldr	r3, [r7, #4]
 8101bc8:	2b00      	cmp	r3, #0
 8101bca:	d010      	beq.n	8101bee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8101bcc:	f000 f836 	bl	8101c3c <xTaskIncrementTick>
 8101bd0:	4603      	mov	r3, r0
 8101bd2:	2b00      	cmp	r3, #0
 8101bd4:	d002      	beq.n	8101bdc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8101bd6:	4b16      	ldr	r3, [pc, #88]	; (8101c30 <xTaskResumeAll+0x12c>)
 8101bd8:	2201      	movs	r2, #1
 8101bda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8101bdc:	687b      	ldr	r3, [r7, #4]
 8101bde:	3b01      	subs	r3, #1
 8101be0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8101be2:	687b      	ldr	r3, [r7, #4]
 8101be4:	2b00      	cmp	r3, #0
 8101be6:	d1f1      	bne.n	8101bcc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8101be8:	4b12      	ldr	r3, [pc, #72]	; (8101c34 <xTaskResumeAll+0x130>)
 8101bea:	2200      	movs	r2, #0
 8101bec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8101bee:	4b10      	ldr	r3, [pc, #64]	; (8101c30 <xTaskResumeAll+0x12c>)
 8101bf0:	681b      	ldr	r3, [r3, #0]
 8101bf2:	2b00      	cmp	r3, #0
 8101bf4:	d009      	beq.n	8101c0a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8101bf6:	2301      	movs	r3, #1
 8101bf8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8101bfa:	4b0f      	ldr	r3, [pc, #60]	; (8101c38 <xTaskResumeAll+0x134>)
 8101bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101c00:	601a      	str	r2, [r3, #0]
 8101c02:	f3bf 8f4f 	dsb	sy
 8101c06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8101c0a:	f7ff fc93 	bl	8101534 <vPortExitCritical>

	return xAlreadyYielded;
 8101c0e:	68bb      	ldr	r3, [r7, #8]
}
 8101c10:	4618      	mov	r0, r3
 8101c12:	3710      	adds	r7, #16
 8101c14:	46bd      	mov	sp, r7
 8101c16:	bd80      	pop	{r7, pc}
 8101c18:	10003fdc 	.word	0x10003fdc
 8101c1c:	10003fb4 	.word	0x10003fb4
 8101c20:	10003f74 	.word	0x10003f74
 8101c24:	10003fbc 	.word	0x10003fbc
 8101c28:	10003eb8 	.word	0x10003eb8
 8101c2c:	10003eb4 	.word	0x10003eb4
 8101c30:	10003fc8 	.word	0x10003fc8
 8101c34:	10003fc4 	.word	0x10003fc4
 8101c38:	e000ed04 	.word	0xe000ed04

08101c3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8101c3c:	b580      	push	{r7, lr}
 8101c3e:	b086      	sub	sp, #24
 8101c40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8101c42:	2300      	movs	r3, #0
 8101c44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8101c46:	4b4e      	ldr	r3, [pc, #312]	; (8101d80 <xTaskIncrementTick+0x144>)
 8101c48:	681b      	ldr	r3, [r3, #0]
 8101c4a:	2b00      	cmp	r3, #0
 8101c4c:	f040 808e 	bne.w	8101d6c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8101c50:	4b4c      	ldr	r3, [pc, #304]	; (8101d84 <xTaskIncrementTick+0x148>)
 8101c52:	681b      	ldr	r3, [r3, #0]
 8101c54:	3301      	adds	r3, #1
 8101c56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8101c58:	4a4a      	ldr	r2, [pc, #296]	; (8101d84 <xTaskIncrementTick+0x148>)
 8101c5a:	693b      	ldr	r3, [r7, #16]
 8101c5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8101c5e:	693b      	ldr	r3, [r7, #16]
 8101c60:	2b00      	cmp	r3, #0
 8101c62:	d120      	bne.n	8101ca6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8101c64:	4b48      	ldr	r3, [pc, #288]	; (8101d88 <xTaskIncrementTick+0x14c>)
 8101c66:	681b      	ldr	r3, [r3, #0]
 8101c68:	681b      	ldr	r3, [r3, #0]
 8101c6a:	2b00      	cmp	r3, #0
 8101c6c:	d00a      	beq.n	8101c84 <xTaskIncrementTick+0x48>
	__asm volatile
 8101c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101c72:	f383 8811 	msr	BASEPRI, r3
 8101c76:	f3bf 8f6f 	isb	sy
 8101c7a:	f3bf 8f4f 	dsb	sy
 8101c7e:	603b      	str	r3, [r7, #0]
}
 8101c80:	bf00      	nop
 8101c82:	e7fe      	b.n	8101c82 <xTaskIncrementTick+0x46>
 8101c84:	4b40      	ldr	r3, [pc, #256]	; (8101d88 <xTaskIncrementTick+0x14c>)
 8101c86:	681b      	ldr	r3, [r3, #0]
 8101c88:	60fb      	str	r3, [r7, #12]
 8101c8a:	4b40      	ldr	r3, [pc, #256]	; (8101d8c <xTaskIncrementTick+0x150>)
 8101c8c:	681b      	ldr	r3, [r3, #0]
 8101c8e:	4a3e      	ldr	r2, [pc, #248]	; (8101d88 <xTaskIncrementTick+0x14c>)
 8101c90:	6013      	str	r3, [r2, #0]
 8101c92:	4a3e      	ldr	r2, [pc, #248]	; (8101d8c <xTaskIncrementTick+0x150>)
 8101c94:	68fb      	ldr	r3, [r7, #12]
 8101c96:	6013      	str	r3, [r2, #0]
 8101c98:	4b3d      	ldr	r3, [pc, #244]	; (8101d90 <xTaskIncrementTick+0x154>)
 8101c9a:	681b      	ldr	r3, [r3, #0]
 8101c9c:	3301      	adds	r3, #1
 8101c9e:	4a3c      	ldr	r2, [pc, #240]	; (8101d90 <xTaskIncrementTick+0x154>)
 8101ca0:	6013      	str	r3, [r2, #0]
 8101ca2:	f000 f995 	bl	8101fd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8101ca6:	4b3b      	ldr	r3, [pc, #236]	; (8101d94 <xTaskIncrementTick+0x158>)
 8101ca8:	681b      	ldr	r3, [r3, #0]
 8101caa:	693a      	ldr	r2, [r7, #16]
 8101cac:	429a      	cmp	r2, r3
 8101cae:	d348      	bcc.n	8101d42 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8101cb0:	4b35      	ldr	r3, [pc, #212]	; (8101d88 <xTaskIncrementTick+0x14c>)
 8101cb2:	681b      	ldr	r3, [r3, #0]
 8101cb4:	681b      	ldr	r3, [r3, #0]
 8101cb6:	2b00      	cmp	r3, #0
 8101cb8:	d104      	bne.n	8101cc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8101cba:	4b36      	ldr	r3, [pc, #216]	; (8101d94 <xTaskIncrementTick+0x158>)
 8101cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8101cc0:	601a      	str	r2, [r3, #0]
					break;
 8101cc2:	e03e      	b.n	8101d42 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8101cc4:	4b30      	ldr	r3, [pc, #192]	; (8101d88 <xTaskIncrementTick+0x14c>)
 8101cc6:	681b      	ldr	r3, [r3, #0]
 8101cc8:	68db      	ldr	r3, [r3, #12]
 8101cca:	68db      	ldr	r3, [r3, #12]
 8101ccc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8101cce:	68bb      	ldr	r3, [r7, #8]
 8101cd0:	685b      	ldr	r3, [r3, #4]
 8101cd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8101cd4:	693a      	ldr	r2, [r7, #16]
 8101cd6:	687b      	ldr	r3, [r7, #4]
 8101cd8:	429a      	cmp	r2, r3
 8101cda:	d203      	bcs.n	8101ce4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8101cdc:	4a2d      	ldr	r2, [pc, #180]	; (8101d94 <xTaskIncrementTick+0x158>)
 8101cde:	687b      	ldr	r3, [r7, #4]
 8101ce0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8101ce2:	e02e      	b.n	8101d42 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8101ce4:	68bb      	ldr	r3, [r7, #8]
 8101ce6:	3304      	adds	r3, #4
 8101ce8:	4618      	mov	r0, r3
 8101cea:	f7ff fa9b 	bl	8101224 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8101cee:	68bb      	ldr	r3, [r7, #8]
 8101cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101cf2:	2b00      	cmp	r3, #0
 8101cf4:	d004      	beq.n	8101d00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8101cf6:	68bb      	ldr	r3, [r7, #8]
 8101cf8:	3318      	adds	r3, #24
 8101cfa:	4618      	mov	r0, r3
 8101cfc:	f7ff fa92 	bl	8101224 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8101d00:	68bb      	ldr	r3, [r7, #8]
 8101d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101d04:	2201      	movs	r2, #1
 8101d06:	409a      	lsls	r2, r3
 8101d08:	4b23      	ldr	r3, [pc, #140]	; (8101d98 <xTaskIncrementTick+0x15c>)
 8101d0a:	681b      	ldr	r3, [r3, #0]
 8101d0c:	4313      	orrs	r3, r2
 8101d0e:	4a22      	ldr	r2, [pc, #136]	; (8101d98 <xTaskIncrementTick+0x15c>)
 8101d10:	6013      	str	r3, [r2, #0]
 8101d12:	68bb      	ldr	r3, [r7, #8]
 8101d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8101d16:	4613      	mov	r3, r2
 8101d18:	009b      	lsls	r3, r3, #2
 8101d1a:	4413      	add	r3, r2
 8101d1c:	009b      	lsls	r3, r3, #2
 8101d1e:	4a1f      	ldr	r2, [pc, #124]	; (8101d9c <xTaskIncrementTick+0x160>)
 8101d20:	441a      	add	r2, r3
 8101d22:	68bb      	ldr	r3, [r7, #8]
 8101d24:	3304      	adds	r3, #4
 8101d26:	4619      	mov	r1, r3
 8101d28:	4610      	mov	r0, r2
 8101d2a:	f7ff fa1e 	bl	810116a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8101d2e:	68bb      	ldr	r3, [r7, #8]
 8101d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8101d32:	4b1b      	ldr	r3, [pc, #108]	; (8101da0 <xTaskIncrementTick+0x164>)
 8101d34:	681b      	ldr	r3, [r3, #0]
 8101d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101d38:	429a      	cmp	r2, r3
 8101d3a:	d3b9      	bcc.n	8101cb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8101d3c:	2301      	movs	r3, #1
 8101d3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8101d40:	e7b6      	b.n	8101cb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8101d42:	4b17      	ldr	r3, [pc, #92]	; (8101da0 <xTaskIncrementTick+0x164>)
 8101d44:	681b      	ldr	r3, [r3, #0]
 8101d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8101d48:	4914      	ldr	r1, [pc, #80]	; (8101d9c <xTaskIncrementTick+0x160>)
 8101d4a:	4613      	mov	r3, r2
 8101d4c:	009b      	lsls	r3, r3, #2
 8101d4e:	4413      	add	r3, r2
 8101d50:	009b      	lsls	r3, r3, #2
 8101d52:	440b      	add	r3, r1
 8101d54:	681b      	ldr	r3, [r3, #0]
 8101d56:	2b01      	cmp	r3, #1
 8101d58:	d901      	bls.n	8101d5e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8101d5a:	2301      	movs	r3, #1
 8101d5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8101d5e:	4b11      	ldr	r3, [pc, #68]	; (8101da4 <xTaskIncrementTick+0x168>)
 8101d60:	681b      	ldr	r3, [r3, #0]
 8101d62:	2b00      	cmp	r3, #0
 8101d64:	d007      	beq.n	8101d76 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8101d66:	2301      	movs	r3, #1
 8101d68:	617b      	str	r3, [r7, #20]
 8101d6a:	e004      	b.n	8101d76 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8101d6c:	4b0e      	ldr	r3, [pc, #56]	; (8101da8 <xTaskIncrementTick+0x16c>)
 8101d6e:	681b      	ldr	r3, [r3, #0]
 8101d70:	3301      	adds	r3, #1
 8101d72:	4a0d      	ldr	r2, [pc, #52]	; (8101da8 <xTaskIncrementTick+0x16c>)
 8101d74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8101d76:	697b      	ldr	r3, [r7, #20]
}
 8101d78:	4618      	mov	r0, r3
 8101d7a:	3718      	adds	r7, #24
 8101d7c:	46bd      	mov	sp, r7
 8101d7e:	bd80      	pop	{r7, pc}
 8101d80:	10003fdc 	.word	0x10003fdc
 8101d84:	10003fb8 	.word	0x10003fb8
 8101d88:	10003f6c 	.word	0x10003f6c
 8101d8c:	10003f70 	.word	0x10003f70
 8101d90:	10003fcc 	.word	0x10003fcc
 8101d94:	10003fd4 	.word	0x10003fd4
 8101d98:	10003fbc 	.word	0x10003fbc
 8101d9c:	10003eb8 	.word	0x10003eb8
 8101da0:	10003eb4 	.word	0x10003eb4
 8101da4:	10003fc8 	.word	0x10003fc8
 8101da8:	10003fc4 	.word	0x10003fc4

08101dac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8101dac:	b480      	push	{r7}
 8101dae:	b087      	sub	sp, #28
 8101db0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8101db2:	4b27      	ldr	r3, [pc, #156]	; (8101e50 <vTaskSwitchContext+0xa4>)
 8101db4:	681b      	ldr	r3, [r3, #0]
 8101db6:	2b00      	cmp	r3, #0
 8101db8:	d003      	beq.n	8101dc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8101dba:	4b26      	ldr	r3, [pc, #152]	; (8101e54 <vTaskSwitchContext+0xa8>)
 8101dbc:	2201      	movs	r2, #1
 8101dbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8101dc0:	e03f      	b.n	8101e42 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8101dc2:	4b24      	ldr	r3, [pc, #144]	; (8101e54 <vTaskSwitchContext+0xa8>)
 8101dc4:	2200      	movs	r2, #0
 8101dc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8101dc8:	4b23      	ldr	r3, [pc, #140]	; (8101e58 <vTaskSwitchContext+0xac>)
 8101dca:	681b      	ldr	r3, [r3, #0]
 8101dcc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8101dce:	68fb      	ldr	r3, [r7, #12]
 8101dd0:	fab3 f383 	clz	r3, r3
 8101dd4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8101dd6:	7afb      	ldrb	r3, [r7, #11]
 8101dd8:	f1c3 031f 	rsb	r3, r3, #31
 8101ddc:	617b      	str	r3, [r7, #20]
 8101dde:	491f      	ldr	r1, [pc, #124]	; (8101e5c <vTaskSwitchContext+0xb0>)
 8101de0:	697a      	ldr	r2, [r7, #20]
 8101de2:	4613      	mov	r3, r2
 8101de4:	009b      	lsls	r3, r3, #2
 8101de6:	4413      	add	r3, r2
 8101de8:	009b      	lsls	r3, r3, #2
 8101dea:	440b      	add	r3, r1
 8101dec:	681b      	ldr	r3, [r3, #0]
 8101dee:	2b00      	cmp	r3, #0
 8101df0:	d10a      	bne.n	8101e08 <vTaskSwitchContext+0x5c>
	__asm volatile
 8101df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101df6:	f383 8811 	msr	BASEPRI, r3
 8101dfa:	f3bf 8f6f 	isb	sy
 8101dfe:	f3bf 8f4f 	dsb	sy
 8101e02:	607b      	str	r3, [r7, #4]
}
 8101e04:	bf00      	nop
 8101e06:	e7fe      	b.n	8101e06 <vTaskSwitchContext+0x5a>
 8101e08:	697a      	ldr	r2, [r7, #20]
 8101e0a:	4613      	mov	r3, r2
 8101e0c:	009b      	lsls	r3, r3, #2
 8101e0e:	4413      	add	r3, r2
 8101e10:	009b      	lsls	r3, r3, #2
 8101e12:	4a12      	ldr	r2, [pc, #72]	; (8101e5c <vTaskSwitchContext+0xb0>)
 8101e14:	4413      	add	r3, r2
 8101e16:	613b      	str	r3, [r7, #16]
 8101e18:	693b      	ldr	r3, [r7, #16]
 8101e1a:	685b      	ldr	r3, [r3, #4]
 8101e1c:	685a      	ldr	r2, [r3, #4]
 8101e1e:	693b      	ldr	r3, [r7, #16]
 8101e20:	605a      	str	r2, [r3, #4]
 8101e22:	693b      	ldr	r3, [r7, #16]
 8101e24:	685a      	ldr	r2, [r3, #4]
 8101e26:	693b      	ldr	r3, [r7, #16]
 8101e28:	3308      	adds	r3, #8
 8101e2a:	429a      	cmp	r2, r3
 8101e2c:	d104      	bne.n	8101e38 <vTaskSwitchContext+0x8c>
 8101e2e:	693b      	ldr	r3, [r7, #16]
 8101e30:	685b      	ldr	r3, [r3, #4]
 8101e32:	685a      	ldr	r2, [r3, #4]
 8101e34:	693b      	ldr	r3, [r7, #16]
 8101e36:	605a      	str	r2, [r3, #4]
 8101e38:	693b      	ldr	r3, [r7, #16]
 8101e3a:	685b      	ldr	r3, [r3, #4]
 8101e3c:	68db      	ldr	r3, [r3, #12]
 8101e3e:	4a08      	ldr	r2, [pc, #32]	; (8101e60 <vTaskSwitchContext+0xb4>)
 8101e40:	6013      	str	r3, [r2, #0]
}
 8101e42:	bf00      	nop
 8101e44:	371c      	adds	r7, #28
 8101e46:	46bd      	mov	sp, r7
 8101e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e4c:	4770      	bx	lr
 8101e4e:	bf00      	nop
 8101e50:	10003fdc 	.word	0x10003fdc
 8101e54:	10003fc8 	.word	0x10003fc8
 8101e58:	10003fbc 	.word	0x10003fbc
 8101e5c:	10003eb8 	.word	0x10003eb8
 8101e60:	10003eb4 	.word	0x10003eb4

08101e64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8101e64:	b580      	push	{r7, lr}
 8101e66:	b082      	sub	sp, #8
 8101e68:	af00      	add	r7, sp, #0
 8101e6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8101e6c:	f000 f852 	bl	8101f14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8101e70:	4b06      	ldr	r3, [pc, #24]	; (8101e8c <prvIdleTask+0x28>)
 8101e72:	681b      	ldr	r3, [r3, #0]
 8101e74:	2b01      	cmp	r3, #1
 8101e76:	d9f9      	bls.n	8101e6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8101e78:	4b05      	ldr	r3, [pc, #20]	; (8101e90 <prvIdleTask+0x2c>)
 8101e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101e7e:	601a      	str	r2, [r3, #0]
 8101e80:	f3bf 8f4f 	dsb	sy
 8101e84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8101e88:	e7f0      	b.n	8101e6c <prvIdleTask+0x8>
 8101e8a:	bf00      	nop
 8101e8c:	10003eb8 	.word	0x10003eb8
 8101e90:	e000ed04 	.word	0xe000ed04

08101e94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8101e94:	b580      	push	{r7, lr}
 8101e96:	b082      	sub	sp, #8
 8101e98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8101e9a:	2300      	movs	r3, #0
 8101e9c:	607b      	str	r3, [r7, #4]
 8101e9e:	e00c      	b.n	8101eba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8101ea0:	687a      	ldr	r2, [r7, #4]
 8101ea2:	4613      	mov	r3, r2
 8101ea4:	009b      	lsls	r3, r3, #2
 8101ea6:	4413      	add	r3, r2
 8101ea8:	009b      	lsls	r3, r3, #2
 8101eaa:	4a12      	ldr	r2, [pc, #72]	; (8101ef4 <prvInitialiseTaskLists+0x60>)
 8101eac:	4413      	add	r3, r2
 8101eae:	4618      	mov	r0, r3
 8101eb0:	f7ff f92e 	bl	8101110 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8101eb4:	687b      	ldr	r3, [r7, #4]
 8101eb6:	3301      	adds	r3, #1
 8101eb8:	607b      	str	r3, [r7, #4]
 8101eba:	687b      	ldr	r3, [r7, #4]
 8101ebc:	2b06      	cmp	r3, #6
 8101ebe:	d9ef      	bls.n	8101ea0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8101ec0:	480d      	ldr	r0, [pc, #52]	; (8101ef8 <prvInitialiseTaskLists+0x64>)
 8101ec2:	f7ff f925 	bl	8101110 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8101ec6:	480d      	ldr	r0, [pc, #52]	; (8101efc <prvInitialiseTaskLists+0x68>)
 8101ec8:	f7ff f922 	bl	8101110 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8101ecc:	480c      	ldr	r0, [pc, #48]	; (8101f00 <prvInitialiseTaskLists+0x6c>)
 8101ece:	f7ff f91f 	bl	8101110 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8101ed2:	480c      	ldr	r0, [pc, #48]	; (8101f04 <prvInitialiseTaskLists+0x70>)
 8101ed4:	f7ff f91c 	bl	8101110 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8101ed8:	480b      	ldr	r0, [pc, #44]	; (8101f08 <prvInitialiseTaskLists+0x74>)
 8101eda:	f7ff f919 	bl	8101110 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8101ede:	4b0b      	ldr	r3, [pc, #44]	; (8101f0c <prvInitialiseTaskLists+0x78>)
 8101ee0:	4a05      	ldr	r2, [pc, #20]	; (8101ef8 <prvInitialiseTaskLists+0x64>)
 8101ee2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8101ee4:	4b0a      	ldr	r3, [pc, #40]	; (8101f10 <prvInitialiseTaskLists+0x7c>)
 8101ee6:	4a05      	ldr	r2, [pc, #20]	; (8101efc <prvInitialiseTaskLists+0x68>)
 8101ee8:	601a      	str	r2, [r3, #0]
}
 8101eea:	bf00      	nop
 8101eec:	3708      	adds	r7, #8
 8101eee:	46bd      	mov	sp, r7
 8101ef0:	bd80      	pop	{r7, pc}
 8101ef2:	bf00      	nop
 8101ef4:	10003eb8 	.word	0x10003eb8
 8101ef8:	10003f44 	.word	0x10003f44
 8101efc:	10003f58 	.word	0x10003f58
 8101f00:	10003f74 	.word	0x10003f74
 8101f04:	10003f88 	.word	0x10003f88
 8101f08:	10003fa0 	.word	0x10003fa0
 8101f0c:	10003f6c 	.word	0x10003f6c
 8101f10:	10003f70 	.word	0x10003f70

08101f14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8101f14:	b580      	push	{r7, lr}
 8101f16:	b082      	sub	sp, #8
 8101f18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8101f1a:	e019      	b.n	8101f50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8101f1c:	f7ff fada 	bl	81014d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8101f20:	4b10      	ldr	r3, [pc, #64]	; (8101f64 <prvCheckTasksWaitingTermination+0x50>)
 8101f22:	68db      	ldr	r3, [r3, #12]
 8101f24:	68db      	ldr	r3, [r3, #12]
 8101f26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8101f28:	687b      	ldr	r3, [r7, #4]
 8101f2a:	3304      	adds	r3, #4
 8101f2c:	4618      	mov	r0, r3
 8101f2e:	f7ff f979 	bl	8101224 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8101f32:	4b0d      	ldr	r3, [pc, #52]	; (8101f68 <prvCheckTasksWaitingTermination+0x54>)
 8101f34:	681b      	ldr	r3, [r3, #0]
 8101f36:	3b01      	subs	r3, #1
 8101f38:	4a0b      	ldr	r2, [pc, #44]	; (8101f68 <prvCheckTasksWaitingTermination+0x54>)
 8101f3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8101f3c:	4b0b      	ldr	r3, [pc, #44]	; (8101f6c <prvCheckTasksWaitingTermination+0x58>)
 8101f3e:	681b      	ldr	r3, [r3, #0]
 8101f40:	3b01      	subs	r3, #1
 8101f42:	4a0a      	ldr	r2, [pc, #40]	; (8101f6c <prvCheckTasksWaitingTermination+0x58>)
 8101f44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8101f46:	f7ff faf5 	bl	8101534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8101f4a:	6878      	ldr	r0, [r7, #4]
 8101f4c:	f000 f810 	bl	8101f70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8101f50:	4b06      	ldr	r3, [pc, #24]	; (8101f6c <prvCheckTasksWaitingTermination+0x58>)
 8101f52:	681b      	ldr	r3, [r3, #0]
 8101f54:	2b00      	cmp	r3, #0
 8101f56:	d1e1      	bne.n	8101f1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8101f58:	bf00      	nop
 8101f5a:	bf00      	nop
 8101f5c:	3708      	adds	r7, #8
 8101f5e:	46bd      	mov	sp, r7
 8101f60:	bd80      	pop	{r7, pc}
 8101f62:	bf00      	nop
 8101f64:	10003f88 	.word	0x10003f88
 8101f68:	10003fb4 	.word	0x10003fb4
 8101f6c:	10003f9c 	.word	0x10003f9c

08101f70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8101f70:	b580      	push	{r7, lr}
 8101f72:	b084      	sub	sp, #16
 8101f74:	af00      	add	r7, sp, #0
 8101f76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8101f78:	687b      	ldr	r3, [r7, #4]
 8101f7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8101f7e:	2b00      	cmp	r3, #0
 8101f80:	d108      	bne.n	8101f94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8101f82:	687b      	ldr	r3, [r7, #4]
 8101f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101f86:	4618      	mov	r0, r3
 8101f88:	f7fe ffa4 	bl	8100ed4 <vPortFree>
				vPortFree( pxTCB );
 8101f8c:	6878      	ldr	r0, [r7, #4]
 8101f8e:	f7fe ffa1 	bl	8100ed4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8101f92:	e018      	b.n	8101fc6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8101f94:	687b      	ldr	r3, [r7, #4]
 8101f96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8101f9a:	2b01      	cmp	r3, #1
 8101f9c:	d103      	bne.n	8101fa6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8101f9e:	6878      	ldr	r0, [r7, #4]
 8101fa0:	f7fe ff98 	bl	8100ed4 <vPortFree>
	}
 8101fa4:	e00f      	b.n	8101fc6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8101fa6:	687b      	ldr	r3, [r7, #4]
 8101fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8101fac:	2b02      	cmp	r3, #2
 8101fae:	d00a      	beq.n	8101fc6 <prvDeleteTCB+0x56>
	__asm volatile
 8101fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101fb4:	f383 8811 	msr	BASEPRI, r3
 8101fb8:	f3bf 8f6f 	isb	sy
 8101fbc:	f3bf 8f4f 	dsb	sy
 8101fc0:	60fb      	str	r3, [r7, #12]
}
 8101fc2:	bf00      	nop
 8101fc4:	e7fe      	b.n	8101fc4 <prvDeleteTCB+0x54>
	}
 8101fc6:	bf00      	nop
 8101fc8:	3710      	adds	r7, #16
 8101fca:	46bd      	mov	sp, r7
 8101fcc:	bd80      	pop	{r7, pc}
	...

08101fd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8101fd0:	b480      	push	{r7}
 8101fd2:	b083      	sub	sp, #12
 8101fd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8101fd6:	4b0c      	ldr	r3, [pc, #48]	; (8102008 <prvResetNextTaskUnblockTime+0x38>)
 8101fd8:	681b      	ldr	r3, [r3, #0]
 8101fda:	681b      	ldr	r3, [r3, #0]
 8101fdc:	2b00      	cmp	r3, #0
 8101fde:	d104      	bne.n	8101fea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8101fe0:	4b0a      	ldr	r3, [pc, #40]	; (810200c <prvResetNextTaskUnblockTime+0x3c>)
 8101fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8101fe6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8101fe8:	e008      	b.n	8101ffc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8101fea:	4b07      	ldr	r3, [pc, #28]	; (8102008 <prvResetNextTaskUnblockTime+0x38>)
 8101fec:	681b      	ldr	r3, [r3, #0]
 8101fee:	68db      	ldr	r3, [r3, #12]
 8101ff0:	68db      	ldr	r3, [r3, #12]
 8101ff2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8101ff4:	687b      	ldr	r3, [r7, #4]
 8101ff6:	685b      	ldr	r3, [r3, #4]
 8101ff8:	4a04      	ldr	r2, [pc, #16]	; (810200c <prvResetNextTaskUnblockTime+0x3c>)
 8101ffa:	6013      	str	r3, [r2, #0]
}
 8101ffc:	bf00      	nop
 8101ffe:	370c      	adds	r7, #12
 8102000:	46bd      	mov	sp, r7
 8102002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102006:	4770      	bx	lr
 8102008:	10003f6c 	.word	0x10003f6c
 810200c:	10003fd4 	.word	0x10003fd4

08102010 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8102010:	b480      	push	{r7}
 8102012:	b083      	sub	sp, #12
 8102014:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8102016:	4b0b      	ldr	r3, [pc, #44]	; (8102044 <xTaskGetSchedulerState+0x34>)
 8102018:	681b      	ldr	r3, [r3, #0]
 810201a:	2b00      	cmp	r3, #0
 810201c:	d102      	bne.n	8102024 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810201e:	2301      	movs	r3, #1
 8102020:	607b      	str	r3, [r7, #4]
 8102022:	e008      	b.n	8102036 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8102024:	4b08      	ldr	r3, [pc, #32]	; (8102048 <xTaskGetSchedulerState+0x38>)
 8102026:	681b      	ldr	r3, [r3, #0]
 8102028:	2b00      	cmp	r3, #0
 810202a:	d102      	bne.n	8102032 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810202c:	2302      	movs	r3, #2
 810202e:	607b      	str	r3, [r7, #4]
 8102030:	e001      	b.n	8102036 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8102032:	2300      	movs	r3, #0
 8102034:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8102036:	687b      	ldr	r3, [r7, #4]
	}
 8102038:	4618      	mov	r0, r3
 810203a:	370c      	adds	r7, #12
 810203c:	46bd      	mov	sp, r7
 810203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102042:	4770      	bx	lr
 8102044:	10003fc0 	.word	0x10003fc0
 8102048:	10003fdc 	.word	0x10003fdc

0810204c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810204c:	b580      	push	{r7, lr}
 810204e:	b084      	sub	sp, #16
 8102050:	af00      	add	r7, sp, #0
 8102052:	6078      	str	r0, [r7, #4]
 8102054:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8102056:	4b29      	ldr	r3, [pc, #164]	; (81020fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8102058:	681b      	ldr	r3, [r3, #0]
 810205a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810205c:	4b28      	ldr	r3, [pc, #160]	; (8102100 <prvAddCurrentTaskToDelayedList+0xb4>)
 810205e:	681b      	ldr	r3, [r3, #0]
 8102060:	3304      	adds	r3, #4
 8102062:	4618      	mov	r0, r3
 8102064:	f7ff f8de 	bl	8101224 <uxListRemove>
 8102068:	4603      	mov	r3, r0
 810206a:	2b00      	cmp	r3, #0
 810206c:	d10b      	bne.n	8102086 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 810206e:	4b24      	ldr	r3, [pc, #144]	; (8102100 <prvAddCurrentTaskToDelayedList+0xb4>)
 8102070:	681b      	ldr	r3, [r3, #0]
 8102072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102074:	2201      	movs	r2, #1
 8102076:	fa02 f303 	lsl.w	r3, r2, r3
 810207a:	43da      	mvns	r2, r3
 810207c:	4b21      	ldr	r3, [pc, #132]	; (8102104 <prvAddCurrentTaskToDelayedList+0xb8>)
 810207e:	681b      	ldr	r3, [r3, #0]
 8102080:	4013      	ands	r3, r2
 8102082:	4a20      	ldr	r2, [pc, #128]	; (8102104 <prvAddCurrentTaskToDelayedList+0xb8>)
 8102084:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8102086:	687b      	ldr	r3, [r7, #4]
 8102088:	f1b3 3fff 	cmp.w	r3, #4294967295
 810208c:	d10a      	bne.n	81020a4 <prvAddCurrentTaskToDelayedList+0x58>
 810208e:	683b      	ldr	r3, [r7, #0]
 8102090:	2b00      	cmp	r3, #0
 8102092:	d007      	beq.n	81020a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8102094:	4b1a      	ldr	r3, [pc, #104]	; (8102100 <prvAddCurrentTaskToDelayedList+0xb4>)
 8102096:	681b      	ldr	r3, [r3, #0]
 8102098:	3304      	adds	r3, #4
 810209a:	4619      	mov	r1, r3
 810209c:	481a      	ldr	r0, [pc, #104]	; (8102108 <prvAddCurrentTaskToDelayedList+0xbc>)
 810209e:	f7ff f864 	bl	810116a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 81020a2:	e026      	b.n	81020f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 81020a4:	68fa      	ldr	r2, [r7, #12]
 81020a6:	687b      	ldr	r3, [r7, #4]
 81020a8:	4413      	add	r3, r2
 81020aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 81020ac:	4b14      	ldr	r3, [pc, #80]	; (8102100 <prvAddCurrentTaskToDelayedList+0xb4>)
 81020ae:	681b      	ldr	r3, [r3, #0]
 81020b0:	68ba      	ldr	r2, [r7, #8]
 81020b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 81020b4:	68ba      	ldr	r2, [r7, #8]
 81020b6:	68fb      	ldr	r3, [r7, #12]
 81020b8:	429a      	cmp	r2, r3
 81020ba:	d209      	bcs.n	81020d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81020bc:	4b13      	ldr	r3, [pc, #76]	; (810210c <prvAddCurrentTaskToDelayedList+0xc0>)
 81020be:	681a      	ldr	r2, [r3, #0]
 81020c0:	4b0f      	ldr	r3, [pc, #60]	; (8102100 <prvAddCurrentTaskToDelayedList+0xb4>)
 81020c2:	681b      	ldr	r3, [r3, #0]
 81020c4:	3304      	adds	r3, #4
 81020c6:	4619      	mov	r1, r3
 81020c8:	4610      	mov	r0, r2
 81020ca:	f7ff f872 	bl	81011b2 <vListInsert>
}
 81020ce:	e010      	b.n	81020f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81020d0:	4b0f      	ldr	r3, [pc, #60]	; (8102110 <prvAddCurrentTaskToDelayedList+0xc4>)
 81020d2:	681a      	ldr	r2, [r3, #0]
 81020d4:	4b0a      	ldr	r3, [pc, #40]	; (8102100 <prvAddCurrentTaskToDelayedList+0xb4>)
 81020d6:	681b      	ldr	r3, [r3, #0]
 81020d8:	3304      	adds	r3, #4
 81020da:	4619      	mov	r1, r3
 81020dc:	4610      	mov	r0, r2
 81020de:	f7ff f868 	bl	81011b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 81020e2:	4b0c      	ldr	r3, [pc, #48]	; (8102114 <prvAddCurrentTaskToDelayedList+0xc8>)
 81020e4:	681b      	ldr	r3, [r3, #0]
 81020e6:	68ba      	ldr	r2, [r7, #8]
 81020e8:	429a      	cmp	r2, r3
 81020ea:	d202      	bcs.n	81020f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 81020ec:	4a09      	ldr	r2, [pc, #36]	; (8102114 <prvAddCurrentTaskToDelayedList+0xc8>)
 81020ee:	68bb      	ldr	r3, [r7, #8]
 81020f0:	6013      	str	r3, [r2, #0]
}
 81020f2:	bf00      	nop
 81020f4:	3710      	adds	r7, #16
 81020f6:	46bd      	mov	sp, r7
 81020f8:	bd80      	pop	{r7, pc}
 81020fa:	bf00      	nop
 81020fc:	10003fb8 	.word	0x10003fb8
 8102100:	10003eb4 	.word	0x10003eb4
 8102104:	10003fbc 	.word	0x10003fbc
 8102108:	10003fa0 	.word	0x10003fa0
 810210c:	10003f70 	.word	0x10003f70
 8102110:	10003f6c 	.word	0x10003f6c
 8102114:	10003fd4 	.word	0x10003fd4

08102118 <__libc_init_array>:
 8102118:	b570      	push	{r4, r5, r6, lr}
 810211a:	4d0d      	ldr	r5, [pc, #52]	; (8102150 <__libc_init_array+0x38>)
 810211c:	4c0d      	ldr	r4, [pc, #52]	; (8102154 <__libc_init_array+0x3c>)
 810211e:	1b64      	subs	r4, r4, r5
 8102120:	10a4      	asrs	r4, r4, #2
 8102122:	2600      	movs	r6, #0
 8102124:	42a6      	cmp	r6, r4
 8102126:	d109      	bne.n	810213c <__libc_init_array+0x24>
 8102128:	4d0b      	ldr	r5, [pc, #44]	; (8102158 <__libc_init_array+0x40>)
 810212a:	4c0c      	ldr	r4, [pc, #48]	; (810215c <__libc_init_array+0x44>)
 810212c:	f000 f818 	bl	8102160 <_init>
 8102130:	1b64      	subs	r4, r4, r5
 8102132:	10a4      	asrs	r4, r4, #2
 8102134:	2600      	movs	r6, #0
 8102136:	42a6      	cmp	r6, r4
 8102138:	d105      	bne.n	8102146 <__libc_init_array+0x2e>
 810213a:	bd70      	pop	{r4, r5, r6, pc}
 810213c:	f855 3b04 	ldr.w	r3, [r5], #4
 8102140:	4798      	blx	r3
 8102142:	3601      	adds	r6, #1
 8102144:	e7ee      	b.n	8102124 <__libc_init_array+0xc>
 8102146:	f855 3b04 	ldr.w	r3, [r5], #4
 810214a:	4798      	blx	r3
 810214c:	3601      	adds	r6, #1
 810214e:	e7f2      	b.n	8102136 <__libc_init_array+0x1e>
 8102150:	081021b8 	.word	0x081021b8
 8102154:	081021b8 	.word	0x081021b8
 8102158:	081021b8 	.word	0x081021b8
 810215c:	081021bc 	.word	0x081021bc

08102160 <_init>:
 8102160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102162:	bf00      	nop
 8102164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102166:	bc08      	pop	{r3}
 8102168:	469e      	mov	lr, r3
 810216a:	4770      	bx	lr

0810216c <_fini>:
 810216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810216e:	bf00      	nop
 8102170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102172:	bc08      	pop	{r3}
 8102174:	469e      	mov	lr, r3
 8102176:	4770      	bx	lr
