
ESC_Interface_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f49c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b8c  0800f740  0800f740  0001f740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080102cc  080102cc  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  080102cc  080102cc  000202cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080102d4  080102d4  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080102d4  080102d4  000202d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080102d8  080102d8  000202d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  24000000  080102dc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044e0  240001f0  080104c8  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240046d0  080104c8  000346d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029247  00000000  00000000  0003021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047b0  00000000  00000000  00059461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002160  00000000  00000000  0005dc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f98  00000000  00000000  0005fd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040475  00000000  00000000  00061d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027694  00000000  00000000  000a2185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a1a41  00000000  00000000  000c9819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0026b25a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a044  00000000  00000000  0026b2ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f0 	.word	0x240001f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f724 	.word	0x0800f724

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f4 	.word	0x240001f4
 80002dc:	0800f724 	.word	0x0800f724

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//** Functions prototypes **//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f003 fd91 	bl	8004344 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fd88 	bl	8004344 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2400021c 	.word	0x2400021c
 8000840:	24000220 	.word	0x24000220

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f003 fd71 	bl	8004344 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f003 fd68 	bl	8004344 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2400021c 	.word	0x2400021c
 8000880:	24000222 	.word	0x24000222

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f006 fb58 	bl	8006f5c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f006 fd42 	bl	8007340 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	24000224 	.word	0x24000224

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f006 fb2d 	bl	8006f5c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f006 fd18 	bl	8007340 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	24000224 	.word	0x24000224

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f006 fb03 	bl	8006f5c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	24000224 	.word	0x24000224

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f006 fae3 	bl	8006f5c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f006 fadc 	bl	8006f5c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	24000224 	.word	0x24000224

080009b8 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009c4:	f000 fa0a 	bl	8000ddc <NRF24_getPayloadSize>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d303      	bcc.n	80009da <NRF24_read_payload+0x22>
 80009d2:	f000 fa03 	bl	8000ddc <NRF24_getPayloadSize>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <NRF24_read_payload+0x24>
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff10 	bl	8000804 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009e4:	2361      	movs	r3, #97	; 0x61
 80009e6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80009e8:	f107 010e 	add.w	r1, r7, #14
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <NRF24_read_payload+0x5c>)
 80009f2:	f006 fab3 	bl	8006f5c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <NRF24_read_payload+0x5c>)
 8000a00:	f006 fc9e 	bl	8007340 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fefd 	bl	8000804 <NRF24_csn>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	24000224 	.word	0x24000224

08000a18 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a1c:	21ff      	movs	r1, #255	; 0xff
 8000a1e:	20e1      	movs	r0, #225	; 0xe1
 8000a20:	f7ff ff80 	bl	8000924 <NRF24_write_register>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a2c:	21ff      	movs	r1, #255	; 0xff
 8000a2e:	20e2      	movs	r0, #226	; 0xe2
 8000a30:	f7ff ff78 	bl	8000924 <NRF24_write_register>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff ff20 	bl	8000884 <NRF24_read_register>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a54:	b082      	sub	sp, #8
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
 8000a64:	4613      	mov	r3, r2
 8000a66:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a68:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <NRF24_begin+0x1b0>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	4619      	mov	r1, r3
 8000a74:	f00b ff52 	bl	800c91c <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a78:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <NRF24_begin+0x1b4>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a7e:	4a63      	ldr	r2, [pc, #396]	; (8000c0c <NRF24_begin+0x1b8>)
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <NRF24_begin+0x1bc>)
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff feba 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fed7 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f002 fb76 	bl	8003188 <HAL_Delay>

	//** Soft Reset Registers default values **//
	NRF24_write_register(0x00, 0x08);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff40 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000aa4:	213f      	movs	r1, #63	; 0x3f
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff3c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff ff38 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000abc:	2103      	movs	r1, #3
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000acc:	210f      	movs	r1, #15
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff ff24 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff ff20 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f7ff ff1c 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000aec:	23e7      	movs	r3, #231	; 0xe7
 8000aee:	733b      	strb	r3, [r7, #12]
 8000af0:	23e7      	movs	r3, #231	; 0xe7
 8000af2:	72fb      	strb	r3, [r7, #11]
 8000af4:	23e7      	movs	r3, #231	; 0xe7
 8000af6:	72bb      	strb	r3, [r7, #10]
 8000af8:	23e7      	movs	r3, #231	; 0xe7
 8000afa:	727b      	strb	r3, [r7, #9]
 8000afc:	23e7      	movs	r3, #231	; 0xe7
 8000afe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2205      	movs	r2, #5
 8000b06:	4619      	mov	r1, r3
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f7ff ff2d 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000b0e:	23c2      	movs	r3, #194	; 0xc2
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	23c2      	movs	r3, #194	; 0xc2
 8000b14:	72fb      	strb	r3, [r7, #11]
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	72bb      	strb	r3, [r7, #10]
 8000b1a:	23c2      	movs	r3, #194	; 0xc2
 8000b1c:	727b      	strb	r3, [r7, #9]
 8000b1e:	23c2      	movs	r3, #194	; 0xc2
 8000b20:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2205      	movs	r2, #5
 8000b28:	4619      	mov	r1, r3
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f7ff ff1c 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b30:	21c3      	movs	r1, #195	; 0xc3
 8000b32:	200c      	movs	r0, #12
 8000b34:	f7ff fef6 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b38:	21c4      	movs	r1, #196	; 0xc4
 8000b3a:	200d      	movs	r0, #13
 8000b3c:	f7ff fef2 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b40:	21c5      	movs	r1, #197	; 0xc5
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff feee 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b48:	21c6      	movs	r1, #198	; 0xc6
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff feea 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	733b      	strb	r3, [r7, #12]
 8000b54:	23e7      	movs	r3, #231	; 0xe7
 8000b56:	72fb      	strb	r3, [r7, #11]
 8000b58:	23e7      	movs	r3, #231	; 0xe7
 8000b5a:	72bb      	strb	r3, [r7, #10]
 8000b5c:	23e7      	movs	r3, #231	; 0xe7
 8000b5e:	727b      	strb	r3, [r7, #9]
 8000b60:	23e7      	movs	r3, #231	; 0xe7
 8000b62:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2205      	movs	r2, #5
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f7ff fefb 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2011      	movs	r0, #17
 8000b76:	f7ff fed5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f7ff fed1 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2013      	movs	r0, #19
 8000b86:	f7ff fecd 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2014      	movs	r0, #20
 8000b8e:	f7ff fec9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2015      	movs	r0, #21
 8000b96:	f7ff fec5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2016      	movs	r0, #22
 8000b9e:	f7ff fec1 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000ba2:	f000 faab 	bl	80010fc <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f7ff febb 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f7ff feb7 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000bb6:	f000 fabb 	bl	8001130 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bba:	210f      	movs	r1, #15
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f000 f8c5 	bl	8000d4c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f9ab 	bl	8000f1e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f9e1 	bl	8000f90 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 fa24 	bl	800101c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000bd4:	f000 f976 	bl	8000ec4 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f000 f8e7 	bl	8000dac <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000bde:	f000 fa84 	bl	80010ea <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000be2:	204c      	movs	r0, #76	; 0x4c
 8000be4:	f000 f8cd 	bl	8000d82 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000be8:	f7ff ff16 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bec:	f7ff ff1c 	bl	8000a28 <NRF24_flush_rx>

	NRF24_powerDown();
 8000bf0:	f000 fa3c 	bl	800106c <NRF24_powerDown>

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfe:	b002      	add	sp, #8
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	24000224 	.word	0x24000224
 8000c08:	2400021c 	.word	0x2400021c
 8000c0c:	24000220 	.word	0x24000220
 8000c10:	24000222 	.word	0x24000222

08000c14 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe33 	bl	8000884 <NRF24_read_register>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f043 0303 	orr.w	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fe7b 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <NRF24_startListening+0x48>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	d004      	beq.n	8000c42 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c38:	2205      	movs	r2, #5
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <NRF24_startListening+0x48>)
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f7ff fe93 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000c42:	f7ff fee9 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c46:	f7ff feef 	bl	8000a28 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdfa 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c50:	2096      	movs	r0, #150	; 0x96
 8000c52:	f7ff fdb5 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24000210 	.word	0x24000210

08000c60 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 fa10 	bl	800108a <NRF24_availablePipe>
 8000c6a:	4603      	mov	r3, r0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe99 	bl	80009b8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c86:	2017      	movs	r0, #23
 8000c88:	f7ff fdfc 	bl	8000884 <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c94:	f7ff fec8 	bl	8000a28 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c98:	f000 f8ac 	bl	8000df4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e9c7 2300 	strd	r2, r3, [r7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cca:	491c      	ldr	r1, [pc, #112]	; (8000d3c <NRF24_openReadingPipe+0x8c>)
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d82d      	bhi.n	8000d32 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d808      	bhi.n	8000cee <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe3e 	bl	8000968 <NRF24_write_registerN>
 8000cec:	e007      	b.n	8000cfe <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe35 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <NRF24_openReadingPipe+0x94>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <NRF24_openReadingPipe+0x98>)
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe0a 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fdb7 	bl	8000884 <NRF24_read_register>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	}

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000210 	.word	0x24000210
 8000d40:	0800fea8 	.word	0x0800fea8
 8000d44:	0800feb0 	.word	0x0800feb0
 8000d48:	24000218 	.word	0x24000218

08000d4c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fdd5 	bl	8000924 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d8c:	237f      	movs	r3, #127	; 0x7f
 8000d8e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf28      	it	cs
 8000d98:	4613      	movcs	r3, r2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f7ff fdc0 	bl	8000924 <NRF24_write_register>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000db6:	2320      	movs	r3, #32
 8000db8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bf28      	it	cs
 8000dc2:	4613      	movcs	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <NRF24_setPayloadSize+0x2c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	24000218 	.word	0x24000218

08000ddc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return payload_size;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <NRF24_getPayloadSize+0x14>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	24000218 	.word	0x24000218

08000df4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000df8:	2060      	movs	r0, #96	; 0x60
 8000dfa:	f7ff fd43 	bl	8000884 <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f7ff fd3b 	bl	8000884 <NRF24_read_register>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f043 0306 	orr.w	r3, r3, #6
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f7ff fd83 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f7ff fd30 	bl	8000884 <NRF24_read_register>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10c      	bne.n	8000e44 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e2a:	f000 f967 	bl	80010fc <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000e2e:	201d      	movs	r0, #29
 8000e30:	f7ff fd28 	bl	8000884 <NRF24_read_register>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f043 0306 	orr.w	r3, r3, #6
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	201d      	movs	r0, #29
 8000e40:	f7ff fd70 	bl	8000924 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000e44:	201c      	movs	r0, #28
 8000e46:	f7ff fd1d 	bl	8000884 <NRF24_read_register>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f043 0303 	orr.w	r3, r3, #3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	201c      	movs	r0, #28
 8000e56:	f7ff fd65 	bl	8000924 <NRF24_write_register>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e64:	201d      	movs	r0, #29
 8000e66:	f7ff fd0d 	bl	8000884 <NRF24_read_register>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4619      	mov	r1, r3
 8000e74:	201d      	movs	r0, #29
 8000e76:	f7ff fd55 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e7a:	201d      	movs	r0, #29
 8000e7c:	f7ff fd02 	bl	8000884 <NRF24_read_register>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10c      	bne.n	8000ea0 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e86:	f000 f939 	bl	80010fc <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e8a:	201d      	movs	r0, #29
 8000e8c:	f7ff fcfa 	bl	8000884 <NRF24_read_register>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4619      	mov	r1, r3
 8000e9a:	201d      	movs	r0, #29
 8000e9c:	f7ff fd42 	bl	8000924 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000ea0:	201c      	movs	r0, #28
 8000ea2:	f7ff fcef 	bl	8000884 <NRF24_read_register>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4619      	mov	r1, r3
 8000eb0:	201c      	movs	r0, #28
 8000eb2:	f7ff fd37 	bl	8000924 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000eb6:	4b02      	ldr	r3, [pc, #8]	; (8000ec0 <NRF24_enableDynamicPayloads+0x60>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	24000219 	.word	0x24000219

08000ec4 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000ec8:	201d      	movs	r0, #29
 8000eca:	f7ff fcdb 	bl	8000884 <NRF24_read_register>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f023 0304 	bic.w	r3, r3, #4
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	201d      	movs	r0, #29
 8000eda:	f7ff fd23 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	201c      	movs	r0, #28
 8000ee2:	f7ff fd1f 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000ee6:	4b02      	ldr	r3, [pc, #8]	; (8000ef0 <NRF24_disableDynamicPayloads+0x2c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	24000219 	.word	0x24000219

08000ef4 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000f04:	213f      	movs	r1, #63	; 0x3f
 8000f06:	2001      	movs	r0, #1
 8000f08:	f7ff fd0c 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000f0c:	e003      	b.n	8000f16 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2001      	movs	r0, #1
 8000f12:	f7ff fd07 	bl	8000924 <NRF24_write_register>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f28:	2006      	movs	r0, #6
 8000f2a:	f7ff fcab 	bl	8000884 <NRF24_read_register>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	f023 0306 	bic.w	r3, r3, #6
 8000f38:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d104      	bne.n	8000f4a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	f043 0306 	orr.w	r3, r3, #6
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e019      	b.n	8000f7e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d104      	bne.n	8000f5a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	e011      	b.n	8000f7e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d104      	bne.n	8000f6a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e009      	b.n	8000f7e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d006      	beq.n	8000f7e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d103      	bne.n	8000f7e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	f043 0306 	orr.w	r3, r3, #6
 8000f7c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	4619      	mov	r1, r3
 8000f82:	2006      	movs	r0, #6
 8000f84:	f7ff fcce 	bl	8000924 <NRF24_write_register>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f9e:	2006      	movs	r0, #6
 8000fa0:	f7ff fc70 	bl	8000884 <NRF24_read_register>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <NRF24_setDataRate+0x88>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000fb4:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d107      	bne.n	8000fcc <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <NRF24_setDataRate+0x88>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	f043 0320 	orr.w	r3, r3, #32
 8000fc8:	73bb      	strb	r3, [r7, #14]
 8000fca:	e00d      	b.n	8000fe8 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d107      	bne.n	8000fe2 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <NRF24_setDataRate+0x88>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	73bb      	strb	r3, [r7, #14]
 8000fe0:	e002      	b.n	8000fe8 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <NRF24_setDataRate+0x88>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000fe8:	7bbb      	ldrb	r3, [r7, #14]
 8000fea:	4619      	mov	r1, r3
 8000fec:	2006      	movs	r0, #6
 8000fee:	f7ff fc99 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000ff2:	2006      	movs	r0, #6
 8000ff4:	f7ff fc46 	bl	8000884 <NRF24_read_register>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	7bbb      	ldrb	r3, [r7, #14]
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d102      	bne.n	8001008 <NRF24_setDataRate+0x78>
  {
    result = true;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e002      	b.n	800100e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <NRF24_setDataRate+0x88>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2400021a 	.word	0x2400021a

0800101c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff fc2c 	bl	8000884 <NRF24_read_register>
 800102c:	4603      	mov	r3, r0
 800102e:	f023 030c 	bic.w	r3, r3, #12
 8001032:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00f      	beq.n	800105a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d104      	bne.n	800104a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	f043 0308 	orr.w	r3, r3, #8
 8001046:	73fb      	strb	r3, [r7, #15]
 8001048:	e007      	b.n	800105a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	4619      	mov	r1, r3
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff fc60 	bl	8000924 <NRF24_write_register>
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fc07 	bl	8000884 <NRF24_read_register>
 8001076:	4603      	mov	r3, r0
 8001078:	f023 0302 	bic.w	r3, r3, #2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4619      	mov	r1, r3
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff fc4f 	bl	8000924 <NRF24_write_register>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}

0800108a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001092:	f7ff fcd1 	bl	8000a38 <NRF24_get_status>
 8001096:	4603      	mov	r3, r0
 8001098:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf14      	ite	ne
 80010a4:	2301      	movne	r3, #1
 80010a6:	2300      	moveq	r3, #0
 80010a8:	73bb      	strb	r3, [r7, #14]

  if (result)
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d017      	beq.n	80010e0 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d007      	beq.n	80010c6 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80010c6:	2140      	movs	r1, #64	; 0x40
 80010c8:	2007      	movs	r0, #7
 80010ca:	f7ff fc2b 	bl	8000924 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80010d8:	2120      	movs	r1, #32
 80010da:	2007      	movs	r0, #7
 80010dc:	f7ff fc22 	bl	8000924 <NRF24_write_register>
    }
  }
  return result;
 80010e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80010ee:	2170      	movs	r1, #112	; 0x70
 80010f0:	2007      	movs	r0, #7
 80010f2:	f7ff fc17 	bl	8000924 <NRF24_write_register>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff fb7e 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001108:	2350      	movs	r3, #80	; 0x50
 800110a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800110c:	2373      	movs	r3, #115	; 0x73
 800110e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001110:	1d39      	adds	r1, r7, #4
 8001112:	2364      	movs	r3, #100	; 0x64
 8001114:	2202      	movs	r2, #2
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <NRF24_ACTIVATE_cmd+0x30>)
 8001118:	f005 ff20 	bl	8006f5c <HAL_SPI_Transmit>
	NRF24_csn(1);
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff fb71 	bl	8000804 <NRF24_csn>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	24000224 	.word	0x24000224

08001130 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001132:	b0a1      	sub	sp, #132	; 0x84
 8001134:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n****************\r\n");
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	49c3      	ldr	r1, [pc, #780]	; (8001448 <printRadioSettings+0x318>)
 800113c:	4618      	mov	r0, r3
 800113e:	f00c f907 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f8ca 	bl	80002e0 <strlen>
 800114c:	4603      	mov	r3, r0
 800114e:	b29a      	uxth	r2, r3
 8001150:	f107 0108 	add.w	r1, r7, #8
 8001154:	230a      	movs	r3, #10
 8001156:	48bd      	ldr	r0, [pc, #756]	; (800144c <printRadioSettings+0x31c>)
 8001158:	f007 fcde 	bl	8008b18 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff fb91 	bl	8000884 <NRF24_read_register>
 8001162:	4603      	mov	r3, r0
 8001164:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8001168:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	2b00      	cmp	r3, #0
 8001172:	d013      	beq.n	800119c <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001174:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	2b00      	cmp	r3, #0
 800117e:	d006      	beq.n	800118e <printRadioSettings+0x5e>
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	49b2      	ldr	r1, [pc, #712]	; (8001450 <printRadioSettings+0x320>)
 8001186:	4618      	mov	r0, r3
 8001188:	f00c f8e2 	bl	800d350 <siprintf>
 800118c:	e00c      	b.n	80011a8 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	49b0      	ldr	r1, [pc, #704]	; (8001454 <printRadioSettings+0x324>)
 8001194:	4618      	mov	r0, r3
 8001196:	f00c f8db 	bl	800d350 <siprintf>
 800119a:	e005      	b.n	80011a8 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	49ad      	ldr	r1, [pc, #692]	; (8001458 <printRadioSettings+0x328>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f00c f8d4 	bl	800d350 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f897 	bl	80002e0 <strlen>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	f107 0108 	add.w	r1, r7, #8
 80011ba:	230a      	movs	r3, #10
 80011bc:	48a3      	ldr	r0, [pc, #652]	; (800144c <printRadioSettings+0x31c>)
 80011be:	f007 fcab 	bl	8008b18 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff fb5e 	bl	8000884 <NRF24_read_register>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011d2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bfcc      	ite	gt
 80011da:	2301      	movgt	r3, #1
 80011dc:	2300      	movle	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011e6:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bfcc      	ite	gt
 80011ee:	2301      	movgt	r3, #1
 80011f0:	2300      	movle	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011fa:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011fe:	2b00      	cmp	r3, #0
 8001200:	bfcc      	ite	gt
 8001202:	2301      	movgt	r3, #1
 8001204:	2300      	movle	r3, #0
 8001206:	b2db      	uxtb	r3, r3
 8001208:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800120a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800120e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001212:	2b00      	cmp	r3, #0
 8001214:	bfcc      	ite	gt
 8001216:	2301      	movgt	r3, #1
 8001218:	2300      	movle	r3, #0
 800121a:	b2db      	uxtb	r3, r3
 800121c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800121e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001222:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001226:	2b00      	cmp	r3, #0
 8001228:	bfcc      	ite	gt
 800122a:	2301      	movgt	r3, #1
 800122c:	2300      	movle	r3, #0
 800122e:	b2db      	uxtb	r3, r3
 8001230:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001232:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001236:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800123a:	2b00      	cmp	r3, #0
 800123c:	bfcc      	ite	gt
 800123e:	2301      	movgt	r3, #1
 8001240:	2300      	movle	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	f107 0008 	add.w	r0, r7, #8
 8001248:	9303      	str	r3, [sp, #12]
 800124a:	9402      	str	r4, [sp, #8]
 800124c:	9101      	str	r1, [sp, #4]
 800124e:	9200      	str	r2, [sp, #0]
 8001250:	4633      	mov	r3, r6
 8001252:	462a      	mov	r2, r5
 8001254:	4981      	ldr	r1, [pc, #516]	; (800145c <printRadioSettings+0x32c>)
 8001256:	f00c f87b 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f83e 	bl	80002e0 <strlen>
 8001264:	4603      	mov	r3, r0
 8001266:	b29a      	uxth	r2, r3
 8001268:	f107 0108 	add.w	r1, r7, #8
 800126c:	230a      	movs	r3, #10
 800126e:	4877      	ldr	r0, [pc, #476]	; (800144c <printRadioSettings+0x31c>)
 8001270:	f007 fc52 	bl	8008b18 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001274:	2002      	movs	r0, #2
 8001276:	f7ff fb05 	bl	8000884 <NRF24_read_register>
 800127a:	4603      	mov	r3, r0
 800127c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001280:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001284:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001288:	2b00      	cmp	r3, #0
 800128a:	bfcc      	ite	gt
 800128c:	2301      	movgt	r3, #1
 800128e:	2300      	movle	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001294:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001298:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800129c:	2b00      	cmp	r3, #0
 800129e:	bfcc      	ite	gt
 80012a0:	2301      	movgt	r3, #1
 80012a2:	2300      	movle	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012ac:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bfcc      	ite	gt
 80012b4:	2301      	movgt	r3, #1
 80012b6:	2300      	movle	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012c0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	bfcc      	ite	gt
 80012c8:	2301      	movgt	r3, #1
 80012ca:	2300      	movle	r3, #0
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012d4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bfcc      	ite	gt
 80012dc:	2301      	movgt	r3, #1
 80012de:	2300      	movle	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012e8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bfcc      	ite	gt
 80012f0:	2301      	movgt	r3, #1
 80012f2:	2300      	movle	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f107 0008 	add.w	r0, r7, #8
 80012fa:	9303      	str	r3, [sp, #12]
 80012fc:	9402      	str	r4, [sp, #8]
 80012fe:	9101      	str	r1, [sp, #4]
 8001300:	9200      	str	r2, [sp, #0]
 8001302:	4633      	mov	r3, r6
 8001304:	462a      	mov	r2, r5
 8001306:	4956      	ldr	r1, [pc, #344]	; (8001460 <printRadioSettings+0x330>)
 8001308:	f00c f822 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	4618      	mov	r0, r3
 8001312:	f7fe ffe5 	bl	80002e0 <strlen>
 8001316:	4603      	mov	r3, r0
 8001318:	b29a      	uxth	r2, r3
 800131a:	f107 0108 	add.w	r1, r7, #8
 800131e:	230a      	movs	r3, #10
 8001320:	484a      	ldr	r0, [pc, #296]	; (800144c <printRadioSettings+0x31c>)
 8001322:	f007 fbf9 	bl	8008b18 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001326:	2003      	movs	r0, #3
 8001328:	f7ff faac 	bl	8000884 <NRF24_read_register>
 800132c:	4603      	mov	r3, r0
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001336:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800133a:	3302      	adds	r3, #2
 800133c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001340:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4946      	ldr	r1, [pc, #280]	; (8001464 <printRadioSettings+0x334>)
 800134a:	4618      	mov	r0, r3
 800134c:	f00c f800 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	4618      	mov	r0, r3
 8001356:	f7fe ffc3 	bl	80002e0 <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	b29a      	uxth	r2, r3
 800135e:	f107 0108 	add.w	r1, r7, #8
 8001362:	230a      	movs	r3, #10
 8001364:	4839      	ldr	r0, [pc, #228]	; (800144c <printRadioSettings+0x31c>)
 8001366:	f007 fbd7 	bl	8008b18 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800136a:	2005      	movs	r0, #5
 800136c:	f7ff fa8a 	bl	8000884 <NRF24_read_register>
 8001370:	4603      	mov	r3, r0
 8001372:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001376:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800137a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	4939      	ldr	r1, [pc, #228]	; (8001468 <printRadioSettings+0x338>)
 8001384:	4618      	mov	r0, r3
 8001386:	f00b ffe3 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	4618      	mov	r0, r3
 8001390:	f7fe ffa6 	bl	80002e0 <strlen>
 8001394:	4603      	mov	r3, r0
 8001396:	b29a      	uxth	r2, r3
 8001398:	f107 0108 	add.w	r1, r7, #8
 800139c:	230a      	movs	r3, #10
 800139e:	482b      	ldr	r0, [pc, #172]	; (800144c <printRadioSettings+0x31c>)
 80013a0:	f007 fbba 	bl	8008b18 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80013a4:	2006      	movs	r0, #6
 80013a6:	f7ff fa6d 	bl	8000884 <NRF24_read_register>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80013b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d006      	beq.n	80013ca <printRadioSettings+0x29a>
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	492a      	ldr	r1, [pc, #168]	; (800146c <printRadioSettings+0x33c>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00b ffc4 	bl	800d350 <siprintf>
 80013c8:	e005      	b.n	80013d6 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	4928      	ldr	r1, [pc, #160]	; (8001470 <printRadioSettings+0x340>)
 80013d0:	4618      	mov	r0, r3
 80013d2:	f00b ffbd 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	4618      	mov	r0, r3
 80013dc:	f7fe ff80 	bl	80002e0 <strlen>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	f107 0108 	add.w	r1, r7, #8
 80013e8:	230a      	movs	r3, #10
 80013ea:	4818      	ldr	r0, [pc, #96]	; (800144c <printRadioSettings+0x31c>)
 80013ec:	f007 fb94 	bl	8008b18 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80013f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013f4:	f003 0306 	and.w	r3, r3, #6
 80013f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80013fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001400:	085b      	lsrs	r3, r3, #1
 8001402:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001406:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800140a:	2b00      	cmp	r3, #0
 800140c:	d106      	bne.n	800141c <printRadioSettings+0x2ec>
 800140e:	f107 0308 	add.w	r3, r7, #8
 8001412:	4918      	ldr	r1, [pc, #96]	; (8001474 <printRadioSettings+0x344>)
 8001414:	4618      	mov	r0, r3
 8001416:	f00b ff9b 	bl	800d350 <siprintf>
 800141a:	e03b      	b.n	8001494 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800141c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001420:	2b01      	cmp	r3, #1
 8001422:	d106      	bne.n	8001432 <printRadioSettings+0x302>
 8001424:	f107 0308 	add.w	r3, r7, #8
 8001428:	4913      	ldr	r1, [pc, #76]	; (8001478 <printRadioSettings+0x348>)
 800142a:	4618      	mov	r0, r3
 800142c:	f00b ff90 	bl	800d350 <siprintf>
 8001430:	e030      	b.n	8001494 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001432:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001436:	2b02      	cmp	r3, #2
 8001438:	d122      	bne.n	8001480 <printRadioSettings+0x350>
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	490f      	ldr	r1, [pc, #60]	; (800147c <printRadioSettings+0x34c>)
 8001440:	4618      	mov	r0, r3
 8001442:	f00b ff85 	bl	800d350 <siprintf>
 8001446:	e025      	b.n	8001494 <printRadioSettings+0x364>
 8001448:	0800f740 	.word	0x0800f740
 800144c:	240002ac 	.word	0x240002ac
 8001450:	0800f758 	.word	0x0800f758
 8001454:	0800f774 	.word	0x0800f774
 8001458:	0800f790 	.word	0x0800f790
 800145c:	0800f7a4 	.word	0x0800f7a4
 8001460:	0800f7e8 	.word	0x0800f7e8
 8001464:	0800f834 	.word	0x0800f834
 8001468:	0800f850 	.word	0x0800f850
 800146c:	0800f864 	.word	0x0800f864
 8001470:	0800f87c 	.word	0x0800f87c
 8001474:	0800f894 	.word	0x0800f894
 8001478:	0800f8a8 	.word	0x0800f8a8
 800147c:	0800f8bc 	.word	0x0800f8bc
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001480:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001484:	2b03      	cmp	r3, #3
 8001486:	d105      	bne.n	8001494 <printRadioSettings+0x364>
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	49d7      	ldr	r1, [pc, #860]	; (80017ec <printRadioSettings+0x6bc>)
 800148e:	4618      	mov	r0, r3
 8001490:	f00b ff5e 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4618      	mov	r0, r3
 800149a:	f7fe ff21 	bl	80002e0 <strlen>
 800149e:	4603      	mov	r3, r0
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f107 0108 	add.w	r1, r7, #8
 80014a6:	230a      	movs	r3, #10
 80014a8:	48d1      	ldr	r0, [pc, #836]	; (80017f0 <printRadioSettings+0x6c0>)
 80014aa:	f007 fb35 	bl	8008b18 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80014ae:	463b      	mov	r3, r7
 80014b0:	2205      	movs	r2, #5
 80014b2:	4619      	mov	r1, r3
 80014b4:	200a      	movs	r0, #10
 80014b6:	f7ff fa0d 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80014ba:	793b      	ldrb	r3, [r7, #4]
 80014bc:	461c      	mov	r4, r3
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	461d      	mov	r5, r3
 80014c2:	78bb      	ldrb	r3, [r7, #2]
 80014c4:	787a      	ldrb	r2, [r7, #1]
 80014c6:	7839      	ldrb	r1, [r7, #0]
 80014c8:	f107 0008 	add.w	r0, r7, #8
 80014cc:	9102      	str	r1, [sp, #8]
 80014ce:	9201      	str	r2, [sp, #4]
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	462b      	mov	r3, r5
 80014d4:	4622      	mov	r2, r4
 80014d6:	49c7      	ldr	r1, [pc, #796]	; (80017f4 <printRadioSettings+0x6c4>)
 80014d8:	f00b ff3a 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7fe fefd 	bl	80002e0 <strlen>
 80014e6:	4603      	mov	r3, r0
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	f107 0108 	add.w	r1, r7, #8
 80014ee:	230a      	movs	r3, #10
 80014f0:	48bf      	ldr	r0, [pc, #764]	; (80017f0 <printRadioSettings+0x6c0>)
 80014f2:	f007 fb11 	bl	8008b18 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80014f6:	463b      	mov	r3, r7
 80014f8:	2205      	movs	r2, #5
 80014fa:	4619      	mov	r1, r3
 80014fc:	200b      	movs	r0, #11
 80014fe:	f7ff f9e9 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001502:	793b      	ldrb	r3, [r7, #4]
 8001504:	461c      	mov	r4, r3
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	461d      	mov	r5, r3
 800150a:	78bb      	ldrb	r3, [r7, #2]
 800150c:	787a      	ldrb	r2, [r7, #1]
 800150e:	7839      	ldrb	r1, [r7, #0]
 8001510:	f107 0008 	add.w	r0, r7, #8
 8001514:	9102      	str	r1, [sp, #8]
 8001516:	9201      	str	r2, [sp, #4]
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	462b      	mov	r3, r5
 800151c:	4622      	mov	r2, r4
 800151e:	49b6      	ldr	r1, [pc, #728]	; (80017f8 <printRadioSettings+0x6c8>)
 8001520:	f00b ff16 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe fed9 	bl	80002e0 <strlen>
 800152e:	4603      	mov	r3, r0
 8001530:	b29a      	uxth	r2, r3
 8001532:	f107 0108 	add.w	r1, r7, #8
 8001536:	230a      	movs	r3, #10
 8001538:	48ad      	ldr	r0, [pc, #692]	; (80017f0 <printRadioSettings+0x6c0>)
 800153a:	f007 faed 	bl	8008b18 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800153e:	463b      	mov	r3, r7
 8001540:	2201      	movs	r2, #1
 8001542:	4619      	mov	r1, r3
 8001544:	200c      	movs	r0, #12
 8001546:	f7ff f9c5 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800154a:	783b      	ldrb	r3, [r7, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	49aa      	ldr	r1, [pc, #680]	; (80017fc <printRadioSettings+0x6cc>)
 8001554:	4618      	mov	r0, r3
 8001556:	f00b fefb 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe febe 	bl	80002e0 <strlen>
 8001564:	4603      	mov	r3, r0
 8001566:	b29a      	uxth	r2, r3
 8001568:	f107 0108 	add.w	r1, r7, #8
 800156c:	230a      	movs	r3, #10
 800156e:	48a0      	ldr	r0, [pc, #640]	; (80017f0 <printRadioSettings+0x6c0>)
 8001570:	f007 fad2 	bl	8008b18 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001574:	463b      	mov	r3, r7
 8001576:	2201      	movs	r2, #1
 8001578:	4619      	mov	r1, r3
 800157a:	200d      	movs	r0, #13
 800157c:	f7ff f9aa 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001580:	783b      	ldrb	r3, [r7, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	499d      	ldr	r1, [pc, #628]	; (8001800 <printRadioSettings+0x6d0>)
 800158a:	4618      	mov	r0, r3
 800158c:	f00b fee0 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe fea3 	bl	80002e0 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	b29a      	uxth	r2, r3
 800159e:	f107 0108 	add.w	r1, r7, #8
 80015a2:	230a      	movs	r3, #10
 80015a4:	4892      	ldr	r0, [pc, #584]	; (80017f0 <printRadioSettings+0x6c0>)
 80015a6:	f007 fab7 	bl	8008b18 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80015aa:	463b      	mov	r3, r7
 80015ac:	2201      	movs	r2, #1
 80015ae:	4619      	mov	r1, r3
 80015b0:	200e      	movs	r0, #14
 80015b2:	f7ff f98f 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80015b6:	783b      	ldrb	r3, [r7, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	4991      	ldr	r1, [pc, #580]	; (8001804 <printRadioSettings+0x6d4>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f00b fec5 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe fe88 	bl	80002e0 <strlen>
 80015d0:	4603      	mov	r3, r0
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	f107 0108 	add.w	r1, r7, #8
 80015d8:	230a      	movs	r3, #10
 80015da:	4885      	ldr	r0, [pc, #532]	; (80017f0 <printRadioSettings+0x6c0>)
 80015dc:	f007 fa9c 	bl	8008b18 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80015e0:	463b      	mov	r3, r7
 80015e2:	2201      	movs	r2, #1
 80015e4:	4619      	mov	r1, r3
 80015e6:	200f      	movs	r0, #15
 80015e8:	f7ff f974 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80015ec:	783b      	ldrb	r3, [r7, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	4984      	ldr	r1, [pc, #528]	; (8001808 <printRadioSettings+0x6d8>)
 80015f6:	4618      	mov	r0, r3
 80015f8:	f00b feaa 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe fe6d 	bl	80002e0 <strlen>
 8001606:	4603      	mov	r3, r0
 8001608:	b29a      	uxth	r2, r3
 800160a:	f107 0108 	add.w	r1, r7, #8
 800160e:	230a      	movs	r3, #10
 8001610:	4877      	ldr	r0, [pc, #476]	; (80017f0 <printRadioSettings+0x6c0>)
 8001612:	f007 fa81 	bl	8008b18 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001616:	463b      	mov	r3, r7
 8001618:	2205      	movs	r2, #5
 800161a:	4619      	mov	r1, r3
 800161c:	2010      	movs	r0, #16
 800161e:	f7ff f959 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001622:	793b      	ldrb	r3, [r7, #4]
 8001624:	461c      	mov	r4, r3
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	461d      	mov	r5, r3
 800162a:	78bb      	ldrb	r3, [r7, #2]
 800162c:	787a      	ldrb	r2, [r7, #1]
 800162e:	7839      	ldrb	r1, [r7, #0]
 8001630:	f107 0008 	add.w	r0, r7, #8
 8001634:	9102      	str	r1, [sp, #8]
 8001636:	9201      	str	r2, [sp, #4]
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	462b      	mov	r3, r5
 800163c:	4622      	mov	r2, r4
 800163e:	4973      	ldr	r1, [pc, #460]	; (800180c <printRadioSettings+0x6dc>)
 8001640:	f00b fe86 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe fe49 	bl	80002e0 <strlen>
 800164e:	4603      	mov	r3, r0
 8001650:	b29a      	uxth	r2, r3
 8001652:	f107 0108 	add.w	r1, r7, #8
 8001656:	230a      	movs	r3, #10
 8001658:	4865      	ldr	r0, [pc, #404]	; (80017f0 <printRadioSettings+0x6c0>)
 800165a:	f007 fa5d 	bl	8008b18 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800165e:	2011      	movs	r0, #17
 8001660:	f7ff f910 	bl	8000884 <NRF24_read_register>
 8001664:	4603      	mov	r3, r0
 8001666:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800166a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800166e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	4966      	ldr	r1, [pc, #408]	; (8001810 <printRadioSettings+0x6e0>)
 8001678:	4618      	mov	r0, r3
 800167a:	f00b fe69 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800167e:	f107 0308 	add.w	r3, r7, #8
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe fe2c 	bl	80002e0 <strlen>
 8001688:	4603      	mov	r3, r0
 800168a:	b29a      	uxth	r2, r3
 800168c:	f107 0108 	add.w	r1, r7, #8
 8001690:	230a      	movs	r3, #10
 8001692:	4857      	ldr	r0, [pc, #348]	; (80017f0 <printRadioSettings+0x6c0>)
 8001694:	f007 fa40 	bl	8008b18 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8001698:	2012      	movs	r0, #18
 800169a:	f7ff f8f3 	bl	8000884 <NRF24_read_register>
 800169e:	4603      	mov	r3, r0
 80016a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	4958      	ldr	r1, [pc, #352]	; (8001814 <printRadioSettings+0x6e4>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f00b fe4c 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016b8:	f107 0308 	add.w	r3, r7, #8
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe fe0f 	bl	80002e0 <strlen>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	f107 0108 	add.w	r1, r7, #8
 80016ca:	230a      	movs	r3, #10
 80016cc:	4848      	ldr	r0, [pc, #288]	; (80017f0 <printRadioSettings+0x6c0>)
 80016ce:	f007 fa23 	bl	8008b18 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 80016d2:	2013      	movs	r0, #19
 80016d4:	f7ff f8d6 	bl	8000884 <NRF24_read_register>
 80016d8:	4603      	mov	r3, r0
 80016da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	494b      	ldr	r1, [pc, #300]	; (8001818 <printRadioSettings+0x6e8>)
 80016ec:	4618      	mov	r0, r3
 80016ee:	f00b fe2f 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe fdf2 	bl	80002e0 <strlen>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b29a      	uxth	r2, r3
 8001700:	f107 0108 	add.w	r1, r7, #8
 8001704:	230a      	movs	r3, #10
 8001706:	483a      	ldr	r0, [pc, #232]	; (80017f0 <printRadioSettings+0x6c0>)
 8001708:	f007 fa06 	bl	8008b18 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 800170c:	2014      	movs	r0, #20
 800170e:	f7ff f8b9 	bl	8000884 <NRF24_read_register>
 8001712:	4603      	mov	r3, r0
 8001714:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001718:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800171c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	493d      	ldr	r1, [pc, #244]	; (800181c <printRadioSettings+0x6ec>)
 8001726:	4618      	mov	r0, r3
 8001728:	f00b fe12 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe fdd5 	bl	80002e0 <strlen>
 8001736:	4603      	mov	r3, r0
 8001738:	b29a      	uxth	r2, r3
 800173a:	f107 0108 	add.w	r1, r7, #8
 800173e:	230a      	movs	r3, #10
 8001740:	482b      	ldr	r0, [pc, #172]	; (80017f0 <printRadioSettings+0x6c0>)
 8001742:	f007 f9e9 	bl	8008b18 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8001746:	2015      	movs	r0, #21
 8001748:	f7ff f89c 	bl	8000884 <NRF24_read_register>
 800174c:	4603      	mov	r3, r0
 800174e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001752:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	4930      	ldr	r1, [pc, #192]	; (8001820 <printRadioSettings+0x6f0>)
 8001760:	4618      	mov	r0, r3
 8001762:	f00b fdf5 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe fdb8 	bl	80002e0 <strlen>
 8001770:	4603      	mov	r3, r0
 8001772:	b29a      	uxth	r2, r3
 8001774:	f107 0108 	add.w	r1, r7, #8
 8001778:	230a      	movs	r3, #10
 800177a:	481d      	ldr	r0, [pc, #116]	; (80017f0 <printRadioSettings+0x6c0>)
 800177c:	f007 f9cc 	bl	8008b18 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001780:	2016      	movs	r0, #22
 8001782:	f7ff f87f 	bl	8000884 <NRF24_read_register>
 8001786:	4603      	mov	r3, r0
 8001788:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800178c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001790:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001794:	f107 0308 	add.w	r3, r7, #8
 8001798:	4922      	ldr	r1, [pc, #136]	; (8001824 <printRadioSettings+0x6f4>)
 800179a:	4618      	mov	r0, r3
 800179c:	f00b fdd8 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017a0:	f107 0308 	add.w	r3, r7, #8
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fd9b 	bl	80002e0 <strlen>
 80017aa:	4603      	mov	r3, r0
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	f107 0108 	add.w	r1, r7, #8
 80017b2:	230a      	movs	r3, #10
 80017b4:	480e      	ldr	r0, [pc, #56]	; (80017f0 <printRadioSettings+0x6c0>)
 80017b6:	f007 f9af 	bl	8008b18 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80017ba:	201c      	movs	r0, #28
 80017bc:	f7ff f862 	bl	8000884 <NRF24_read_register>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017ca:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	bfcc      	ite	gt
 80017d2:	2301      	movgt	r3, #1
 80017d4:	2300      	movle	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017de:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bfcc      	ite	gt
 80017e6:	2301      	movgt	r3, #1
 80017e8:	2300      	movle	r3, #0
 80017ea:	e01d      	b.n	8001828 <printRadioSettings+0x6f8>
 80017ec:	0800f8d0 	.word	0x0800f8d0
 80017f0:	240002ac 	.word	0x240002ac
 80017f4:	0800f8e4 	.word	0x0800f8e4
 80017f8:	0800f914 	.word	0x0800f914
 80017fc:	0800f944 	.word	0x0800f944
 8001800:	0800f96c 	.word	0x0800f96c
 8001804:	0800f994 	.word	0x0800f994
 8001808:	0800f9bc 	.word	0x0800f9bc
 800180c:	0800f9e4 	.word	0x0800f9e4
 8001810:	0800fa10 	.word	0x0800fa10
 8001814:	0800fa2c 	.word	0x0800fa2c
 8001818:	0800fa48 	.word	0x0800fa48
 800181c:	0800fa64 	.word	0x0800fa64
 8001820:	0800fa80 	.word	0x0800fa80
 8001824:	0800fa9c 	.word	0x0800fa9c
 8001828:	b2db      	uxtb	r3, r3
 800182a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800182c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001830:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001834:	2b00      	cmp	r3, #0
 8001836:	bfcc      	ite	gt
 8001838:	2301      	movgt	r3, #1
 800183a:	2300      	movle	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001840:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001844:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001848:	2b00      	cmp	r3, #0
 800184a:	bfcc      	ite	gt
 800184c:	2301      	movgt	r3, #1
 800184e:	2300      	movle	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001854:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001858:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800185c:	2b00      	cmp	r3, #0
 800185e:	bfcc      	ite	gt
 8001860:	2301      	movgt	r3, #1
 8001862:	2300      	movle	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001868:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800186c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001870:	2b00      	cmp	r3, #0
 8001872:	bfcc      	ite	gt
 8001874:	2301      	movgt	r3, #1
 8001876:	2300      	movle	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f107 0008 	add.w	r0, r7, #8
 800187e:	9303      	str	r3, [sp, #12]
 8001880:	9402      	str	r4, [sp, #8]
 8001882:	9101      	str	r1, [sp, #4]
 8001884:	9200      	str	r2, [sp, #0]
 8001886:	4633      	mov	r3, r6
 8001888:	462a      	mov	r2, r5
 800188a:	4936      	ldr	r1, [pc, #216]	; (8001964 <printRadioSettings+0x834>)
 800188c:	f00b fd60 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001890:	f107 0308 	add.w	r3, r7, #8
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fd23 	bl	80002e0 <strlen>
 800189a:	4603      	mov	r3, r0
 800189c:	b29a      	uxth	r2, r3
 800189e:	f107 0108 	add.w	r1, r7, #8
 80018a2:	230a      	movs	r3, #10
 80018a4:	4830      	ldr	r0, [pc, #192]	; (8001968 <printRadioSettings+0x838>)
 80018a6:	f007 f937 	bl	8008b18 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80018aa:	201d      	movs	r0, #29
 80018ac:	f7fe ffea 	bl	8000884 <NRF24_read_register>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80018b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d006      	beq.n	80018d0 <printRadioSettings+0x7a0>
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	4929      	ldr	r1, [pc, #164]	; (800196c <printRadioSettings+0x83c>)
 80018c8:	4618      	mov	r0, r3
 80018ca:	f00b fd41 	bl	800d350 <siprintf>
 80018ce:	e005      	b.n	80018dc <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	4926      	ldr	r1, [pc, #152]	; (8001970 <printRadioSettings+0x840>)
 80018d6:	4618      	mov	r0, r3
 80018d8:	f00b fd3a 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018dc:	f107 0308 	add.w	r3, r7, #8
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fcfd 	bl	80002e0 <strlen>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	f107 0108 	add.w	r1, r7, #8
 80018ee:	230a      	movs	r3, #10
 80018f0:	481d      	ldr	r0, [pc, #116]	; (8001968 <printRadioSettings+0x838>)
 80018f2:	f007 f911 	bl	8008b18 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80018f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d006      	beq.n	8001910 <printRadioSettings+0x7e0>
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	491b      	ldr	r1, [pc, #108]	; (8001974 <printRadioSettings+0x844>)
 8001908:	4618      	mov	r0, r3
 800190a:	f00b fd21 	bl	800d350 <siprintf>
 800190e:	e005      	b.n	800191c <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001910:	f107 0308 	add.w	r3, r7, #8
 8001914:	4918      	ldr	r1, [pc, #96]	; (8001978 <printRadioSettings+0x848>)
 8001916:	4618      	mov	r0, r3
 8001918:	f00b fd1a 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800191c:	f107 0308 	add.w	r3, r7, #8
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fcdd 	bl	80002e0 <strlen>
 8001926:	4603      	mov	r3, r0
 8001928:	b29a      	uxth	r2, r3
 800192a:	f107 0108 	add.w	r1, r7, #8
 800192e:	230a      	movs	r3, #10
 8001930:	480d      	ldr	r0, [pc, #52]	; (8001968 <printRadioSettings+0x838>)
 8001932:	f007 f8f1 	bl	8008b18 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n****************\r\n");
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	4910      	ldr	r1, [pc, #64]	; (800197c <printRadioSettings+0x84c>)
 800193c:	4618      	mov	r0, r3
 800193e:	f00b fd07 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fcca 	bl	80002e0 <strlen>
 800194c:	4603      	mov	r3, r0
 800194e:	b29a      	uxth	r2, r3
 8001950:	f107 0108 	add.w	r1, r7, #8
 8001954:	230a      	movs	r3, #10
 8001956:	4804      	ldr	r0, [pc, #16]	; (8001968 <printRadioSettings+0x838>)
 8001958:	f007 f8de 	bl	8008b18 <HAL_UART_Transmit>
}
 800195c:	bf00      	nop
 800195e:	3774      	adds	r7, #116	; 0x74
 8001960:	46bd      	mov	sp, r7
 8001962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001964:	0800fab8 	.word	0x0800fab8
 8001968:	240002ac 	.word	0x240002ac
 800196c:	0800fb04 	.word	0x0800fb04
 8001970:	0800fb1c 	.word	0x0800fb1c
 8001974:	0800fb34 	.word	0x0800fb34
 8001978:	0800fb50 	.word	0x0800fb50
 800197c:	0800f740 	.word	0x0800f740

08001980 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001980:	b084      	sub	sp, #16
 8001982:	b580      	push	{r7, lr}
 8001984:	af00      	add	r7, sp, #0
 8001986:	f107 0c08 	add.w	ip, r7, #8
 800198a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <nrf24_DebugUART_Init+0x2c>)
 8001990:	4618      	mov	r0, r3
 8001992:	f107 0308 	add.w	r3, r7, #8
 8001996:	2290      	movs	r2, #144	; 0x90
 8001998:	4619      	mov	r1, r3
 800199a:	f00a ffbf 	bl	800c91c <memcpy>
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019a6:	b004      	add	sp, #16
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	240002ac 	.word	0x240002ac

080019b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4a07      	ldr	r2, [pc, #28]	; (80019dc <vApplicationGetIdleTaskMemory+0x2c>)
 80019c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	4a06      	ldr	r2, [pc, #24]	; (80019e0 <vApplicationGetIdleTaskMemory+0x30>)
 80019c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2280      	movs	r2, #128	; 0x80
 80019cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	2400033c 	.word	0x2400033c
 80019e0:	24000390 	.word	0x24000390

080019e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e4:	b5b0      	push	{r4, r5, r7, lr}
 80019e6:	b09c      	sub	sp, #112	; 0x70
 80019e8:	af00      	add	r7, sp, #0

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ea:	f001 fb3b 	bl	8003064 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ee:	f000 f891 	bl	8001b14 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80019f2:	4b3e      	ldr	r3, [pc, #248]	; (8001aec <main+0x108>)
 80019f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f8:	4a3c      	ldr	r2, [pc, #240]	; (8001aec <main+0x108>)
 80019fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a02:	4b3a      	ldr	r3, [pc, #232]	; (8001aec <main+0x108>)
 8001a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001a10:	2000      	movs	r0, #0
 8001a12:	f002 fccb 	bl	80043ac <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001a16:	2100      	movs	r1, #0
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f002 fce1 	bl	80043e0 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a1e:	f000 fb7f 	bl	8002120 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001a22:	f000 fb31 	bl	8002088 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8001a26:	f000 f9e5 	bl	8001df4 <MX_SPI5_Init>
  MX_FDCAN1_Init();
 8001a2a:	f000 f8ef 	bl	8001c0c <MX_FDCAN1_Init>
  MX_I2C4_Init();
 8001a2e:	f000 f9a1 	bl	8001d74 <MX_I2C4_Init>
  MX_TIM16_Init();
 8001a32:	f000 fa35 	bl	8001ea0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001a36:	f000 faad 	bl	8001f94 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
	Tasks_Init();
 8001a3a:	f000 fc69 	bl	8002310 <Tasks_Init>
	Task2_Init();
 8001a3e:	f000 fca7 	bl	8002390 <Task2_Init>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
	osMutexDef(Mutex1);
 8001a42:	2300      	movs	r3, #0
 8001a44:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a46:	2300      	movs	r3, #0
 8001a48:	66fb      	str	r3, [r7, #108]	; 0x6c
	//osMutexDef(Mutex2);
	Mutex1Handle = osMutexCreate(osMutex(Mutex1));
 8001a4a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f008 f9a9 	bl	8009da6 <osMutexCreate>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4a26      	ldr	r2, [pc, #152]	; (8001af0 <main+0x10c>)
 8001a58:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	osMessageQDef(msgQueue, 4, positionMessage);
 8001a5a:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <main+0x110>)
 8001a5c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001a60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	msgQueueHandle = osMessageCreate(osMessageQ(msgQueue), NULL);
 8001a66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f008 fa37 	bl	8009ee0 <osMessageCreate>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4a20      	ldr	r2, [pc, #128]	; (8001af8 <main+0x114>)
 8001a76:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
	osThreadDef(task1, startTask1, 4, 0, 384);
 8001a78:	4b20      	ldr	r3, [pc, #128]	; (8001afc <main+0x118>)
 8001a7a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001a7e:	461d      	mov	r5, r3
 8001a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	tarea1Handle = osThreadCreate(osThread(task1), NULL);
 8001a8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f008 f927 	bl	8009ce6 <osThreadCreate>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4a19      	ldr	r2, [pc, #100]	; (8001b00 <main+0x11c>)
 8001a9c:	6013      	str	r3, [r2, #0]

	osThreadDef(task3, startTask3, 2, 0, 384);
 8001a9e:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <main+0x120>)
 8001aa0:	f107 0420 	add.w	r4, r7, #32
 8001aa4:	461d      	mov	r5, r3
 8001aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aaa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001aae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	tarea3Handle = osThreadCreate(osThread(task3), NULL);
 8001ab2:	f107 0320 	add.w	r3, r7, #32
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f008 f914 	bl	8009ce6 <osThreadCreate>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4a11      	ldr	r2, [pc, #68]	; (8001b08 <main+0x124>)
 8001ac2:	6013      	str	r3, [r2, #0]

	osThreadDef(task2, startTask2, 3, 0, 384);
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <main+0x128>)
 8001ac6:	1d3c      	adds	r4, r7, #4
 8001ac8:	461d      	mov	r5, r3
 8001aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ace:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ad2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	tarea2Handle = osThreadCreate(osThread(task2), NULL);
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f008 f903 	bl	8009ce6 <osThreadCreate>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <main+0x12c>)
 8001ae4:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001ae6:	f008 f8f7 	bl	8009cd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001aea:	e7fe      	b.n	8001aea <main+0x106>
 8001aec:	58024400 	.word	0x58024400
 8001af0:	2400083c 	.word	0x2400083c
 8001af4:	0800fc80 	.word	0x0800fc80
 8001af8:	24000838 	.word	0x24000838
 8001afc:	0800fc90 	.word	0x0800fc90
 8001b00:	2400082c 	.word	0x2400082c
 8001b04:	0800fcac 	.word	0x0800fcac
 8001b08:	24000834 	.word	0x24000834
 8001b0c:	0800fcc8 	.word	0x0800fcc8
 8001b10:	24000830 	.word	0x24000830

08001b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b09c      	sub	sp, #112	; 0x70
 8001b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1e:	224c      	movs	r2, #76	; 0x4c
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f00a ff08 	bl	800c938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f00a ff02 	bl	800c938 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001b34:	2004      	movs	r0, #4
 8001b36:	f002 fd8f 	bl	8004658 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	4b31      	ldr	r3, [pc, #196]	; (8001c04 <SystemClock_Config+0xf0>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	4a30      	ldr	r2, [pc, #192]	; (8001c04 <SystemClock_Config+0xf0>)
 8001b44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b48:	6193      	str	r3, [r2, #24]
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <SystemClock_Config+0xf0>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	4b2c      	ldr	r3, [pc, #176]	; (8001c08 <SystemClock_Config+0xf4>)
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	4a2b      	ldr	r2, [pc, #172]	; (8001c08 <SystemClock_Config+0xf4>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001b60:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <SystemClock_Config+0xf4>)
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b6c:	bf00      	nop
 8001b6e:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <SystemClock_Config+0xf0>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b7a:	d1f8      	bne.n	8001b6e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001b80:	2301      	movs	r3, #1
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b84:	2340      	movs	r3, #64	; 0x40
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b90:	2304      	movs	r3, #4
 8001b92:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001b94:	233c      	movs	r3, #60	; 0x3c
 8001b96:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 8001b9c:	2318      	movs	r3, #24
 8001b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001ba4:	230c      	movs	r3, #12
 8001ba6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 fda9 	bl	800470c <HAL_RCC_OscConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001bc0:	f000 fd32 	bl	8002628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc4:	233f      	movs	r3, #63	; 0x3f
 8001bc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001bd4:	2340      	movs	r3, #64	; 0x40
 8001bd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001bd8:	2340      	movs	r3, #64	; 0x40
 8001bda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001be2:	2340      	movs	r3, #64	; 0x40
 8001be4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2104      	movs	r1, #4
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 f9bc 	bl	8004f68 <HAL_RCC_ClockConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001bf6:	f000 fd17 	bl	8002628 <Error_Handler>
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3770      	adds	r7, #112	; 0x70
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	58024800 	.word	0x58024800
 8001c08:	58000400 	.word	0x58000400

08001c0c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001c12:	4b54      	ldr	r3, [pc, #336]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c14:	4a54      	ldr	r2, [pc, #336]	; (8001d68 <MX_FDCAN1_Init+0x15c>)
 8001c16:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001c18:	4b52      	ldr	r3, [pc, #328]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001c1e:	4b51      	ldr	r3, [pc, #324]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001c24:	4b4f      	ldr	r3, [pc, #316]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001c2a:	4b4e      	ldr	r3, [pc, #312]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8001c30:	4b4c      	ldr	r3, [pc, #304]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8001c36:	4b4b      	ldr	r3, [pc, #300]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c38:	2202      	movs	r2, #2
 8001c3a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8001c3c:	4b49      	ldr	r3, [pc, #292]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c3e:	2208      	movs	r2, #8
 8001c40:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 8001c42:	4b48      	ldr	r3, [pc, #288]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c44:	221f      	movs	r2, #31
 8001c46:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8001c48:	4b46      	ldr	r3, [pc, #280]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001c4e:	4b45      	ldr	r3, [pc, #276]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001c54:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001c5a:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001c60:	4b40      	ldr	r3, [pc, #256]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001c66:	4b3f      	ldr	r3, [pc, #252]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8001c6c:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001c72:	4b3c      	ldr	r3, [pc, #240]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8001c78:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001c7e:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c80:	2204      	movs	r2, #4
 8001c82:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001c84:	4b37      	ldr	r3, [pc, #220]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001c8a:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001c90:	4b34      	ldr	r3, [pc, #208]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001c96:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c98:	2204      	movs	r2, #4
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001c9c:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001ca2:	4b30      	ldr	r3, [pc, #192]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8001ca8:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001cae:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001cb4:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001cba:	482a      	ldr	r0, [pc, #168]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001cbc:	f001 fb78 	bl	80033b0 <HAL_FDCAN_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8001cc6:	f000 fcaf 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  /*AAO+*/
    /* Configure Rx filter */
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001cca:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <MX_FDCAN1_Init+0x160>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 8001cd0:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <MX_FDCAN1_Init+0x160>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001cd6:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <MX_FDCAN1_Init+0x160>)
 8001cd8:	2202      	movs	r2, #2
 8001cda:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001cdc:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <MX_FDCAN1_Init+0x160>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterID1 = 0x000;
 8001ce2:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <MX_FDCAN1_Init+0x160>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterID2 = 0x000;
 8001ce8:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <MX_FDCAN1_Init+0x160>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
    /* Configure global filter to reject all non-matching frames */
    HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE,
 8001cee:	2301      	movs	r3, #1
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	481a      	ldr	r0, [pc, #104]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001cfa:	f001 fdad 	bl	8003858 <HAL_FDCAN_ConfigGlobalFilter>
    FDCAN_REJECT_REMOTE);
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001cfe:	491b      	ldr	r1, [pc, #108]	; (8001d6c <MX_FDCAN1_Init+0x160>)
 8001d00:	4818      	ldr	r0, [pc, #96]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001d02:	f001 fd33 	bl	800376c <HAL_FDCAN_ConfigFilter>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_FDCAN1_Init+0x104>
    {
  	  /* Filter configuration Error */
  	  Error_Handler();
 8001d0c:	f000 fc8c 	bl	8002628 <Error_Handler>
    }
    /* Start the FDCAN module */
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001d10:	4814      	ldr	r0, [pc, #80]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001d12:	f001 fdce 	bl	80038b2 <HAL_FDCAN_Start>
    }
    /* Start Error */
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8001d16:	2200      	movs	r2, #0
 8001d18:	2101      	movs	r1, #1
 8001d1a:	4812      	ldr	r0, [pc, #72]	; (8001d64 <MX_FDCAN1_Init+0x158>)
 8001d1c:	f001 ff62 	bl	8003be4 <HAL_FDCAN_ActivateNotification>
    }
    /* Notification Error */
  	  /* Configure Tx buffer message */
  	  TxHeader.Identifier = 0x111;
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <MX_FDCAN1_Init+0x164>)
 8001d22:	f240 1211 	movw	r2, #273	; 0x111
 8001d26:	601a      	str	r2, [r3, #0]
  	  TxHeader.IdType = FDCAN_STANDARD_ID;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_FDCAN1_Init+0x164>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	605a      	str	r2, [r3, #4]
  	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <MX_FDCAN1_Init+0x164>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  	  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_FDCAN1_Init+0x164>)
 8001d36:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001d3a:	60da      	str	r2, [r3, #12]
  	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_FDCAN1_Init+0x164>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]
  	  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <MX_FDCAN1_Init+0x164>)
 8001d44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d48:	615a      	str	r2, [r3, #20]
  	  TxHeader.FDFormat = FDCAN_FD_CAN;
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_FDCAN1_Init+0x164>)
 8001d4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d50:	619a      	str	r2, [r3, #24]
  	  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <MX_FDCAN1_Init+0x164>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	61da      	str	r2, [r3, #28]
  	  TxHeader.MessageMarker = 0x00;
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <MX_FDCAN1_Init+0x164>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	621a      	str	r2, [r3, #32]
  	  /*AAO-*/
  /* USER CODE END FDCAN1_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	24000590 	.word	0x24000590
 8001d68:	4000a000 	.word	0x4000a000
 8001d6c:	24000840 	.word	0x24000840
 8001d70:	24000860 	.word	0x24000860

08001d74 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <MX_I2C4_Init+0x74>)
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <MX_I2C4_Init+0x78>)
 8001d7c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <MX_I2C4_Init+0x74>)
 8001d80:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <MX_I2C4_Init+0x7c>)
 8001d82:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <MX_I2C4_Init+0x74>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <MX_I2C4_Init+0x74>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d90:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <MX_I2C4_Init+0x74>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <MX_I2C4_Init+0x74>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <MX_I2C4_Init+0x74>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <MX_I2C4_Init+0x74>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <MX_I2C4_Init+0x74>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001dae:	480e      	ldr	r0, [pc, #56]	; (8001de8 <MX_I2C4_Init+0x74>)
 8001db0:	f002 fb2a 	bl	8004408 <HAL_I2C_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001dba:	f000 fc35 	bl	8002628 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4809      	ldr	r0, [pc, #36]	; (8001de8 <MX_I2C4_Init+0x74>)
 8001dc2:	f002 fbb1 	bl	8004528 <HAL_I2CEx_ConfigAnalogFilter>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001dcc:	f000 fc2c 	bl	8002628 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4805      	ldr	r0, [pc, #20]	; (8001de8 <MX_I2C4_Init+0x74>)
 8001dd4:	f002 fbf3 	bl	80045be <HAL_I2CEx_ConfigDigitalFilter>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001dde:	f000 fc23 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	24000630 	.word	0x24000630
 8001dec:	58001c00 	.word	0x58001c00
 8001df0:	307075b1 	.word	0x307075b1

08001df4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001df8:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001dfa:	4a28      	ldr	r2, [pc, #160]	; (8001e9c <MX_SPI5_Init+0xa8>)
 8001dfc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001dfe:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e00:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e04:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001e06:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e0c:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e0e:	2207      	movs	r2, #7
 8001e10:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e12:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001e1e:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e20:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e24:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e26:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e28:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001e2c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e34:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e3a:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001e40:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e46:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e4c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e54:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e60:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e66:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e78:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e84:	4804      	ldr	r0, [pc, #16]	; (8001e98 <MX_SPI5_Init+0xa4>)
 8001e86:	f004 ff63 	bl	8006d50 <HAL_SPI_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 8001e90:	f000 fbca 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	2400067c 	.word	0x2400067c
 8001e9c:	40015000 	.word	0x40015000

08001ea0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b092      	sub	sp, #72	; 0x48
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
 8001eb4:	611a      	str	r2, [r3, #16]
 8001eb6:	615a      	str	r2, [r3, #20]
 8001eb8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001eba:	463b      	mov	r3, r7
 8001ebc:	222c      	movs	r2, #44	; 0x2c
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f00a fd39 	bl	800c938 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001ec6:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <MX_TIM16_Init+0xec>)
 8001ec8:	4a31      	ldr	r2, [pc, #196]	; (8001f90 <MX_TIM16_Init+0xf0>)
 8001eca:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 239;
 8001ecc:	4b2f      	ldr	r3, [pc, #188]	; (8001f8c <MX_TIM16_Init+0xec>)
 8001ece:	22ef      	movs	r2, #239	; 0xef
 8001ed0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed2:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <MX_TIM16_Init+0xec>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 8001ed8:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <MX_TIM16_Init+0xec>)
 8001eda:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001ede:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <MX_TIM16_Init+0xec>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ee6:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <MX_TIM16_Init+0xec>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <MX_TIM16_Init+0xec>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001ef2:	4826      	ldr	r0, [pc, #152]	; (8001f8c <MX_TIM16_Init+0xec>)
 8001ef4:	f005 fed1 	bl	8007c9a <HAL_TIM_Base_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001efe:	f000 fb93 	bl	8002628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001f02:	4822      	ldr	r0, [pc, #136]	; (8001f8c <MX_TIM16_Init+0xec>)
 8001f04:	f005 ff20 	bl	8007d48 <HAL_TIM_PWM_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001f0e:	f000 fb8b 	bl	8002628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f12:	2360      	movs	r3, #96	; 0x60
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 1500;
 8001f16:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001f1a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f20:	2300      	movs	r3, #0
 8001f22:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f34:	2200      	movs	r2, #0
 8001f36:	4619      	mov	r1, r3
 8001f38:	4814      	ldr	r0, [pc, #80]	; (8001f8c <MX_TIM16_Init+0xec>)
 8001f3a:	f006 f875 	bl	8008028 <HAL_TIM_PWM_ConfigChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8001f44:	f000 fb70 	bl	8002628 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4807      	ldr	r0, [pc, #28]	; (8001f8c <MX_TIM16_Init+0xec>)
 8001f70:	f006 fd04 	bl	800897c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8001f7a:	f000 fb55 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001f7e:	4803      	ldr	r0, [pc, #12]	; (8001f8c <MX_TIM16_Init+0xec>)
 8001f80:	f000 fcf4 	bl	800296c <HAL_TIM_MspPostInit>

}
 8001f84:	bf00      	nop
 8001f86:	3748      	adds	r7, #72	; 0x48
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	24000704 	.word	0x24000704
 8001f90:	40014400 	.word	0x40014400

08001f94 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b092      	sub	sp, #72	; 0x48
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
 8001fa8:	611a      	str	r2, [r3, #16]
 8001faa:	615a      	str	r2, [r3, #20]
 8001fac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fae:	463b      	mov	r3, r7
 8001fb0:	222c      	movs	r2, #44	; 0x2c
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f00a fcbf 	bl	800c938 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001fba:	4b31      	ldr	r3, [pc, #196]	; (8002080 <MX_TIM17_Init+0xec>)
 8001fbc:	4a31      	ldr	r2, [pc, #196]	; (8002084 <MX_TIM17_Init+0xf0>)
 8001fbe:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 239;
 8001fc0:	4b2f      	ldr	r3, [pc, #188]	; (8002080 <MX_TIM17_Init+0xec>)
 8001fc2:	22ef      	movs	r2, #239	; 0xef
 8001fc4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc6:	4b2e      	ldr	r3, [pc, #184]	; (8002080 <MX_TIM17_Init+0xec>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 19999;
 8001fcc:	4b2c      	ldr	r3, [pc, #176]	; (8002080 <MX_TIM17_Init+0xec>)
 8001fce:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001fd2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd4:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <MX_TIM17_Init+0xec>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001fda:	4b29      	ldr	r3, [pc, #164]	; (8002080 <MX_TIM17_Init+0xec>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe0:	4b27      	ldr	r3, [pc, #156]	; (8002080 <MX_TIM17_Init+0xec>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001fe6:	4826      	ldr	r0, [pc, #152]	; (8002080 <MX_TIM17_Init+0xec>)
 8001fe8:	f005 fe57 	bl	8007c9a <HAL_TIM_Base_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001ff2:	f000 fb19 	bl	8002628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001ff6:	4822      	ldr	r0, [pc, #136]	; (8002080 <MX_TIM17_Init+0xec>)
 8001ff8:	f005 fea6 	bl	8007d48 <HAL_TIM_PWM_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002002:	f000 fb11 	bl	8002628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002006:	2360      	movs	r3, #96	; 0x60
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800200e:	2300      	movs	r3, #0
 8002010:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002012:	2300      	movs	r3, #0
 8002014:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002026:	2200      	movs	r2, #0
 8002028:	4619      	mov	r1, r3
 800202a:	4815      	ldr	r0, [pc, #84]	; (8002080 <MX_TIM17_Init+0xec>)
 800202c:	f005 fffc 	bl	8008028 <HAL_TIM_PWM_ConfigChannel>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8002036:	f000 faf7 	bl	8002628 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800204e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002052:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800205c:	463b      	mov	r3, r7
 800205e:	4619      	mov	r1, r3
 8002060:	4807      	ldr	r0, [pc, #28]	; (8002080 <MX_TIM17_Init+0xec>)
 8002062:	f006 fc8b 	bl	800897c <HAL_TIMEx_ConfigBreakDeadTime>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 800206c:	f000 fadc 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002070:	4803      	ldr	r0, [pc, #12]	; (8002080 <MX_TIM17_Init+0xec>)
 8002072:	f000 fc7b 	bl	800296c <HAL_TIM_MspPostInit>

}
 8002076:	bf00      	nop
 8002078:	3748      	adds	r7, #72	; 0x48
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	24000750 	.word	0x24000750
 8002084:	40014800 	.word	0x40014800

08002088 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800208c:	4b22      	ldr	r3, [pc, #136]	; (8002118 <MX_USART3_UART_Init+0x90>)
 800208e:	4a23      	ldr	r2, [pc, #140]	; (800211c <MX_USART3_UART_Init+0x94>)
 8002090:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002092:	4b21      	ldr	r3, [pc, #132]	; (8002118 <MX_USART3_UART_Init+0x90>)
 8002094:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002098:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800209a:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <MX_USART3_UART_Init+0x90>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <MX_USART3_UART_Init+0x90>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020a6:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <MX_USART3_UART_Init+0x90>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020ac:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <MX_USART3_UART_Init+0x90>)
 80020ae:	220c      	movs	r2, #12
 80020b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b2:	4b19      	ldr	r3, [pc, #100]	; (8002118 <MX_USART3_UART_Init+0x90>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b8:	4b17      	ldr	r3, [pc, #92]	; (8002118 <MX_USART3_UART_Init+0x90>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020be:	4b16      	ldr	r3, [pc, #88]	; (8002118 <MX_USART3_UART_Init+0x90>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020c4:	4b14      	ldr	r3, [pc, #80]	; (8002118 <MX_USART3_UART_Init+0x90>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <MX_USART3_UART_Init+0x90>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020d0:	4811      	ldr	r0, [pc, #68]	; (8002118 <MX_USART3_UART_Init+0x90>)
 80020d2:	f006 fcd1 	bl	8008a78 <HAL_UART_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80020dc:	f000 faa4 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e0:	2100      	movs	r1, #0
 80020e2:	480d      	ldr	r0, [pc, #52]	; (8002118 <MX_USART3_UART_Init+0x90>)
 80020e4:	f007 fd04 	bl	8009af0 <HAL_UARTEx_SetTxFifoThreshold>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80020ee:	f000 fa9b 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020f2:	2100      	movs	r1, #0
 80020f4:	4808      	ldr	r0, [pc, #32]	; (8002118 <MX_USART3_UART_Init+0x90>)
 80020f6:	f007 fd39 	bl	8009b6c <HAL_UARTEx_SetRxFifoThreshold>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002100:	f000 fa92 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002104:	4804      	ldr	r0, [pc, #16]	; (8002118 <MX_USART3_UART_Init+0x90>)
 8002106:	f007 fcba 	bl	8009a7e <HAL_UARTEx_DisableFifoMode>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002110:	f000 fa8a 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	2400079c 	.word	0x2400079c
 800211c:	40004800 	.word	0x40004800

08002120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	; 0x30
 8002124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002126:	f107 031c 	add.w	r3, r7, #28
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
 8002134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002136:	4b42      	ldr	r3, [pc, #264]	; (8002240 <MX_GPIO_Init+0x120>)
 8002138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213c:	4a40      	ldr	r2, [pc, #256]	; (8002240 <MX_GPIO_Init+0x120>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002146:	4b3e      	ldr	r3, [pc, #248]	; (8002240 <MX_GPIO_Init+0x120>)
 8002148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002154:	4b3a      	ldr	r3, [pc, #232]	; (8002240 <MX_GPIO_Init+0x120>)
 8002156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215a:	4a39      	ldr	r2, [pc, #228]	; (8002240 <MX_GPIO_Init+0x120>)
 800215c:	f043 0320 	orr.w	r3, r3, #32
 8002160:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002164:	4b36      	ldr	r3, [pc, #216]	; (8002240 <MX_GPIO_Init+0x120>)
 8002166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216a:	f003 0320 	and.w	r3, r3, #32
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002172:	4b33      	ldr	r3, [pc, #204]	; (8002240 <MX_GPIO_Init+0x120>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002178:	4a31      	ldr	r2, [pc, #196]	; (8002240 <MX_GPIO_Init+0x120>)
 800217a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800217e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002182:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <MX_GPIO_Init+0x120>)
 8002184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <MX_GPIO_Init+0x120>)
 8002192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002196:	4a2a      	ldr	r2, [pc, #168]	; (8002240 <MX_GPIO_Init+0x120>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021a0:	4b27      	ldr	r3, [pc, #156]	; (8002240 <MX_GPIO_Init+0x120>)
 80021a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ae:	4b24      	ldr	r3, [pc, #144]	; (8002240 <MX_GPIO_Init+0x120>)
 80021b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b4:	4a22      	ldr	r2, [pc, #136]	; (8002240 <MX_GPIO_Init+0x120>)
 80021b6:	f043 0308 	orr.w	r3, r3, #8
 80021ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <MX_GPIO_Init+0x120>)
 80021c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021cc:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <MX_GPIO_Init+0x120>)
 80021ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d2:	4a1b      	ldr	r2, [pc, #108]	; (8002240 <MX_GPIO_Init+0x120>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021dc:	4b18      	ldr	r3, [pc, #96]	; (8002240 <MX_GPIO_Init+0x120>)
 80021de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDWay_GPIO_Port, LEDWay_Pin, GPIO_PIN_RESET);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2108      	movs	r1, #8
 80021ee:	4815      	ldr	r0, [pc, #84]	; (8002244 <MX_GPIO_Init+0x124>)
 80021f0:	f002 f8a8 	bl	8004344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nrf24_CE_Pin|nrf24_CSN_Pin, GPIO_PIN_RESET);
 80021f4:	2200      	movs	r2, #0
 80021f6:	21c0      	movs	r1, #192	; 0xc0
 80021f8:	4813      	ldr	r0, [pc, #76]	; (8002248 <MX_GPIO_Init+0x128>)
 80021fa:	f002 f8a3 	bl	8004344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDWay_Pin */
  GPIO_InitStruct.Pin = LEDWay_Pin;
 80021fe:	2308      	movs	r3, #8
 8002200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002202:	2301      	movs	r3, #1
 8002204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LEDWay_GPIO_Port, &GPIO_InitStruct);
 800220e:	f107 031c 	add.w	r3, r7, #28
 8002212:	4619      	mov	r1, r3
 8002214:	480b      	ldr	r0, [pc, #44]	; (8002244 <MX_GPIO_Init+0x124>)
 8002216:	f001 fee5 	bl	8003fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : nrf24_CE_Pin nrf24_CSN_Pin */
  GPIO_InitStruct.Pin = nrf24_CE_Pin|nrf24_CSN_Pin;
 800221a:	23c0      	movs	r3, #192	; 0xc0
 800221c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221e:	2301      	movs	r3, #1
 8002220:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	4805      	ldr	r0, [pc, #20]	; (8002248 <MX_GPIO_Init+0x128>)
 8002232:	f001 fed7 	bl	8003fe4 <HAL_GPIO_Init>

}
 8002236:	bf00      	nop
 8002238:	3730      	adds	r7, #48	; 0x30
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	58024400 	.word	0x58024400
 8002244:	58020000 	.word	0x58020000
 8002248:	58020800 	.word	0x58020800

0800224c <startTask1>:

/* USER CODE BEGIN 4 */
void startTask1(void const *argument) { // Read Arduino CAN Message
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	//positionMessage msg;
    for (;;) {
        if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8002254:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <startTask1+0xa4>)
 8002256:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <startTask1+0xa8>)
 8002258:	2140      	movs	r1, #64	; 0x40
 800225a:	4827      	ldr	r0, [pc, #156]	; (80022f8 <startTask1+0xac>)
 800225c:	f001 fb54 	bl	8003908 <HAL_FDCAN_GetRxMessage>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d13f      	bne.n	80022e6 <startTask1+0x9a>
            if (osMutexWait(Mutex1Handle, osWaitForever) == osOK) {
 8002266:	4b25      	ldr	r3, [pc, #148]	; (80022fc <startTask1+0xb0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f04f 31ff 	mov.w	r1, #4294967295
 800226e:	4618      	mov	r0, r3
 8002270:	f007 fdb2 	bl	8009dd8 <osMutexWait>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d132      	bne.n	80022e0 <startTask1+0x94>
                // Decodificar los datos recibidos para encoderPosition (uint32_t)
            	uint32_t encoderPosition = (uint32_t)(
                    ((uint32_t)RxData[0] << 24) |
 800227a:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <startTask1+0xa4>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	061a      	lsls	r2, r3, #24
                    ((uint32_t)RxData[1] << 16) |
 8002280:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <startTask1+0xa4>)
 8002282:	785b      	ldrb	r3, [r3, #1]
 8002284:	041b      	lsls	r3, r3, #16
                    ((uint32_t)RxData[0] << 24) |
 8002286:	431a      	orrs	r2, r3
                    ((uint32_t)RxData[2] << 8) |
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <startTask1+0xa4>)
 800228a:	789b      	ldrb	r3, [r3, #2]
 800228c:	021b      	lsls	r3, r3, #8
                    ((uint32_t)RxData[1] << 16) |
 800228e:	4313      	orrs	r3, r2
                    ((uint32_t)RxData[3])
 8002290:	4a17      	ldr	r2, [pc, #92]	; (80022f0 <startTask1+0xa4>)
 8002292:	78d2      	ldrb	r2, [r2, #3]
            	uint32_t encoderPosition = (uint32_t)(
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
                );

                // Decodificar los datos recibidos para distanceTraveled (uint32_t)
                uint32_t distanceRaw = (uint32_t)(
                    ((uint32_t)RxData[4] << 24) |
 8002298:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <startTask1+0xa4>)
 800229a:	791b      	ldrb	r3, [r3, #4]
 800229c:	061a      	lsls	r2, r3, #24
                    ((uint32_t)RxData[5] << 16) |
 800229e:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <startTask1+0xa4>)
 80022a0:	795b      	ldrb	r3, [r3, #5]
 80022a2:	041b      	lsls	r3, r3, #16
                    ((uint32_t)RxData[4] << 24) |
 80022a4:	431a      	orrs	r2, r3
                    ((uint32_t)RxData[6] << 8) |
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <startTask1+0xa4>)
 80022a8:	799b      	ldrb	r3, [r3, #6]
 80022aa:	021b      	lsls	r3, r3, #8
                    ((uint32_t)RxData[5] << 16) |
 80022ac:	4313      	orrs	r3, r2
                    ((uint32_t)RxData[7])
 80022ae:	4a10      	ldr	r2, [pc, #64]	; (80022f0 <startTask1+0xa4>)
 80022b0:	79d2      	ldrb	r2, [r2, #7]
                uint32_t distanceRaw = (uint32_t)(
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60bb      	str	r3, [r7, #8]
                );

                // Convertir distanceRaw de milímetros a metros
                distanceTraveled = distanceRaw / 1000.0f;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	ee07 3a90 	vmov	s15, r3
 80022bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022c0:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002300 <startTask1+0xb4>
 80022c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022c8:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <startTask1+0xb8>)
 80022ca:	edc3 7a00 	vstr	s15, [r3]
                //msg.position = distanceTraveled;

                // Verificar los datos decodificados
                printf("\n\rDecoded Values:\n\r");
 80022ce:	480e      	ldr	r0, [pc, #56]	; (8002308 <startTask1+0xbc>)
 80022d0:	f00a ff7c 	bl	800d1cc <iprintf>
                //printf("  Encoder Position: %ld\n\r", encoderPosition); // Signed integer
                //printf("  Distance Traveled: %f meters\n\r", msg.position); // Unsigned float
                //osMessagePut(msgQueueHandle, (uint32_t)&msg, 1);

                osMutexRelease(Mutex1Handle); // Liberar el mutex después de usarlo
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <startTask1+0xb0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f007 fdcb 	bl	8009e74 <osMutexRelease>
 80022de:	e002      	b.n	80022e6 <startTask1+0x9a>
            } else {
                // Agregar un mensaje de error si no se puede obtener el mutex
                printf("Task1: Failed to acquire mutex\n");
 80022e0:	480a      	ldr	r0, [pc, #40]	; (800230c <startTask1+0xc0>)
 80022e2:	f00a fff9 	bl	800d2d8 <puts>
            }
        }
        osDelay(50); // Pausa de 10 ms para evitar sobrecargar la CPU
 80022e6:	2032      	movs	r0, #50	; 0x32
 80022e8:	f007 fd49 	bl	8009d7e <osDelay>
        if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 80022ec:	e7b2      	b.n	8002254 <startTask1+0x8>
 80022ee:	bf00      	nop
 80022f0:	240008ac 	.word	0x240008ac
 80022f4:	24000884 	.word	0x24000884
 80022f8:	24000590 	.word	0x24000590
 80022fc:	2400083c 	.word	0x2400083c
 8002300:	447a0000 	.word	0x447a0000
 8002304:	240008c8 	.word	0x240008c8
 8002308:	0800fce4 	.word	0x0800fce4
 800230c:	0800fcf8 	.word	0x0800fcf8

08002310 <Tasks_Init>:
    }
}


void Tasks_Init(void){
 8002310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002312:	b091      	sub	sp, #68	; 0x44
 8002314:	af10      	add	r7, sp, #64	; 0x40
	//Task 1
	MX_GPIO_Init();
 8002316:	f7ff ff03 	bl	8002120 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800231a:	f7ff feb5 	bl	8002088 <MX_USART3_UART_Init>
	MX_SPI5_Init();
 800231e:	f7ff fd69 	bl	8001df4 <MX_SPI5_Init>
	MX_FDCAN1_Init();
 8002322:	f7ff fc73 	bl	8001c0c <MX_FDCAN1_Init>
	MX_I2C4_Init();
 8002326:	f7ff fd25 	bl	8001d74 <MX_I2C4_Init>
	MX_TIM16_Init();
 800232a:	f7ff fdb9 	bl	8001ea0 <MX_TIM16_Init>
	MX_TIM17_Init();
 800232e:	f7ff fe31 	bl	8001f94 <MX_TIM17_Init>
	initServoTim(htim17);
 8002332:	4e15      	ldr	r6, [pc, #84]	; (8002388 <Tasks_Init+0x78>)
 8002334:	466d      	mov	r5, sp
 8002336:	f106 0410 	add.w	r4, r6, #16
 800233a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800233c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800233e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002346:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800234a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800234e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002352:	f000 fcc9 	bl	8002ce8 <initServoTim>
	initESCTim(htim16);
 8002356:	4e0d      	ldr	r6, [pc, #52]	; (800238c <Tasks_Init+0x7c>)
 8002358:	466d      	mov	r5, sp
 800235a:	f106 0410 	add.w	r4, r6, #16
 800235e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800236a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800236e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002372:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002376:	f000 fcdd 	bl	8002d34 <initESCTim>
	Task2_Init();
 800237a:	f000 f809 	bl	8002390 <Task2_Init>
}
 800237e:	bf00      	nop
 8002380:	3704      	adds	r7, #4
 8002382:	46bd      	mov	sp, r7
 8002384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002386:	bf00      	nop
 8002388:	24000750 	.word	0x24000750
 800238c:	24000704 	.word	0x24000704

08002390 <Task2_Init>:

void Task2_Init(void){
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b0a3      	sub	sp, #140	; 0x8c
 8002394:	af22      	add	r7, sp, #136	; 0x88
	NRF24_setPALevel(RF24_PA_0dB);
 8002396:	2003      	movs	r0, #3
 8002398:	f7fe fdc1 	bl	8000f1e <NRF24_setPALevel>
	NRF24_begin(GPIOC, nrf24_CSN_Pin, nrf24_CE_Pin, hspi5); // Ajusta según tu configuración de pines
 800239c:	4c1a      	ldr	r4, [pc, #104]	; (8002408 <Task2_Init+0x78>)
 800239e:	4668      	mov	r0, sp
 80023a0:	1d23      	adds	r3, r4, #4
 80023a2:	2284      	movs	r2, #132	; 0x84
 80023a4:	4619      	mov	r1, r3
 80023a6:	f00a fab9 	bl	800c91c <memcpy>
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	2240      	movs	r2, #64	; 0x40
 80023ae:	2180      	movs	r1, #128	; 0x80
 80023b0:	4816      	ldr	r0, [pc, #88]	; (800240c <Task2_Init+0x7c>)
 80023b2:	f7fe fb4f 	bl	8000a54 <NRF24_begin>
	nrf24_DebugUART_Init(huart3);
 80023b6:	4c16      	ldr	r4, [pc, #88]	; (8002410 <Task2_Init+0x80>)
 80023b8:	4668      	mov	r0, sp
 80023ba:	f104 0310 	add.w	r3, r4, #16
 80023be:	2280      	movs	r2, #128	; 0x80
 80023c0:	4619      	mov	r1, r3
 80023c2:	f00a faab 	bl	800c91c <memcpy>
 80023c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023ca:	f7ff fad9 	bl	8001980 <nrf24_DebugUART_Init>
	NRF24_openReadingPipe(1, RxpipeAddrs); // Abre el pipe 1 con la dirección configurada
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <Task2_Init+0x84>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	2001      	movs	r0, #1
 80023d6:	f7fe fc6b 	bl	8000cb0 <NRF24_openReadingPipe>
	NRF24_setAutoAck(false);
 80023da:	2000      	movs	r0, #0
 80023dc:	f7fe fd8a 	bl	8000ef4 <NRF24_setAutoAck>
	NRF24_setChannel(60);// de RF, asegúrate que coincida con el Arduino
 80023e0:	203c      	movs	r0, #60	; 0x3c
 80023e2:	f7fe fcce 	bl	8000d82 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 80023e6:	2020      	movs	r0, #32
 80023e8:	f7fe fce0 	bl	8000dac <NRF24_setPayloadSize>
	NRF24_setDataRate(RF24_2MBPS); // Velocidad de datos, debe coincidir con el Arduino
 80023ec:	2001      	movs	r0, #1
 80023ee:	f7fe fdcf 	bl	8000f90 <NRF24_setDataRate>
	NRF24_enableDynamicPayloads();
 80023f2:	f7fe fd35 	bl	8000e60 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 80023f6:	f7fe fd05 	bl	8000e04 <NRF24_enableAckPayload>
	NRF24_startListening(); // Comienza a escuchar
 80023fa:	f7fe fc0b 	bl	8000c14 <NRF24_startListening>
}
 80023fe:	bf00      	nop
 8002400:	3704      	adds	r7, #4
 8002402:	46bd      	mov	sp, r7
 8002404:	bd90      	pop	{r4, r7, pc}
 8002406:	bf00      	nop
 8002408:	2400067c 	.word	0x2400067c
 800240c:	58020800 	.word	0x58020800
 8002410:	2400079c 	.word	0x2400079c
 8002414:	24000008 	.word	0x24000008

08002418 <startTask2>:

void startTask2(void const *argument) {
 8002418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800241a:	b09f      	sub	sp, #124	; 0x7c
 800241c:	af06      	add	r7, sp, #24
 800241e:	6078      	str	r0, [r7, #4]
    // Buffer de salida con un tamaño adecuado
    char myRxData[64]; // Ajustado para manejar toda la salida sin truncamiento
    positionMessage msg;

    for (;;) {
        if (NRF24_available()) {
 8002420:	f7fe fc1e 	bl	8000c60 <NRF24_available>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80a1 	beq.w	800256e <startTask2+0x156>
        	if (osMutexWait(Mutex1Handle, osWaitForever) == osOK){
 800242c:	4b52      	ldr	r3, [pc, #328]	; (8002578 <startTask2+0x160>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	4618      	mov	r0, r3
 8002436:	f007 fccf 	bl	8009dd8 <osMutexWait>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	f040 8096 	bne.w	800256e <startTask2+0x156>
                // Leer los datos recibidos en el buffer
                NRF24_read(buffer, sizeof(buffer));
 8002442:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002446:	2106      	movs	r1, #6
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fc11 	bl	8000c70 <NRF24_read>

                // Depuración: Imprimir el contenido del buffer
                int len = snprintf(myRxData, sizeof(myRxData),
                                   "Raw Buffer: %02X %02X %02X %02X %02X %02X \r\n",
                                   buffer[0], buffer[1], buffer[2], buffer[3], buffer[4], buffer[5]);
 800244e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
                int len = snprintf(myRxData, sizeof(myRxData),
 8002452:	461e      	mov	r6, r3
                                   buffer[0], buffer[1], buffer[2], buffer[3], buffer[4], buffer[5]);
 8002454:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002458:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 800245c:	f897 1057 	ldrb.w	r1, [r7, #87]	; 0x57
 8002460:	f897 0058 	ldrb.w	r0, [r7, #88]	; 0x58
                int len = snprintf(myRxData, sizeof(myRxData),
 8002464:	4604      	mov	r4, r0
                                   buffer[0], buffer[1], buffer[2], buffer[3], buffer[4], buffer[5]);
 8002466:	f897 0059 	ldrb.w	r0, [r7, #89]	; 0x59
                int len = snprintf(myRxData, sizeof(myRxData),
 800246a:	4605      	mov	r5, r0
 800246c:	f107 0014 	add.w	r0, r7, #20
 8002470:	9504      	str	r5, [sp, #16]
 8002472:	9403      	str	r4, [sp, #12]
 8002474:	9102      	str	r1, [sp, #8]
 8002476:	9201      	str	r2, [sp, #4]
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	4633      	mov	r3, r6
 800247c:	4a3f      	ldr	r2, [pc, #252]	; (800257c <startTask2+0x164>)
 800247e:	2140      	movs	r1, #64	; 0x40
 8002480:	f00a ff32 	bl	800d2e8 <sniprintf>
 8002484:	65f8      	str	r0, [r7, #92]	; 0x5c

                // Verificar si el mensaje fue truncado
                if (len >= sizeof(myRxData)) {
 8002486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002488:	2b3f      	cmp	r3, #63	; 0x3f
 800248a:	d902      	bls.n	8002492 <startTask2+0x7a>
                    printf("Advertencia: Truncamiento de datos en myRxData\n");
 800248c:	483c      	ldr	r0, [pc, #240]	; (8002580 <startTask2+0x168>)
 800248e:	f00a ff23 	bl	800d2d8 <puts>
                }

                HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, strlen(myRxData), HAL_MAX_DELAY);
 8002492:	f107 0314 	add.w	r3, r7, #20
 8002496:	4618      	mov	r0, r3
 8002498:	f7fd ff22 	bl	80002e0 <strlen>
 800249c:	4603      	mov	r3, r0
 800249e:	b29a      	uxth	r2, r3
 80024a0:	f107 0114 	add.w	r1, r7, #20
 80024a4:	f04f 33ff 	mov.w	r3, #4294967295
 80024a8:	4836      	ldr	r0, [pc, #216]	; (8002584 <startTask2+0x16c>)
 80024aa:	f006 fb35 	bl	8008b18 <HAL_UART_Transmit>

                // Ensamblar valores x, y, y a
                x = (buffer[0] << 8) | buffer[1]; // Big-endian
 80024ae:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	b21a      	sxth	r2, r3
 80024b6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80024ba:	b21b      	sxth	r3, r3
 80024bc:	4313      	orrs	r3, r2
 80024be:	b21b      	sxth	r3, r3
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	4b31      	ldr	r3, [pc, #196]	; (8002588 <startTask2+0x170>)
 80024c4:	801a      	strh	r2, [r3, #0]
                y = (buffer[2] << 8) | buffer[3];
 80024c6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	b21a      	sxth	r2, r3
 80024ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80024d2:	b21b      	sxth	r3, r3
 80024d4:	4313      	orrs	r3, r2
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	b29a      	uxth	r2, r3
 80024da:	4b2c      	ldr	r3, [pc, #176]	; (800258c <startTask2+0x174>)
 80024dc:	801a      	strh	r2, [r3, #0]
                a = (buffer[4] << 8) | buffer[5];
 80024de:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	b21a      	sxth	r2, r3
 80024e6:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80024ea:	b21b      	sxth	r3, r3
 80024ec:	4313      	orrs	r3, r2
 80024ee:	b21b      	sxth	r3, r3
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	4b27      	ldr	r3, [pc, #156]	; (8002590 <startTask2+0x178>)
 80024f4:	801a      	strh	r2, [r3, #0]

                // Depuración: Imprimir los valores calculados
                len = snprintf(myRxData, sizeof(myRxData),
 80024f6:	4b24      	ldr	r3, [pc, #144]	; (8002588 <startTask2+0x170>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	4619      	mov	r1, r3
 80024fc:	4b23      	ldr	r3, [pc, #140]	; (800258c <startTask2+0x174>)
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b23      	ldr	r3, [pc, #140]	; (8002590 <startTask2+0x178>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	f107 0014 	add.w	r0, r7, #20
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	9200      	str	r2, [sp, #0]
 800250e:	460b      	mov	r3, r1
 8002510:	4a20      	ldr	r2, [pc, #128]	; (8002594 <startTask2+0x17c>)
 8002512:	2140      	movs	r1, #64	; 0x40
 8002514:	f00a fee8 	bl	800d2e8 <sniprintf>
 8002518:	65f8      	str	r0, [r7, #92]	; 0x5c
                               "x = %u, y = %u, a = %u \r\n", x, y, a);
                msg.x = x;
 800251a:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <startTask2+0x170>)
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	81bb      	strh	r3, [r7, #12]
                msg.y = y;
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <startTask2+0x174>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	81fb      	strh	r3, [r7, #14]
                msg.a = a;
 8002526:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <startTask2+0x178>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	823b      	strh	r3, [r7, #16]

                if (len >= sizeof(myRxData)) {
 800252c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800252e:	2b3f      	cmp	r3, #63	; 0x3f
 8002530:	d902      	bls.n	8002538 <startTask2+0x120>
                    printf("Advertencia: Truncamiento de datos en myRxData\n");
 8002532:	4813      	ldr	r0, [pc, #76]	; (8002580 <startTask2+0x168>)
 8002534:	f00a fed0 	bl	800d2d8 <puts>
                }

                HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, strlen(myRxData), HAL_MAX_DELAY);
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4618      	mov	r0, r3
 800253e:	f7fd fecf 	bl	80002e0 <strlen>
 8002542:	4603      	mov	r3, r0
 8002544:	b29a      	uxth	r2, r3
 8002546:	f107 0114 	add.w	r1, r7, #20
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
 800254e:	480d      	ldr	r0, [pc, #52]	; (8002584 <startTask2+0x16c>)
 8002550:	f006 fae2 	bl	8008b18 <HAL_UART_Transmit>
                osMessagePut(msgQueueHandle, (uint32_t)&msg, 1);
 8002554:	4b10      	ldr	r3, [pc, #64]	; (8002598 <startTask2+0x180>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f107 0108 	add.w	r1, r7, #8
 800255c:	2201      	movs	r2, #1
 800255e:	4618      	mov	r0, r3
 8002560:	f007 fce6 	bl	8009f30 <osMessagePut>
                osMutexRelease(Mutex1Handle); // Liberar el mutex después de usarlo
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <startTask2+0x160>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f007 fc83 	bl	8009e74 <osMutexRelease>
        	{
					osDelay(10); // Pausa de 10 ms cuando no hay datos
			}
			*/
		}
        osDelay(500);
 800256e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002572:	f007 fc04 	bl	8009d7e <osDelay>
        if (NRF24_available()) {
 8002576:	e753      	b.n	8002420 <startTask2+0x8>
 8002578:	2400083c 	.word	0x2400083c
 800257c:	0800fd18 	.word	0x0800fd18
 8002580:	0800fd48 	.word	0x0800fd48
 8002584:	2400079c 	.word	0x2400079c
 8002588:	240008b4 	.word	0x240008b4
 800258c:	240008b6 	.word	0x240008b6
 8002590:	240008b8 	.word	0x240008b8
 8002594:	0800fd78 	.word	0x0800fd78
 8002598:	24000838 	.word	0x24000838

0800259c <startTask3>:
    }
}

void startTask3(void const *argument){
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	osEvent evt;
	for(;;)
	{
		evt = osMessageGet(msgQueueHandle, osWaitForever);
 80025a4:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <startTask3+0x7c>)
 80025a6:	6819      	ldr	r1, [r3, #0]
 80025a8:	f107 0308 	add.w	r3, r7, #8
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295
 80025b0:	4618      	mov	r0, r3
 80025b2:	f007 fcfd 	bl	8009fb0 <osMessageGet>
		if(evt.status == osEventMessage){
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b10      	cmp	r3, #16
 80025ba:	d128      	bne.n	800260e <startTask3+0x72>
			if (osMutexWait(Mutex1Handle, osWaitForever) == osOK){
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <startTask3+0x80>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f04f 31ff 	mov.w	r1, #4294967295
 80025c4:	4618      	mov	r0, r3
 80025c6:	f007 fc07 	bl	8009dd8 <osMutexWait>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d11e      	bne.n	800260e <startTask3+0x72>
				positionMessage* receivedMsg = (positionMessage*) evt.value.p;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	617b      	str	r3, [r7, #20]

				//testingServoLimits();
				//testingESCLimits();
				printf("Position: %f\n\r", distanceTraveled);
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <startTask3+0x84>)
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025de:	ec53 2b17 	vmov	r2, r3, d7
 80025e2:	4810      	ldr	r0, [pc, #64]	; (8002624 <startTask3+0x88>)
 80025e4:	f00a fdf2 	bl	800d1cc <iprintf>
				waypointPathEncoder(distanceTraveled, receivedMsg->x, receivedMsg->y, receivedMsg->a);
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <startTask3+0x84>)
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	8898      	ldrh	r0, [r3, #4]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	88d9      	ldrh	r1, [r3, #6]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	891b      	ldrh	r3, [r3, #8]
 80025fa:	461a      	mov	r2, r3
 80025fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002600:	f000 fbf4 	bl	8002dec <waypointPathEncoder>
		        osMutexRelease(Mutex1Handle); // Liberar el mutex después de usarlo
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <startTask3+0x80>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f007 fc33 	bl	8009e74 <osMutexRelease>


			}
		}
		osDelay(50);
 800260e:	2032      	movs	r0, #50	; 0x32
 8002610:	f007 fbb5 	bl	8009d7e <osDelay>
		evt = osMessageGet(msgQueueHandle, osWaitForever);
 8002614:	e7c6      	b.n	80025a4 <startTask3+0x8>
 8002616:	bf00      	nop
 8002618:	24000838 	.word	0x24000838
 800261c:	2400083c 	.word	0x2400083c
 8002620:	240008c8 	.word	0x240008c8
 8002624:	0800fd94 	.word	0x0800fd94

08002628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800262c:	b672      	cpsid	i
}
 800262e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002630:	e7fe      	b.n	8002630 <Error_Handler+0x8>
	...

08002634 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800263c:	1d39      	adds	r1, r7, #4
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
 8002642:	2201      	movs	r2, #1
 8002644:	4803      	ldr	r0, [pc, #12]	; (8002654 <__io_putchar+0x20>)
 8002646:	f006 fa67 	bl	8008b18 <HAL_UART_Transmit>
  return ch;
 800264a:	687b      	ldr	r3, [r7, #4]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	2400079c 	.word	0x2400079c

08002658 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <HAL_MspInit+0x38>)
 8002660:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002664:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <HAL_MspInit+0x38>)
 8002666:	f043 0302 	orr.w	r3, r3, #2
 800266a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <HAL_MspInit+0x38>)
 8002670:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800267c:	2200      	movs	r2, #0
 800267e:	210f      	movs	r1, #15
 8002680:	f06f 0001 	mvn.w	r0, #1
 8002684:	f000 fe6d 	bl	8003362 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	58024400 	.word	0x58024400

08002694 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b0b8      	sub	sp, #224	; 0xe0
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	22bc      	movs	r2, #188	; 0xbc
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f00a f93f 	bl	800c938 <memset>
  if(hfdcan->Instance==FDCAN1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a25      	ldr	r2, [pc, #148]	; (8002754 <HAL_FDCAN_MspInit+0xc0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d142      	bne.n	800274a <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80026c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80026ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80026ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d0:	f107 0310 	add.w	r3, r7, #16
 80026d4:	4618      	mov	r0, r3
 80026d6:	f002 ffd3 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80026e0:	f7ff ffa2 	bl	8002628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80026e4:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <HAL_FDCAN_MspInit+0xc4>)
 80026e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80026ea:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <HAL_FDCAN_MspInit+0xc4>)
 80026ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80026f4:	4b18      	ldr	r3, [pc, #96]	; (8002758 <HAL_FDCAN_MspInit+0xc4>)
 80026f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002702:	4b15      	ldr	r3, [pc, #84]	; (8002758 <HAL_FDCAN_MspInit+0xc4>)
 8002704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002708:	4a13      	ldr	r2, [pc, #76]	; (8002758 <HAL_FDCAN_MspInit+0xc4>)
 800270a:	f043 0308 	orr.w	r3, r3, #8
 800270e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <HAL_FDCAN_MspInit+0xc4>)
 8002714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002720:	2303      	movs	r3, #3
 8002722:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	2302      	movs	r3, #2
 8002728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002732:	2300      	movs	r3, #0
 8002734:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002738:	2309      	movs	r3, #9
 800273a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800273e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002742:	4619      	mov	r1, r3
 8002744:	4805      	ldr	r0, [pc, #20]	; (800275c <HAL_FDCAN_MspInit+0xc8>)
 8002746:	f001 fc4d 	bl	8003fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800274a:	bf00      	nop
 800274c:	37e0      	adds	r7, #224	; 0xe0
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	4000a000 	.word	0x4000a000
 8002758:	58024400 	.word	0x58024400
 800275c:	58020c00 	.word	0x58020c00

08002760 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b0b8      	sub	sp, #224	; 0xe0
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002778:	f107 0310 	add.w	r3, r7, #16
 800277c:	22bc      	movs	r2, #188	; 0xbc
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f00a f8d9 	bl	800c938 <memset>
  if(hi2c->Instance==I2C4)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a25      	ldr	r2, [pc, #148]	; (8002820 <HAL_I2C_MspInit+0xc0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d142      	bne.n	8002816 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002790:	2310      	movs	r3, #16
 8002792:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8002794:	2300      	movs	r3, #0
 8002796:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800279a:	f107 0310 	add.w	r3, r7, #16
 800279e:	4618      	mov	r0, r3
 80027a0:	f002 ff6e 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80027aa:	f7ff ff3d 	bl	8002628 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <HAL_I2C_MspInit+0xc4>)
 80027b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b4:	4a1b      	ldr	r2, [pc, #108]	; (8002824 <HAL_I2C_MspInit+0xc4>)
 80027b6:	f043 0320 	orr.w	r3, r3, #32
 80027ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027be:	4b19      	ldr	r3, [pc, #100]	; (8002824 <HAL_I2C_MspInit+0xc4>)
 80027c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80027cc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80027d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027d4:	2312      	movs	r3, #18
 80027d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80027e6:	2304      	movs	r3, #4
 80027e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027f0:	4619      	mov	r1, r3
 80027f2:	480d      	ldr	r0, [pc, #52]	; (8002828 <HAL_I2C_MspInit+0xc8>)
 80027f4:	f001 fbf6 	bl	8003fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_I2C_MspInit+0xc4>)
 80027fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027fe:	4a09      	ldr	r2, [pc, #36]	; (8002824 <HAL_I2C_MspInit+0xc4>)
 8002800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002804:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_I2C_MspInit+0xc4>)
 800280a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002816:	bf00      	nop
 8002818:	37e0      	adds	r7, #224	; 0xe0
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	58001c00 	.word	0x58001c00
 8002824:	58024400 	.word	0x58024400
 8002828:	58021400 	.word	0x58021400

0800282c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b0b8      	sub	sp, #224	; 0xe0
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002844:	f107 0310 	add.w	r3, r7, #16
 8002848:	22bc      	movs	r2, #188	; 0xbc
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f00a f873 	bl	800c938 <memset>
  if(hspi->Instance==SPI5)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a25      	ldr	r2, [pc, #148]	; (80028ec <HAL_SPI_MspInit+0xc0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d143      	bne.n	80028e4 <HAL_SPI_MspInit+0xb8>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800285c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002860:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 8002862:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002866:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002868:	f107 0310 	add.w	r3, r7, #16
 800286c:	4618      	mov	r0, r3
 800286e:	f002 ff07 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8002878:	f7ff fed6 	bl	8002628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800287c:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <HAL_SPI_MspInit+0xc4>)
 800287e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002882:	4a1b      	ldr	r2, [pc, #108]	; (80028f0 <HAL_SPI_MspInit+0xc4>)
 8002884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002888:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800288c:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <HAL_SPI_MspInit+0xc4>)
 800288e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <HAL_SPI_MspInit+0xc4>)
 800289c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a0:	4a13      	ldr	r2, [pc, #76]	; (80028f0 <HAL_SPI_MspInit+0xc4>)
 80028a2:	f043 0320 	orr.w	r3, r3, #32
 80028a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028aa:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <HAL_SPI_MspInit+0xc4>)
 80028ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80028b8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80028bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80028d2:	2305      	movs	r3, #5
 80028d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028dc:	4619      	mov	r1, r3
 80028de:	4805      	ldr	r0, [pc, #20]	; (80028f4 <HAL_SPI_MspInit+0xc8>)
 80028e0:	f001 fb80 	bl	8003fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80028e4:	bf00      	nop
 80028e6:	37e0      	adds	r7, #224	; 0xe0
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40015000 	.word	0x40015000
 80028f0:	58024400 	.word	0x58024400
 80028f4:	58021400 	.word	0x58021400

080028f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a16      	ldr	r2, [pc, #88]	; (8002960 <HAL_TIM_Base_MspInit+0x68>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d10f      	bne.n	800292a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800290a:	4b16      	ldr	r3, [pc, #88]	; (8002964 <HAL_TIM_Base_MspInit+0x6c>)
 800290c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002910:	4a14      	ldr	r2, [pc, #80]	; (8002964 <HAL_TIM_Base_MspInit+0x6c>)
 8002912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002916:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800291a:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_TIM_Base_MspInit+0x6c>)
 800291c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002928:	e013      	b.n	8002952 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM17)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a0e      	ldr	r2, [pc, #56]	; (8002968 <HAL_TIM_Base_MspInit+0x70>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d10e      	bne.n	8002952 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_TIM_Base_MspInit+0x6c>)
 8002936:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <HAL_TIM_Base_MspInit+0x6c>)
 800293c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002940:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002944:	4b07      	ldr	r3, [pc, #28]	; (8002964 <HAL_TIM_Base_MspInit+0x6c>)
 8002946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800294a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
}
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40014400 	.word	0x40014400
 8002964:	58024400 	.word	0x58024400
 8002968:	40014800 	.word	0x40014800

0800296c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	; 0x28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a25      	ldr	r2, [pc, #148]	; (8002a20 <HAL_TIM_MspPostInit+0xb4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d11f      	bne.n	80029ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800298e:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <HAL_TIM_MspPostInit+0xb8>)
 8002990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002994:	4a23      	ldr	r2, [pc, #140]	; (8002a24 <HAL_TIM_MspPostInit+0xb8>)
 8002996:	f043 0320 	orr.w	r3, r3, #32
 800299a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800299e:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <HAL_TIM_MspPostInit+0xb8>)
 80029a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PF6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = PWM_ESC_Pin;
 80029ac:	2340      	movs	r3, #64	; 0x40
 80029ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b0:	2302      	movs	r3, #2
 80029b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b8:	2300      	movs	r3, #0
 80029ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80029bc:	2301      	movs	r3, #1
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ESC_GPIO_Port, &GPIO_InitStruct);
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	4619      	mov	r1, r3
 80029c6:	4818      	ldr	r0, [pc, #96]	; (8002a28 <HAL_TIM_MspPostInit+0xbc>)
 80029c8:	f001 fb0c 	bl	8003fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80029cc:	e024      	b.n	8002a18 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM17)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <HAL_TIM_MspPostInit+0xc0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d11f      	bne.n	8002a18 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_TIM_MspPostInit+0xb8>)
 80029da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029de:	4a11      	ldr	r2, [pc, #68]	; (8002a24 <HAL_TIM_MspPostInit+0xb8>)
 80029e0:	f043 0302 	orr.w	r3, r3, #2
 80029e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <HAL_TIM_MspPostInit+0xb8>)
 80029ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 80029f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	2302      	movs	r3, #2
 80029fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a04:	2300      	movs	r3, #0
 8002a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	4619      	mov	r1, r3
 8002a12:	4807      	ldr	r0, [pc, #28]	; (8002a30 <HAL_TIM_MspPostInit+0xc4>)
 8002a14:	f001 fae6 	bl	8003fe4 <HAL_GPIO_Init>
}
 8002a18:	bf00      	nop
 8002a1a:	3728      	adds	r7, #40	; 0x28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40014400 	.word	0x40014400
 8002a24:	58024400 	.word	0x58024400
 8002a28:	58021400 	.word	0x58021400
 8002a2c:	40014800 	.word	0x40014800
 8002a30:	58020400 	.word	0x58020400

08002a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b0b8      	sub	sp, #224	; 0xe0
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a4c:	f107 0310 	add.w	r3, r7, #16
 8002a50:	22bc      	movs	r2, #188	; 0xbc
 8002a52:	2100      	movs	r1, #0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f009 ff6f 	bl	800c938 <memset>
  if(huart->Instance==USART3)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a25      	ldr	r2, [pc, #148]	; (8002af4 <HAL_UART_MspInit+0xc0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d142      	bne.n	8002aea <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a64:	2302      	movs	r3, #2
 8002a66:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a6e:	f107 0310 	add.w	r3, r7, #16
 8002a72:	4618      	mov	r0, r3
 8002a74:	f002 fe04 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a7e:	f7ff fdd3 	bl	8002628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a82:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <HAL_UART_MspInit+0xc4>)
 8002a84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a88:	4a1b      	ldr	r2, [pc, #108]	; (8002af8 <HAL_UART_MspInit+0xc4>)
 8002a8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a92:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <HAL_UART_MspInit+0xc4>)
 8002a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aa0:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <HAL_UART_MspInit+0xc4>)
 8002aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa6:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <HAL_UART_MspInit+0xc4>)
 8002aa8:	f043 0308 	orr.w	r3, r3, #8
 8002aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_UART_MspInit+0xc4>)
 8002ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002abe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ac2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ad8:	2307      	movs	r3, #7
 8002ada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ade:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4805      	ldr	r0, [pc, #20]	; (8002afc <HAL_UART_MspInit+0xc8>)
 8002ae6:	f001 fa7d 	bl	8003fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002aea:	bf00      	nop
 8002aec:	37e0      	adds	r7, #224	; 0xe0
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40004800 	.word	0x40004800
 8002af8:	58024400 	.word	0x58024400
 8002afc:	58020c00 	.word	0x58020c00

08002b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b04:	e7fe      	b.n	8002b04 <NMI_Handler+0x4>

08002b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0a:	e7fe      	b.n	8002b0a <HardFault_Handler+0x4>

08002b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <MemManage_Handler+0x4>

08002b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b16:	e7fe      	b.n	8002b16 <BusFault_Handler+0x4>

08002b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <UsageFault_Handler+0x4>

08002b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	cntMilisec++;
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <SysTick_Handler+0x2c>)
 8002b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b36:	1c50      	adds	r0, r2, #1
 8002b38:	f143 0100 	adc.w	r1, r3, #0
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <SysTick_Handler+0x2c>)
 8002b3e:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b42:	f000 fb01 	bl	8003148 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002b46:	f009 fc9d 	bl	800c484 <xTaskGetSchedulerState>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d001      	beq.n	8002b54 <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002b50:	f007 ff02 	bl	800a958 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	240008c0 	.word	0x240008c0

08002b5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
	return 1;
 8002b60:	2301      	movs	r3, #1
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <_kill>:

int _kill(int pid, int sig)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b76:	f009 fea7 	bl	800c8c8 <__errno>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2216      	movs	r2, #22
 8002b7e:	601a      	str	r2, [r3, #0]
	return -1;
 8002b80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <_exit>:

void _exit (int status)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b94:	f04f 31ff 	mov.w	r1, #4294967295
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff ffe7 	bl	8002b6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b9e:	e7fe      	b.n	8002b9e <_exit+0x12>

08002ba0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	e00a      	b.n	8002bc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bb2:	f3af 8000 	nop.w
 8002bb6:	4601      	mov	r1, r0
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	60ba      	str	r2, [r7, #8]
 8002bbe:	b2ca      	uxtb	r2, r1
 8002bc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	dbf0      	blt.n	8002bb2 <_read+0x12>
	}

return len;
 8002bd0:	687b      	ldr	r3, [r7, #4]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b086      	sub	sp, #24
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	e009      	b.n	8002c00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	60ba      	str	r2, [r7, #8]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fd1d 	bl	8002634 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	dbf1      	blt.n	8002bec <_write+0x12>
	}
	return len;
 8002c08:	687b      	ldr	r3, [r7, #4]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <_close>:

int _close(int file)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
	return -1;
 8002c1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c3a:	605a      	str	r2, [r3, #4]
	return 0;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <_isatty>:

int _isatty(int file)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
	return 1;
 8002c52:	2301      	movs	r3, #1
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
	return 0;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c84:	4a14      	ldr	r2, [pc, #80]	; (8002cd8 <_sbrk+0x5c>)
 8002c86:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <_sbrk+0x60>)
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c90:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <_sbrk+0x64>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c98:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <_sbrk+0x64>)
 8002c9a:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <_sbrk+0x68>)
 8002c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <_sbrk+0x64>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d207      	bcs.n	8002cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cac:	f009 fe0c 	bl	800c8c8 <__errno>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	220c      	movs	r2, #12
 8002cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cba:	e009      	b.n	8002cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <_sbrk+0x64>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cc2:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <_sbrk+0x64>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	4a05      	ldr	r2, [pc, #20]	; (8002ce0 <_sbrk+0x64>)
 8002ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cce:	68fb      	ldr	r3, [r7, #12]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	24080000 	.word	0x24080000
 8002cdc:	00000400 	.word	0x00000400
 8002ce0:	240008cc 	.word	0x240008cc
 8002ce4:	240046d0 	.word	0x240046d0

08002ce8 <initServoTim>:

	//setEscSpeed(1500);   // Stop
	//HAL_Delay(1000);
}
*/
void initServoTim(TIM_HandleTypeDef hTimServo){
 8002ce8:	b084      	sub	sp, #16
 8002cea:	b580      	push	{r7, lr}
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	f107 0c08 	add.w	ip, r7, #8
 8002cf2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HTimServo = hTimServo;
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <initServoTim+0x48>)
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f107 0308 	add.w	r3, r7, #8
 8002cfe:	224c      	movs	r2, #76	; 0x4c
 8002d00:	4619      	mov	r1, r3
 8002d02:	f009 fe0b 	bl	800c91c <memcpy>

	if (HAL_TIM_PWM_Start(&HTimServo, TIM_CHANNEL_1) != HAL_OK) {
 8002d06:	2100      	movs	r1, #0
 8002d08:	4809      	ldr	r0, [pc, #36]	; (8002d30 <initServoTim+0x48>)
 8002d0a:	f005 f87f 	bl	8007e0c <HAL_TIM_PWM_Start>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <initServoTim+0x30>
		  Error_Handler();
 8002d14:	f7ff fc88 	bl	8002628 <Error_Handler>
	}
	__HAL_TIM_SET_COMPARE(&HTimServo, TIM_CHANNEL_1, 1500); // 1.5 ms pulse width for neutral
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <initServoTim+0x48>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002d20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d2a:	b004      	add	sp, #16
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	2400091c 	.word	0x2400091c

08002d34 <initESCTim>:


void initESCTim(TIM_HandleTypeDef hTimESC){
 8002d34:	b084      	sub	sp, #16
 8002d36:	b580      	push	{r7, lr}
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	f107 0c08 	add.w	ip, r7, #8
 8002d3e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HTimESC = hTimESC;
 8002d42:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <initESCTim+0x48>)
 8002d44:	4618      	mov	r0, r3
 8002d46:	f107 0308 	add.w	r3, r7, #8
 8002d4a:	224c      	movs	r2, #76	; 0x4c
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f009 fde5 	bl	800c91c <memcpy>

	if (HAL_TIM_PWM_Start(&HTimESC, TIM_CHANNEL_1) != HAL_OK) {
 8002d52:	2100      	movs	r1, #0
 8002d54:	4809      	ldr	r0, [pc, #36]	; (8002d7c <initESCTim+0x48>)
 8002d56:	f005 f859 	bl	8007e0c <HAL_TIM_PWM_Start>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <initESCTim+0x30>
		  Error_Handler();
 8002d60:	f7ff fc62 	bl	8002628 <Error_Handler>
	  }
	__HAL_TIM_SET_COMPARE(&HTimESC, TIM_CHANNEL_1, 1500); // 1.5 ms pulse width for neutral
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <initESCTim+0x48>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002d6c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d76:	b004      	add	sp, #16
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	240008d0 	.word	0x240008d0

08002d80 <setServoAngle>:

void setServoAngle(uint16_t angle) {
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	80fb      	strh	r3, [r7, #6]
    // Map angle (0° to 180°) to pulse width (1 ms to 2 ms)
    uint16_t pulse_width = 1000 + (angle * 1000) / 180; // Scale angle to 1000-2000 μs
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d90:	fb02 f303 	mul.w	r3, r2, r3
 8002d94:	4a0a      	ldr	r2, [pc, #40]	; (8002dc0 <setServoAngle+0x40>)
 8002d96:	fb82 1203 	smull	r1, r2, r2, r3
 8002d9a:	441a      	add	r2, r3
 8002d9c:	11d2      	asrs	r2, r2, #7
 8002d9e:	17db      	asrs	r3, r3, #31
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002da8:	81fb      	strh	r3, [r7, #14]

    // Update PWM duty cycle
    __HAL_TIM_SET_COMPARE(&HTimServo, TIM_CHANNEL_1, pulse_width);
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <setServoAngle+0x44>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	89fa      	ldrh	r2, [r7, #14]
 8002db0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	b60b60b7 	.word	0xb60b60b7
 8002dc4:	2400091c 	.word	0x2400091c

08002dc8 <setEscSpeed>:


void setEscSpeed(uint16_t pulse_width) {
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	80fb      	strh	r3, [r7, #6]
    // Update PWM duty cycle for ESC
    __HAL_TIM_SET_COMPARE(&HTimESC, TIM_CHANNEL_1, pulse_width);
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <setEscSpeed+0x20>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	88fa      	ldrh	r2, [r7, #6]
 8002dd8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	240008d0 	.word	0x240008d0

08002dec <waypointPathEncoder>:
    setServoAngle(90); // Straight
    setEscSpeed(700);
    osDelay(1000);
}

void waypointPathEncoder(float position, uint16_t x, uint16_t y, uint16_t a) {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08e      	sub	sp, #56	; 0x38
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	ed87 0a03 	vstr	s0, [r7, #12]
 8002df6:	4603      	mov	r3, r0
 8002df8:	817b      	strh	r3, [r7, #10]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	813b      	strh	r3, [r7, #8]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	80fb      	strh	r3, [r7, #6]
    // Detener el coche inicialmente
    //stopCar();
    // Variables para rango de posición
    float rangeStart = 0.0f;  // Inicio del rango
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    float rangeEnd = 0.8f;    // Fin del rango
 8002e08:	4b74      	ldr	r3, [pc, #464]	; (8002fdc <waypointPathEncoder+0x1f0>)
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28

    // Variables de control
    bool isWithinStartZone = (x >= 0 && x < 20) && (y > 115 && y <= 120);
 8002e0c:	897b      	ldrh	r3, [r7, #10]
 8002e0e:	2b13      	cmp	r3, #19
 8002e10:	d807      	bhi.n	8002e22 <waypointPathEncoder+0x36>
 8002e12:	893b      	ldrh	r3, [r7, #8]
 8002e14:	2b73      	cmp	r3, #115	; 0x73
 8002e16:	d904      	bls.n	8002e22 <waypointPathEncoder+0x36>
 8002e18:	893b      	ldrh	r3, [r7, #8]
 8002e1a:	2b78      	cmp	r3, #120	; 0x78
 8002e1c:	d801      	bhi.n	8002e22 <waypointPathEncoder+0x36>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <waypointPathEncoder+0x38>
 8002e22:	2300      	movs	r3, #0
 8002e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool isParabolicZone = (x >= 80 && x < 90);
 8002e34:	897b      	ldrh	r3, [r7, #10]
 8002e36:	2b4f      	cmp	r3, #79	; 0x4f
 8002e38:	d904      	bls.n	8002e44 <waypointPathEncoder+0x58>
 8002e3a:	897b      	ldrh	r3, [r7, #10]
 8002e3c:	2b59      	cmp	r3, #89	; 0x59
 8002e3e:	d801      	bhi.n	8002e44 <waypointPathEncoder+0x58>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <waypointPathEncoder+0x5a>
 8002e44:	2300      	movs	r3, #0
 8002e46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002e4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    //setEscSpeed(1300);   // Velocidad hacia adelante

    // 1. Forward movement in start zone
    if (isWithinStartZone) {
 8002e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d041      	beq.n	8002ee2 <waypointPathEncoder+0xf6>
        if (position >= rangeStart && position <= rangeEnd) {
 8002e5e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e62:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002e66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6e:	db23      	blt.n	8002eb8 <waypointPathEncoder+0xcc>
 8002e70:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e80:	d81a      	bhi.n	8002eb8 <waypointPathEncoder+0xcc>
            setServoAngle(70);    // Ángulo neutral del servo
 8002e82:	2046      	movs	r0, #70	; 0x46
 8002e84:	f7ff ff7c 	bl	8002d80 <setServoAngle>
            setEscSpeed(1300);   // Velocidad hacia adelante
 8002e88:	f240 5014 	movw	r0, #1300	; 0x514
 8002e8c:	f7ff ff9c 	bl	8002dc8 <setEscSpeed>
            printf("Camera coordinates T3: x=%u, y=%u, a=%u\n", x, y, a);
 8002e90:	8979      	ldrh	r1, [r7, #10]
 8002e92:	893a      	ldrh	r2, [r7, #8]
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	4852      	ldr	r0, [pc, #328]	; (8002fe0 <waypointPathEncoder+0x1f4>)
 8002e98:	f00a f998 	bl	800d1cc <iprintf>
            printf("Distance Traveled: %.3f\n", position);
 8002e9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ea0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ea4:	ec53 2b17 	vmov	r2, r3, d7
 8002ea8:	484e      	ldr	r0, [pc, #312]	; (8002fe4 <waypointPathEncoder+0x1f8>)
 8002eaa:	f00a f98f 	bl	800d1cc <iprintf>
            osDelay(500);
 8002eae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002eb2:	f006 ff64 	bl	8009d7e <osDelay>
        if (position >= rangeStart && position <= rangeEnd) {
 8002eb6:	e086      	b.n	8002fc6 <waypointPathEncoder+0x1da>
        }
        else if (position > rangeEnd) {
 8002eb8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ebc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002ec0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec8:	dd7d      	ble.n	8002fc6 <waypointPathEncoder+0x1da>
            stopCar();  // Detener el coche si excede el rango
 8002eca:	f000 f895 	bl	8002ff8 <stopCar>
            printf("Out of range! Position exceeded: %.3f\n", position);
 8002ece:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ed2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ed6:	ec53 2b17 	vmov	r2, r3, d7
 8002eda:	4843      	ldr	r0, [pc, #268]	; (8002fe8 <waypointPathEncoder+0x1fc>)
 8002edc:	f00a f976 	bl	800d1cc <iprintf>
 8002ee0:	e071      	b.n	8002fc6 <waypointPathEncoder+0x1da>
        }
    }
    // 2. Parabolic trajectory in specified zone
    else if (isParabolicZone) {
 8002ee2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d069      	beq.n	8002fbe <waypointPathEncoder+0x1d2>
        HAL_GPIO_TogglePin(LEDWay_GPIO_Port, LEDWay_Pin);
 8002eea:	2108      	movs	r1, #8
 8002eec:	483f      	ldr	r0, [pc, #252]	; (8002fec <waypointPathEncoder+0x200>)
 8002eee:	f001 fa42 	bl	8004376 <HAL_GPIO_TogglePin>
        osDelay(200);
 8002ef2:	20c8      	movs	r0, #200	; 0xc8
 8002ef4:	f006 ff43 	bl	8009d7e <osDelay>

        // Parámetros de la parábola
        float a_coeff = 0.005f;  // Mayor curvatura
 8002ef8:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <waypointPathEncoder+0x204>)
 8002efa:	623b      	str	r3, [r7, #32]
        float b_coeff = 0.5f;    // Ajusta pendiente según sea necesario
 8002efc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002f00:	61fb      	str	r3, [r7, #28]
        float c_coeff = 0.0f;    // Offset inicial
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	61bb      	str	r3, [r7, #24]

        // Cálculo de la trayectoria parabólica
        float parabolicY = a_coeff * x * x + b_coeff * x + c_coeff;
 8002f08:	897b      	ldrh	r3, [r7, #10]
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f12:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f1a:	897b      	ldrh	r3, [r7, #10]
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f28:	897b      	ldrh	r3, [r7, #10]
 8002f2a:	ee07 3a90 	vmov	s15, r3
 8002f2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f32:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f3e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f46:	edc7 7a05 	vstr	s15, [r7, #20]

        // Ajuste del servo y velocidad según el valor calculado
        if (parabolicY > 20) {
 8002f4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f4e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002f52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5a:	dd07      	ble.n	8002f6c <waypointPathEncoder+0x180>
            setServoAngle(50);   // Gira a la derecha
 8002f5c:	2032      	movs	r0, #50	; 0x32
 8002f5e:	f7ff ff0f 	bl	8002d80 <setServoAngle>
            setEscSpeed(1350);  // Reducir velocidad
 8002f62:	f240 5046 	movw	r0, #1350	; 0x546
 8002f66:	f7ff ff2f 	bl	8002dc8 <setEscSpeed>
 8002f6a:	e017      	b.n	8002f9c <waypointPathEncoder+0x1b0>
        } else if (parabolicY < 10) {
 8002f6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f70:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7c:	d507      	bpl.n	8002f8e <waypointPathEncoder+0x1a2>
            setServoAngle(130);  // Gira a la izquierda
 8002f7e:	2082      	movs	r0, #130	; 0x82
 8002f80:	f7ff fefe 	bl	8002d80 <setServoAngle>
            setEscSpeed(1350);  // Ajuste de velocidad
 8002f84:	f240 5046 	movw	r0, #1350	; 0x546
 8002f88:	f7ff ff1e 	bl	8002dc8 <setEscSpeed>
 8002f8c:	e006      	b.n	8002f9c <waypointPathEncoder+0x1b0>
        } else {
            setServoAngle(90);   // Recto
 8002f8e:	205a      	movs	r0, #90	; 0x5a
 8002f90:	f7ff fef6 	bl	8002d80 <setServoAngle>
            setEscSpeed(1350);   // Velocidad estándar
 8002f94:	f240 5046 	movw	r0, #1350	; 0x546
 8002f98:	f7ff ff16 	bl	8002dc8 <setEscSpeed>
        }

        printf("Parabolic trajectory: x = %u, y = %.2f, a = %u\n", x, parabolicY, a);
 8002f9c:	8979      	ldrh	r1, [r7, #10]
 8002f9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fa2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fa6:	88fb      	ldrh	r3, [r7, #6]
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	ec53 2b17 	vmov	r2, r3, d7
 8002fae:	4811      	ldr	r0, [pc, #68]	; (8002ff4 <waypointPathEncoder+0x208>)
 8002fb0:	f00a f90c 	bl	800d1cc <iprintf>
        osDelay(500); // Delay para suavidad de movimiento
 8002fb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fb8:	f006 fee1 	bl	8009d7e <osDelay>
 8002fbc:	e003      	b.n	8002fc6 <waypointPathEncoder+0x1da>
    }
    // 3. Handling other zones or fallback behavior
    else {
        osDelay(500); // Ajustar posición si es necesario
 8002fbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fc2:	f006 fedc 	bl	8009d7e <osDelay>
    }
    stopCar();
 8002fc6:	f000 f817 	bl	8002ff8 <stopCar>
    // Delay final para permitir estabilidad
    osDelay(500);
 8002fca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fce:	f006 fed6 	bl	8009d7e <osDelay>
}
 8002fd2:	bf00      	nop
 8002fd4:	3730      	adds	r7, #48	; 0x30
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	3f4ccccd 	.word	0x3f4ccccd
 8002fe0:	0800fda4 	.word	0x0800fda4
 8002fe4:	0800fdd0 	.word	0x0800fdd0
 8002fe8:	0800fdec 	.word	0x0800fdec
 8002fec:	58020000 	.word	0x58020000
 8002ff0:	3ba3d70a 	.word	0x3ba3d70a
 8002ff4:	0800fe14 	.word	0x0800fe14

08002ff8 <stopCar>:

// Function to stop the car
void stopCar() {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
	setServoAngle(90);
 8002ffc:	205a      	movs	r0, #90	; 0x5a
 8002ffe:	f7ff febf 	bl	8002d80 <setServoAngle>
    setEscSpeed(1500); // Neutral position (no movement)
 8003002:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003006:	f7ff fedf 	bl	8002dc8 <setEscSpeed>
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003048 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003014:	f7fd fb3e 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003018:	480c      	ldr	r0, [pc, #48]	; (800304c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800301a:	490d      	ldr	r1, [pc, #52]	; (8003050 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800301c:	4a0d      	ldr	r2, [pc, #52]	; (8003054 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800301e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003020:	e002      	b.n	8003028 <LoopCopyDataInit>

08003022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003026:	3304      	adds	r3, #4

08003028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800302a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800302c:	d3f9      	bcc.n	8003022 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003030:	4c0a      	ldr	r4, [pc, #40]	; (800305c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003034:	e001      	b.n	800303a <LoopFillZerobss>

08003036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003038:	3204      	adds	r2, #4

0800303a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800303a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800303c:	d3fb      	bcc.n	8003036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800303e:	f009 fc49 	bl	800c8d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003042:	f7fe fccf 	bl	80019e4 <main>
  bx  lr
 8003046:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003048:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800304c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003050:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 8003054:	080102dc 	.word	0x080102dc
  ldr r2, =_sbss
 8003058:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 800305c:	240046d0 	.word	0x240046d0

08003060 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003060:	e7fe      	b.n	8003060 <ADC3_IRQHandler>
	...

08003064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800306a:	2003      	movs	r0, #3
 800306c:	f000 f96e 	bl	800334c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003070:	f002 f930 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b15      	ldr	r3, [pc, #84]	; (80030cc <HAL_Init+0x68>)
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	4913      	ldr	r1, [pc, #76]	; (80030d0 <HAL_Init+0x6c>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
 800308c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800308e:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <HAL_Init+0x68>)
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	4a0e      	ldr	r2, [pc, #56]	; (80030d0 <HAL_Init+0x6c>)
 8003098:	5cd3      	ldrb	r3, [r2, r3]
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
 80030a4:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <HAL_Init+0x70>)
 80030a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030a8:	4a0b      	ldr	r2, [pc, #44]	; (80030d8 <HAL_Init+0x74>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030ae:	200f      	movs	r0, #15
 80030b0:	f000 f814 	bl	80030dc <HAL_InitTick>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e002      	b.n	80030c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80030be:	f7ff facb 	bl	8002658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	58024400 	.word	0x58024400
 80030d0:	0800fe98 	.word	0x0800fe98
 80030d4:	24000004 	.word	0x24000004
 80030d8:	24000000 	.word	0x24000000

080030dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80030e4:	4b15      	ldr	r3, [pc, #84]	; (800313c <HAL_InitTick+0x60>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e021      	b.n	8003134 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80030f0:	4b13      	ldr	r3, [pc, #76]	; (8003140 <HAL_InitTick+0x64>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b11      	ldr	r3, [pc, #68]	; (800313c <HAL_InitTick+0x60>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	4619      	mov	r1, r3
 80030fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	4618      	mov	r0, r3
 8003108:	f000 f945 	bl	8003396 <HAL_SYSTICK_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e00e      	b.n	8003134 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b0f      	cmp	r3, #15
 800311a:	d80a      	bhi.n	8003132 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800311c:	2200      	movs	r2, #0
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	f04f 30ff 	mov.w	r0, #4294967295
 8003124:	f000 f91d 	bl	8003362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003128:	4a06      	ldr	r2, [pc, #24]	; (8003144 <HAL_InitTick+0x68>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	e000      	b.n	8003134 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	24000014 	.word	0x24000014
 8003140:	24000000 	.word	0x24000000
 8003144:	24000010 	.word	0x24000010

08003148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_IncTick+0x20>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_IncTick+0x24>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4413      	add	r3, r2
 8003158:	4a04      	ldr	r2, [pc, #16]	; (800316c <HAL_IncTick+0x24>)
 800315a:	6013      	str	r3, [r2, #0]
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	24000014 	.word	0x24000014
 800316c:	24000968 	.word	0x24000968

08003170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return uwTick;
 8003174:	4b03      	ldr	r3, [pc, #12]	; (8003184 <HAL_GetTick+0x14>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	24000968 	.word	0x24000968

08003188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003190:	f7ff ffee 	bl	8003170 <HAL_GetTick>
 8003194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d005      	beq.n	80031ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031a2:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_Delay+0x44>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031ae:	bf00      	nop
 80031b0:	f7ff ffde 	bl	8003170 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d8f7      	bhi.n	80031b0 <HAL_Delay+0x28>
  {
  }
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	24000014 	.word	0x24000014

080031d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <HAL_GetREVID+0x14>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	0c1b      	lsrs	r3, r3, #16
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	5c001000 	.word	0x5c001000

080031e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <__NVIC_SetPriorityGrouping+0x40>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003204:	4013      	ands	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <__NVIC_SetPriorityGrouping+0x44>)
 8003212:	4313      	orrs	r3, r2
 8003214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003216:	4a04      	ldr	r2, [pc, #16]	; (8003228 <__NVIC_SetPriorityGrouping+0x40>)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	60d3      	str	r3, [r2, #12]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00
 800322c:	05fa0000 	.word	0x05fa0000

08003230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003234:	4b04      	ldr	r3, [pc, #16]	; (8003248 <__NVIC_GetPriorityGrouping+0x18>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	f003 0307 	and.w	r3, r3, #7
}
 800323e:	4618      	mov	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	6039      	str	r1, [r7, #0]
 8003256:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003258:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800325c:	2b00      	cmp	r3, #0
 800325e:	db0a      	blt.n	8003276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	490c      	ldr	r1, [pc, #48]	; (8003298 <__NVIC_SetPriority+0x4c>)
 8003266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800326a:	0112      	lsls	r2, r2, #4
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	440b      	add	r3, r1
 8003270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003274:	e00a      	b.n	800328c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4908      	ldr	r1, [pc, #32]	; (800329c <__NVIC_SetPriority+0x50>)
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	3b04      	subs	r3, #4
 8003284:	0112      	lsls	r2, r2, #4
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	440b      	add	r3, r1
 800328a:	761a      	strb	r2, [r3, #24]
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000e100 	.word	0xe000e100
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	; 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f1c3 0307 	rsb	r3, r3, #7
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	bf28      	it	cs
 80032be:	2304      	movcs	r3, #4
 80032c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3304      	adds	r3, #4
 80032c6:	2b06      	cmp	r3, #6
 80032c8:	d902      	bls.n	80032d0 <NVIC_EncodePriority+0x30>
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3b03      	subs	r3, #3
 80032ce:	e000      	b.n	80032d2 <NVIC_EncodePriority+0x32>
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d4:	f04f 32ff 	mov.w	r2, #4294967295
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43da      	mvns	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	401a      	ands	r2, r3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e8:	f04f 31ff 	mov.w	r1, #4294967295
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	fa01 f303 	lsl.w	r3, r1, r3
 80032f2:	43d9      	mvns	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f8:	4313      	orrs	r3, r2
         );
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3724      	adds	r7, #36	; 0x24
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3b01      	subs	r3, #1
 8003314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003318:	d301      	bcc.n	800331e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800331a:	2301      	movs	r3, #1
 800331c:	e00f      	b.n	800333e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800331e:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <SysTick_Config+0x40>)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3b01      	subs	r3, #1
 8003324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003326:	210f      	movs	r1, #15
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	f7ff ff8e 	bl	800324c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003330:	4b05      	ldr	r3, [pc, #20]	; (8003348 <SysTick_Config+0x40>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003336:	4b04      	ldr	r3, [pc, #16]	; (8003348 <SysTick_Config+0x40>)
 8003338:	2207      	movs	r2, #7
 800333a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	e000e010 	.word	0xe000e010

0800334c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff47 	bl	80031e8 <__NVIC_SetPriorityGrouping>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b086      	sub	sp, #24
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003370:	f7ff ff5e 	bl	8003230 <__NVIC_GetPriorityGrouping>
 8003374:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	6978      	ldr	r0, [r7, #20]
 800337c:	f7ff ff90 	bl	80032a0 <NVIC_EncodePriority>
 8003380:	4602      	mov	r2, r0
 8003382:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff5f 	bl	800324c <__NVIC_SetPriority>
}
 800338e:	bf00      	nop
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ffb2 	bl	8003308 <SysTick_Config>
 80033a4:	4603      	mov	r3, r0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b098      	sub	sp, #96	; 0x60
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80033b8:	4a84      	ldr	r2, [pc, #528]	; (80035cc <HAL_FDCAN_Init+0x21c>)
 80033ba:	f107 030c 	add.w	r3, r7, #12
 80033be:	4611      	mov	r1, r2
 80033c0:	224c      	movs	r2, #76	; 0x4c
 80033c2:	4618      	mov	r0, r3
 80033c4:	f009 faaa 	bl	800c91c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e1c6      	b.n	8003760 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a7e      	ldr	r2, [pc, #504]	; (80035d0 <HAL_FDCAN_Init+0x220>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d106      	bne.n	80033ea <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033e4:	461a      	mov	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff f948 	bl	8002694 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699a      	ldr	r2, [r3, #24]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0210 	bic.w	r2, r2, #16
 8003412:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003414:	f7ff feac 	bl	8003170 <HAL_GetTick>
 8003418:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800341a:	e014      	b.n	8003446 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800341c:	f7ff fea8 	bl	8003170 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b0a      	cmp	r3, #10
 8003428:	d90d      	bls.n	8003446 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003430:	f043 0201 	orr.w	r2, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2203      	movs	r2, #3
 800343e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e18c      	b.n	8003760 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b08      	cmp	r3, #8
 8003452:	d0e3      	beq.n	800341c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699a      	ldr	r2, [r3, #24]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003464:	f7ff fe84 	bl	8003170 <HAL_GetTick>
 8003468:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800346a:	e014      	b.n	8003496 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800346c:	f7ff fe80 	bl	8003170 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b0a      	cmp	r3, #10
 8003478:	d90d      	bls.n	8003496 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003480:	f043 0201 	orr.w	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2203      	movs	r2, #3
 800348e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e164      	b.n	8003760 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0e3      	beq.n	800346c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0202 	orr.w	r2, r2, #2
 80034b2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	7c1b      	ldrb	r3, [r3, #16]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d108      	bne.n	80034ce <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ca:	619a      	str	r2, [r3, #24]
 80034cc:	e007      	b.n	80034de <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034dc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	7c5b      	ldrb	r3, [r3, #17]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d108      	bne.n	80034f8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699a      	ldr	r2, [r3, #24]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034f4:	619a      	str	r2, [r3, #24]
 80034f6:	e007      	b.n	8003508 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003506:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	7c9b      	ldrb	r3, [r3, #18]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d108      	bne.n	8003522 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800351e:	619a      	str	r2, [r3, #24]
 8003520:	e007      	b.n	8003532 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699a      	ldr	r2, [r3, #24]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003530:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003556:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0210 	bic.w	r2, r2, #16
 8003566:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d108      	bne.n	8003582 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0204 	orr.w	r2, r2, #4
 800357e:	619a      	str	r2, [r3, #24]
 8003580:	e030      	b.n	80035e4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d02c      	beq.n	80035e4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d020      	beq.n	80035d4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699a      	ldr	r2, [r3, #24]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035a0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0210 	orr.w	r2, r2, #16
 80035b0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d114      	bne.n	80035e4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699a      	ldr	r2, [r3, #24]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0220 	orr.w	r2, r2, #32
 80035c8:	619a      	str	r2, [r3, #24]
 80035ca:	e00b      	b.n	80035e4 <HAL_FDCAN_Init+0x234>
 80035cc:	0800fe44 	.word	0x0800fe44
 80035d0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0220 	orr.w	r2, r2, #32
 80035e2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035f4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80035fc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	3b01      	subs	r3, #1
 8003606:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800360c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800360e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003618:	d115      	bne.n	8003646 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	3b01      	subs	r3, #1
 8003626:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003628:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	3b01      	subs	r3, #1
 8003630:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003632:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	3b01      	subs	r3, #1
 800363c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003642:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003644:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366c:	4413      	add	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d011      	beq.n	8003696 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800367a:	f023 0107 	bic.w	r1, r3, #7
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	3360      	adds	r3, #96	; 0x60
 8003686:	443b      	add	r3, r7
 8003688:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d011      	beq.n	80036c2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036a6:	f023 0107 	bic.w	r1, r3, #7
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	3360      	adds	r3, #96	; 0x60
 80036b2:	443b      	add	r3, r7
 80036b4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d012      	beq.n	80036f0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036d2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	3360      	adds	r3, #96	; 0x60
 80036de:	443b      	add	r3, r7
 80036e0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80036e4:	011a      	lsls	r2, r3, #4
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d012      	beq.n	800371e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003700:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	3360      	adds	r3, #96	; 0x60
 800370c:	443b      	add	r3, r7
 800370e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003712:	021a      	lsls	r2, r3, #8
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a11      	ldr	r2, [pc, #68]	; (8003768 <HAL_FDCAN_Init+0x3b8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d107      	bne.n	8003738 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f022 0203 	bic.w	r2, r2, #3
 8003736:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fac1 	bl	8003cd8 <FDCAN_CalcultateRamBlockAddresses>
 8003756:	4603      	mov	r3, r0
 8003758:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800375c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003760:	4618      	mov	r0, r3
 8003762:	3760      	adds	r7, #96	; 0x60
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	4000a000 	.word	0x4000a000

0800376c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800377c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d002      	beq.n	800378a <HAL_FDCAN_ConfigFilter+0x1e>
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d157      	bne.n	800383a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d12b      	bne.n	80037ea <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2b07      	cmp	r3, #7
 8003798:	d10d      	bne.n	80037b6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80037a6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80037ac:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80037ae:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	e00e      	b.n	80037d4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80037c2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80037ca:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	e025      	b.n	8003836 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	075a      	lsls	r2, r3, #29
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	2b07      	cmp	r3, #7
 80037fe:	d103      	bne.n	8003808 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	e006      	b.n	8003816 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	079a      	lsls	r2, r3, #30
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	3304      	adds	r3, #4
 800382e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e008      	b.n	800384c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003840:	f043 0202 	orr.w	r2, r3, #2
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
  }
}
 800384c:	4618      	mov	r0, r3
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d110      	bne.n	8003894 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800387a:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003880:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800388c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	e008      	b.n	80038a6 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800389a:	f043 0204 	orr.w	r2, r3, #4
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
  }
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d111      	bne.n	80038ea <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2202      	movs	r2, #2
 80038ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699a      	ldr	r2, [r3, #24]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e008      	b.n	80038fc <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038f0:	f043 0204 	orr.w	r2, r3, #4
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
  }
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003908:	b480      	push	{r7}
 800390a:	b08b      	sub	sp, #44	; 0x2c
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003920:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8003922:	7efb      	ldrb	r3, [r7, #27]
 8003924:	2b02      	cmp	r3, #2
 8003926:	f040 814b 	bne.w	8003bc0 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b40      	cmp	r3, #64	; 0x40
 800392e:	d14d      	bne.n	80039cc <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003938:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003946:	f043 0220 	orr.w	r2, r3, #32
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e13e      	b.n	8003bd2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800395c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003960:	2b00      	cmp	r3, #0
 8003962:	d109      	bne.n	8003978 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800396a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e12c      	b.n	8003bd2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003980:	0e1b      	lsrs	r3, r3, #24
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b01      	cmp	r3, #1
 8003988:	d10b      	bne.n	80039a2 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003992:	0fdb      	lsrs	r3, r3, #31
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800399c:	d101      	bne.n	80039a2 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800399e:	2301      	movs	r3, #1
 80039a0:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039b0:	69fa      	ldr	r2, [r7, #28]
 80039b2:	4413      	add	r3, r2
 80039b4:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	69f9      	ldr	r1, [r7, #28]
 80039c0:	fb01 f303 	mul.w	r3, r1, r3
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ca:	e069      	b.n	8003aa0 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b41      	cmp	r3, #65	; 0x41
 80039d0:	d14d      	bne.n	8003a6e <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039e8:	f043 0220 	orr.w	r2, r3, #32
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0ed      	b.n	8003bd2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e0db      	b.n	8003bd2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a22:	0e1b      	lsrs	r3, r3, #24
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d10b      	bne.n	8003a44 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a34:	0fdb      	lsrs	r3, r3, #31
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a3e:	d101      	bne.n	8003a44 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003a40:	2301      	movs	r3, #1
 8003a42:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a4c:	0a1b      	lsrs	r3, r3, #8
 8003a4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a52:	69fa      	ldr	r2, [r7, #28]
 8003a54:	4413      	add	r3, r2
 8003a56:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a60:	69f9      	ldr	r1, [r7, #28]
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6c:	e018      	b.n	8003aa0 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d309      	bcc.n	8003a8c <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a7e:	f043 0220 	orr.w	r2, r3, #32
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0a2      	b.n	8003bd2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	fb01 f303 	mul.w	r3, r1, r3
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d107      	bne.n	8003ac4 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	0c9b      	lsrs	r3, r3, #18
 8003aba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e005      	b.n	8003ad0 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	3304      	adds	r3, #4
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	0e1b      	lsrs	r3, r3, #24
 8003b22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	0fda      	lsrs	r2, r3, #31
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	3304      	adds	r3, #4
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	623b      	str	r3, [r7, #32]
 8003b42:	e00a      	b.n	8003b5a <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	441a      	add	r2, r3
 8003b4a:	6839      	ldr	r1, [r7, #0]
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	440b      	add	r3, r1
 8003b50:	7812      	ldrb	r2, [r2, #0]
 8003b52:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	3301      	adds	r3, #1
 8003b58:	623b      	str	r3, [r7, #32]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	0c1b      	lsrs	r3, r3, #16
 8003b60:	4a1f      	ldr	r2, [pc, #124]	; (8003be0 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8003b62:	5cd3      	ldrb	r3, [r2, r3]
 8003b64:	461a      	mov	r2, r3
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d3eb      	bcc.n	8003b44 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	d105      	bne.n	8003b7e <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003b7c:	e01e      	b.n	8003bbc <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b41      	cmp	r3, #65	; 0x41
 8003b82:	d105      	bne.n	8003b90 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003b8e:	e015      	b.n	8003bbc <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b1f      	cmp	r3, #31
 8003b94:	d808      	bhi.n	8003ba8 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003ba6:	e009      	b.n	8003bbc <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f003 021f 	and.w	r2, r3, #31
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	e008      	b.n	8003bd2 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bc6:	f043 0208 	orr.w	r2, r3, #8
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	372c      	adds	r7, #44	; 0x2c
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	0800feb8 	.word	0x0800feb8

08003be4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003bf6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003bf8:	7dfb      	ldrb	r3, [r7, #23]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d002      	beq.n	8003c04 <HAL_FDCAN_ActivateNotification+0x20>
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d155      	bne.n	8003cb0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d108      	bne.n	8003c24 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c22:	e014      	b.n	8003c4e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d108      	bne.n	8003c46 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0202 	orr.w	r2, r2, #2
 8003c42:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c44:	e003      	b.n	8003c4e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d009      	beq.n	8003c6c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <HAL_FDCAN_ActivateNotification+0xec>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	6812      	ldr	r2, [r2, #0]
 8003c9a:	430b      	orrs	r3, r1
 8003c9c:	6553      	str	r3, [r2, #84]	; 0x54
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	0f9b      	lsrs	r3, r3, #30
 8003ca6:	490b      	ldr	r1, [pc, #44]	; (8003cd4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e008      	b.n	8003cc2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cb6:	f043 0202 	orr.w	r2, r3, #2
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
  }
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	3fcfffff 	.word	0x3fcfffff
 8003cd4:	4000a800 	.word	0x4000a800

08003cd8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003cee:	4ba7      	ldr	r3, [pc, #668]	; (8003f8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	0091      	lsls	r1, r2, #2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d08:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	041a      	lsls	r2, r3, #16
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	4413      	add	r3, r2
 8003d24:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d2e:	4b97      	ldr	r3, [pc, #604]	; (8003f8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	0091      	lsls	r1, r2, #2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d48:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d50:	041a      	lsls	r2, r3, #16
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	4413      	add	r3, r2
 8003d66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003d70:	4b86      	ldr	r3, [pc, #536]	; (8003f8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d72:	4013      	ands	r3, r2
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	0091      	lsls	r1, r2, #2
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d8a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	041a      	lsls	r2, r3, #16
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003da6:	fb02 f303 	mul.w	r3, r2, r3
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	4413      	add	r3, r2
 8003dae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003db8:	4b74      	ldr	r3, [pc, #464]	; (8003f8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	0091      	lsls	r1, r2, #2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dd2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dda:	041a      	lsls	r2, r3, #16
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003dee:	fb02 f303 	mul.w	r3, r2, r3
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	4413      	add	r3, r2
 8003df6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003e00:	4b62      	ldr	r3, [pc, #392]	; (8003f8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	0091      	lsls	r1, r2, #2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	4413      	add	r3, r2
 8003e22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003e2c:	4b57      	ldr	r3, [pc, #348]	; (8003f8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	0091      	lsls	r1, r2, #2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e46:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4e:	041a      	lsls	r2, r3, #16
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	4413      	add	r3, r2
 8003e64:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003e6e:	4b47      	ldr	r3, [pc, #284]	; (8003f8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	0091      	lsls	r1, r2, #2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	430b      	orrs	r3, r1
 8003e7c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003e88:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e90:	041a      	lsls	r2, r3, #16
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ea4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eac:	061a      	lsls	r2, r3, #24
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ebc:	4b34      	ldr	r3, [pc, #208]	; (8003f90 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009a      	lsls	r2, r3, #2
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	441a      	add	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	441a      	add	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	441a      	add	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003f0a:	fb01 f303 	mul.w	r3, r1, r3
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	441a      	add	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003f22:	fb01 f303 	mul.w	r3, r1, r3
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	441a      	add	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	441a      	add	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	441a      	add	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	441a      	add	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	4a04      	ldr	r2, [pc, #16]	; (8003f94 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d915      	bls.n	8003fb4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003f88:	e006      	b.n	8003f98 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003f8a:	bf00      	nop
 8003f8c:	ffff0003 	.word	0xffff0003
 8003f90:	10002b00 	.word	0x10002b00
 8003f94:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f9e:	f043 0220 	orr.w	r2, r3, #32
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2203      	movs	r2, #3
 8003fac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e010      	b.n	8003fd6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	e005      	b.n	8003fc8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d3f3      	bcc.n	8003fbc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop

08003fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b089      	sub	sp, #36	; 0x24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003ff2:	4b89      	ldr	r3, [pc, #548]	; (8004218 <HAL_GPIO_Init+0x234>)
 8003ff4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ff6:	e194      	b.n	8004322 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	fa01 f303 	lsl.w	r3, r1, r3
 8004004:	4013      	ands	r3, r2
 8004006:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 8186 	beq.w	800431c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	2b01      	cmp	r3, #1
 800401a:	d005      	beq.n	8004028 <HAL_GPIO_Init+0x44>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d130      	bne.n	800408a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	2203      	movs	r2, #3
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	43db      	mvns	r3, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4313      	orrs	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800405e:	2201      	movs	r2, #1
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4013      	ands	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	f003 0201 	and.w	r2, r3, #1
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4313      	orrs	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	2b03      	cmp	r3, #3
 8004094:	d017      	beq.n	80040c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	2203      	movs	r2, #3
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43db      	mvns	r3, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4013      	ands	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d123      	bne.n	800411a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	08da      	lsrs	r2, r3, #3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3208      	adds	r2, #8
 80040da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	220f      	movs	r2, #15
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4013      	ands	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4313      	orrs	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	08da      	lsrs	r2, r3, #3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3208      	adds	r2, #8
 8004114:	69b9      	ldr	r1, [r7, #24]
 8004116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	2203      	movs	r2, #3
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43db      	mvns	r3, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f003 0203 	and.w	r2, r3, #3
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 80e0 	beq.w	800431c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800415c:	4b2f      	ldr	r3, [pc, #188]	; (800421c <HAL_GPIO_Init+0x238>)
 800415e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004162:	4a2e      	ldr	r2, [pc, #184]	; (800421c <HAL_GPIO_Init+0x238>)
 8004164:	f043 0302 	orr.w	r3, r3, #2
 8004168:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800416c:	4b2b      	ldr	r3, [pc, #172]	; (800421c <HAL_GPIO_Init+0x238>)
 800416e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800417a:	4a29      	ldr	r2, [pc, #164]	; (8004220 <HAL_GPIO_Init+0x23c>)
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	089b      	lsrs	r3, r3, #2
 8004180:	3302      	adds	r3, #2
 8004182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	220f      	movs	r2, #15
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	43db      	mvns	r3, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4013      	ands	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a20      	ldr	r2, [pc, #128]	; (8004224 <HAL_GPIO_Init+0x240>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d052      	beq.n	800424c <HAL_GPIO_Init+0x268>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <HAL_GPIO_Init+0x244>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d031      	beq.n	8004212 <HAL_GPIO_Init+0x22e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a1e      	ldr	r2, [pc, #120]	; (800422c <HAL_GPIO_Init+0x248>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d02b      	beq.n	800420e <HAL_GPIO_Init+0x22a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <HAL_GPIO_Init+0x24c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d025      	beq.n	800420a <HAL_GPIO_Init+0x226>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a1c      	ldr	r2, [pc, #112]	; (8004234 <HAL_GPIO_Init+0x250>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d01f      	beq.n	8004206 <HAL_GPIO_Init+0x222>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a1b      	ldr	r2, [pc, #108]	; (8004238 <HAL_GPIO_Init+0x254>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d019      	beq.n	8004202 <HAL_GPIO_Init+0x21e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a1a      	ldr	r2, [pc, #104]	; (800423c <HAL_GPIO_Init+0x258>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <HAL_GPIO_Init+0x21a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a19      	ldr	r2, [pc, #100]	; (8004240 <HAL_GPIO_Init+0x25c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00d      	beq.n	80041fa <HAL_GPIO_Init+0x216>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a18      	ldr	r2, [pc, #96]	; (8004244 <HAL_GPIO_Init+0x260>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d007      	beq.n	80041f6 <HAL_GPIO_Init+0x212>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a17      	ldr	r2, [pc, #92]	; (8004248 <HAL_GPIO_Init+0x264>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d101      	bne.n	80041f2 <HAL_GPIO_Init+0x20e>
 80041ee:	2309      	movs	r3, #9
 80041f0:	e02d      	b.n	800424e <HAL_GPIO_Init+0x26a>
 80041f2:	230a      	movs	r3, #10
 80041f4:	e02b      	b.n	800424e <HAL_GPIO_Init+0x26a>
 80041f6:	2308      	movs	r3, #8
 80041f8:	e029      	b.n	800424e <HAL_GPIO_Init+0x26a>
 80041fa:	2307      	movs	r3, #7
 80041fc:	e027      	b.n	800424e <HAL_GPIO_Init+0x26a>
 80041fe:	2306      	movs	r3, #6
 8004200:	e025      	b.n	800424e <HAL_GPIO_Init+0x26a>
 8004202:	2305      	movs	r3, #5
 8004204:	e023      	b.n	800424e <HAL_GPIO_Init+0x26a>
 8004206:	2304      	movs	r3, #4
 8004208:	e021      	b.n	800424e <HAL_GPIO_Init+0x26a>
 800420a:	2303      	movs	r3, #3
 800420c:	e01f      	b.n	800424e <HAL_GPIO_Init+0x26a>
 800420e:	2302      	movs	r3, #2
 8004210:	e01d      	b.n	800424e <HAL_GPIO_Init+0x26a>
 8004212:	2301      	movs	r3, #1
 8004214:	e01b      	b.n	800424e <HAL_GPIO_Init+0x26a>
 8004216:	bf00      	nop
 8004218:	58000080 	.word	0x58000080
 800421c:	58024400 	.word	0x58024400
 8004220:	58000400 	.word	0x58000400
 8004224:	58020000 	.word	0x58020000
 8004228:	58020400 	.word	0x58020400
 800422c:	58020800 	.word	0x58020800
 8004230:	58020c00 	.word	0x58020c00
 8004234:	58021000 	.word	0x58021000
 8004238:	58021400 	.word	0x58021400
 800423c:	58021800 	.word	0x58021800
 8004240:	58021c00 	.word	0x58021c00
 8004244:	58022000 	.word	0x58022000
 8004248:	58022400 	.word	0x58022400
 800424c:	2300      	movs	r3, #0
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	f002 0203 	and.w	r2, r2, #3
 8004254:	0092      	lsls	r2, r2, #2
 8004256:	4093      	lsls	r3, r2
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4313      	orrs	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800425e:	4938      	ldr	r1, [pc, #224]	; (8004340 <HAL_GPIO_Init+0x35c>)
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	089b      	lsrs	r3, r3, #2
 8004264:	3302      	adds	r3, #2
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800426c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	43db      	mvns	r3, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4013      	ands	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004292:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800429a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80042c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	43db      	mvns	r3, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4013      	ands	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	3301      	adds	r3, #1
 8004320:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	fa22 f303 	lsr.w	r3, r2, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	f47f ae63 	bne.w	8003ff8 <HAL_GPIO_Init+0x14>
  }
}
 8004332:	bf00      	nop
 8004334:	bf00      	nop
 8004336:	3724      	adds	r7, #36	; 0x24
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	58000400 	.word	0x58000400

08004344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	807b      	strh	r3, [r7, #2]
 8004350:	4613      	mov	r3, r2
 8004352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004354:	787b      	ldrb	r3, [r7, #1]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800435a:	887a      	ldrh	r2, [r7, #2]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004360:	e003      	b.n	800436a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004362:	887b      	ldrh	r3, [r7, #2]
 8004364:	041a      	lsls	r2, r3, #16
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	619a      	str	r2, [r3, #24]
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004376:	b480      	push	{r7}
 8004378:	b085      	sub	sp, #20
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	460b      	mov	r3, r1
 8004380:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004388:	887a      	ldrh	r2, [r7, #2]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4013      	ands	r3, r2
 800438e:	041a      	lsls	r2, r3, #16
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	43d9      	mvns	r1, r3
 8004394:	887b      	ldrh	r3, [r7, #2]
 8004396:	400b      	ands	r3, r1
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	619a      	str	r2, [r3, #24]
}
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80043b4:	4a08      	ldr	r2, [pc, #32]	; (80043d8 <HAL_HSEM_FastTake+0x2c>)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3320      	adds	r3, #32
 80043ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043be:	4a07      	ldr	r2, [pc, #28]	; (80043dc <HAL_HSEM_FastTake+0x30>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d101      	bne.n	80043c8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e000      	b.n	80043ca <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	58026400 	.word	0x58026400
 80043dc:	80000300 	.word	0x80000300

080043e0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80043ea:	4906      	ldr	r1, [pc, #24]	; (8004404 <HAL_HSEM_Release+0x24>)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	58026400 	.word	0x58026400

08004408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e07f      	b.n	800451a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fe f996 	bl	8002760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2224      	movs	r2, #36	; 0x24
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004458:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004468:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d107      	bne.n	8004482 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	e006      	b.n	8004490 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800448e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d104      	bne.n	80044a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6859      	ldr	r1, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <HAL_I2C_Init+0x11c>)
 80044ae:	430b      	orrs	r3, r1
 80044b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69d9      	ldr	r1, [r3, #28]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1a      	ldr	r2, [r3, #32]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	02008000 	.word	0x02008000

08004528 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b20      	cmp	r3, #32
 800453c:	d138      	bne.n	80045b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004548:	2302      	movs	r3, #2
 800454a:	e032      	b.n	80045b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2224      	movs	r2, #36	; 0x24
 8004558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0201 	bic.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800457a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6819      	ldr	r1, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e000      	b.n	80045b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045b0:	2302      	movs	r3, #2
  }
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045be:	b480      	push	{r7}
 80045c0:	b085      	sub	sp, #20
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d139      	bne.n	8004648 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045de:	2302      	movs	r3, #2
 80045e0:	e033      	b.n	800464a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2224      	movs	r2, #36	; 0x24
 80045ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0201 	bic.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004610:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	e000      	b.n	800464a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004648:	2302      	movs	r3, #2
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
	...

08004658 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004660:	4b29      	ldr	r3, [pc, #164]	; (8004708 <HAL_PWREx_ConfigSupply+0xb0>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	2b06      	cmp	r3, #6
 800466a:	d00a      	beq.n	8004682 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800466c:	4b26      	ldr	r3, [pc, #152]	; (8004708 <HAL_PWREx_ConfigSupply+0xb0>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	429a      	cmp	r2, r3
 8004678:	d001      	beq.n	800467e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e040      	b.n	8004700 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	e03e      	b.n	8004700 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004682:	4b21      	ldr	r3, [pc, #132]	; (8004708 <HAL_PWREx_ConfigSupply+0xb0>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800468a:	491f      	ldr	r1, [pc, #124]	; (8004708 <HAL_PWREx_ConfigSupply+0xb0>)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4313      	orrs	r3, r2
 8004690:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004692:	f7fe fd6d 	bl	8003170 <HAL_GetTick>
 8004696:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004698:	e009      	b.n	80046ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800469a:	f7fe fd69 	bl	8003170 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046a8:	d901      	bls.n	80046ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e028      	b.n	8004700 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046ae:	4b16      	ldr	r3, [pc, #88]	; (8004708 <HAL_PWREx_ConfigSupply+0xb0>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ba:	d1ee      	bne.n	800469a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b1e      	cmp	r3, #30
 80046c0:	d008      	beq.n	80046d4 <HAL_PWREx_ConfigSupply+0x7c>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b2e      	cmp	r3, #46	; 0x2e
 80046c6:	d005      	beq.n	80046d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b1d      	cmp	r3, #29
 80046cc:	d002      	beq.n	80046d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b2d      	cmp	r3, #45	; 0x2d
 80046d2:	d114      	bne.n	80046fe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80046d4:	f7fe fd4c 	bl	8003170 <HAL_GetTick>
 80046d8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80046da:	e009      	b.n	80046f0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046dc:	f7fe fd48 	bl	8003170 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046ea:	d901      	bls.n	80046f0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e007      	b.n	8004700 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <HAL_PWREx_ConfigSupply+0xb0>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fc:	d1ee      	bne.n	80046dc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	58024800 	.word	0x58024800

0800470c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08c      	sub	sp, #48	; 0x30
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f000 bc1d 	b.w	8004f5a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8087 	beq.w	800483c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800472e:	4b99      	ldr	r3, [pc, #612]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004736:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004738:	4b96      	ldr	r3, [pc, #600]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	2b10      	cmp	r3, #16
 8004742:	d007      	beq.n	8004754 <HAL_RCC_OscConfig+0x48>
 8004744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004746:	2b18      	cmp	r3, #24
 8004748:	d110      	bne.n	800476c <HAL_RCC_OscConfig+0x60>
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	f003 0303 	and.w	r3, r3, #3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d10b      	bne.n	800476c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004754:	4b8f      	ldr	r3, [pc, #572]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d06c      	beq.n	800483a <HAL_RCC_OscConfig+0x12e>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d168      	bne.n	800483a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e3f6      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004774:	d106      	bne.n	8004784 <HAL_RCC_OscConfig+0x78>
 8004776:	4b87      	ldr	r3, [pc, #540]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a86      	ldr	r2, [pc, #536]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 800477c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	e02e      	b.n	80047e2 <HAL_RCC_OscConfig+0xd6>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10c      	bne.n	80047a6 <HAL_RCC_OscConfig+0x9a>
 800478c:	4b81      	ldr	r3, [pc, #516]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a80      	ldr	r2, [pc, #512]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 8004792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b7e      	ldr	r3, [pc, #504]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a7d      	ldr	r2, [pc, #500]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 800479e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	e01d      	b.n	80047e2 <HAL_RCC_OscConfig+0xd6>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047ae:	d10c      	bne.n	80047ca <HAL_RCC_OscConfig+0xbe>
 80047b0:	4b78      	ldr	r3, [pc, #480]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a77      	ldr	r2, [pc, #476]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 80047b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	4b75      	ldr	r3, [pc, #468]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a74      	ldr	r2, [pc, #464]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 80047c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c6:	6013      	str	r3, [r2, #0]
 80047c8:	e00b      	b.n	80047e2 <HAL_RCC_OscConfig+0xd6>
 80047ca:	4b72      	ldr	r3, [pc, #456]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a71      	ldr	r2, [pc, #452]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 80047d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	4b6f      	ldr	r3, [pc, #444]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a6e      	ldr	r2, [pc, #440]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 80047dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d013      	beq.n	8004812 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ea:	f7fe fcc1 	bl	8003170 <HAL_GetTick>
 80047ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047f2:	f7fe fcbd 	bl	8003170 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b64      	cmp	r3, #100	; 0x64
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e3aa      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004804:	4b63      	ldr	r3, [pc, #396]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0f0      	beq.n	80047f2 <HAL_RCC_OscConfig+0xe6>
 8004810:	e014      	b.n	800483c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7fe fcad 	bl	8003170 <HAL_GetTick>
 8004816:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800481a:	f7fe fca9 	bl	8003170 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b64      	cmp	r3, #100	; 0x64
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e396      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800482c:	4b59      	ldr	r3, [pc, #356]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1f0      	bne.n	800481a <HAL_RCC_OscConfig+0x10e>
 8004838:	e000      	b.n	800483c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800483a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80cb 	beq.w	80049e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800484a:	4b52      	ldr	r3, [pc, #328]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004852:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004854:	4b4f      	ldr	r3, [pc, #316]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <HAL_RCC_OscConfig+0x164>
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	2b18      	cmp	r3, #24
 8004864:	d156      	bne.n	8004914 <HAL_RCC_OscConfig+0x208>
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d151      	bne.n	8004914 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004870:	4b48      	ldr	r3, [pc, #288]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_RCC_OscConfig+0x17c>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e368      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004888:	4b42      	ldr	r3, [pc, #264]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f023 0219 	bic.w	r2, r3, #25
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	493f      	ldr	r1, [pc, #252]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 8004896:	4313      	orrs	r3, r2
 8004898:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800489a:	f7fe fc69 	bl	8003170 <HAL_GetTick>
 800489e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048a2:	f7fe fc65 	bl	8003170 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e352      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048b4:	4b37      	ldr	r3, [pc, #220]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0f0      	beq.n	80048a2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c0:	f7fe fc86 	bl	80031d0 <HAL_GetREVID>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d817      	bhi.n	80048fe <HAL_RCC_OscConfig+0x1f2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2b40      	cmp	r3, #64	; 0x40
 80048d4:	d108      	bne.n	80048e8 <HAL_RCC_OscConfig+0x1dc>
 80048d6:	4b2f      	ldr	r3, [pc, #188]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80048de:	4a2d      	ldr	r2, [pc, #180]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 80048e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048e4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048e6:	e07b      	b.n	80049e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e8:	4b2a      	ldr	r3, [pc, #168]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	031b      	lsls	r3, r3, #12
 80048f6:	4927      	ldr	r1, [pc, #156]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048fc:	e070      	b.n	80049e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fe:	4b25      	ldr	r3, [pc, #148]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	061b      	lsls	r3, r3, #24
 800490c:	4921      	ldr	r1, [pc, #132]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 800490e:	4313      	orrs	r3, r2
 8004910:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004912:	e065      	b.n	80049e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d048      	beq.n	80049ae <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800491c:	4b1d      	ldr	r3, [pc, #116]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 0219 	bic.w	r2, r3, #25
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	491a      	ldr	r1, [pc, #104]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 800492a:	4313      	orrs	r3, r2
 800492c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492e:	f7fe fc1f 	bl	8003170 <HAL_GetTick>
 8004932:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004936:	f7fe fc1b 	bl	8003170 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e308      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004948:	4b12      	ldr	r3, [pc, #72]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0f0      	beq.n	8004936 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004954:	f7fe fc3c 	bl	80031d0 <HAL_GetREVID>
 8004958:	4603      	mov	r3, r0
 800495a:	f241 0203 	movw	r2, #4099	; 0x1003
 800495e:	4293      	cmp	r3, r2
 8004960:	d81a      	bhi.n	8004998 <HAL_RCC_OscConfig+0x28c>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b40      	cmp	r3, #64	; 0x40
 8004968:	d108      	bne.n	800497c <HAL_RCC_OscConfig+0x270>
 800496a:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004972:	4a08      	ldr	r2, [pc, #32]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 8004974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004978:	6053      	str	r3, [r2, #4]
 800497a:	e031      	b.n	80049e0 <HAL_RCC_OscConfig+0x2d4>
 800497c:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	031b      	lsls	r3, r3, #12
 800498a:	4902      	ldr	r1, [pc, #8]	; (8004994 <HAL_RCC_OscConfig+0x288>)
 800498c:	4313      	orrs	r3, r2
 800498e:	604b      	str	r3, [r1, #4]
 8004990:	e026      	b.n	80049e0 <HAL_RCC_OscConfig+0x2d4>
 8004992:	bf00      	nop
 8004994:	58024400 	.word	0x58024400
 8004998:	4b9a      	ldr	r3, [pc, #616]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	061b      	lsls	r3, r3, #24
 80049a6:	4997      	ldr	r1, [pc, #604]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	604b      	str	r3, [r1, #4]
 80049ac:	e018      	b.n	80049e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ae:	4b95      	ldr	r3, [pc, #596]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a94      	ldr	r2, [pc, #592]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 80049b4:	f023 0301 	bic.w	r3, r3, #1
 80049b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ba:	f7fe fbd9 	bl	8003170 <HAL_GetTick>
 80049be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049c0:	e008      	b.n	80049d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049c2:	f7fe fbd5 	bl	8003170 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e2c2      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049d4:	4b8b      	ldr	r3, [pc, #556]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1f0      	bne.n	80049c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 80a9 	beq.w	8004b40 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ee:	4b85      	ldr	r3, [pc, #532]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049f8:	4b82      	ldr	r3, [pc, #520]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d007      	beq.n	8004a14 <HAL_RCC_OscConfig+0x308>
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b18      	cmp	r3, #24
 8004a08:	d13a      	bne.n	8004a80 <HAL_RCC_OscConfig+0x374>
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d135      	bne.n	8004a80 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a14:	4b7b      	ldr	r3, [pc, #492]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_RCC_OscConfig+0x320>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	2b80      	cmp	r3, #128	; 0x80
 8004a26:	d001      	beq.n	8004a2c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e296      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a2c:	f7fe fbd0 	bl	80031d0 <HAL_GetREVID>
 8004a30:	4603      	mov	r3, r0
 8004a32:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d817      	bhi.n	8004a6a <HAL_RCC_OscConfig+0x35e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d108      	bne.n	8004a54 <HAL_RCC_OscConfig+0x348>
 8004a42:	4b70      	ldr	r3, [pc, #448]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004a4a:	4a6e      	ldr	r2, [pc, #440]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004a4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a50:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a52:	e075      	b.n	8004b40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a54:	4b6b      	ldr	r3, [pc, #428]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	069b      	lsls	r3, r3, #26
 8004a62:	4968      	ldr	r1, [pc, #416]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a68:	e06a      	b.n	8004b40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a6a:	4b66      	ldr	r3, [pc, #408]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	061b      	lsls	r3, r3, #24
 8004a78:	4962      	ldr	r1, [pc, #392]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a7e:	e05f      	b.n	8004b40 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d042      	beq.n	8004b0e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004a88:	4b5e      	ldr	r3, [pc, #376]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a5d      	ldr	r2, [pc, #372]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fe fb6c 	bl	8003170 <HAL_GetTick>
 8004a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004a9c:	f7fe fb68 	bl	8003170 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e255      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004aae:	4b55      	ldr	r3, [pc, #340]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004aba:	f7fe fb89 	bl	80031d0 <HAL_GetREVID>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d817      	bhi.n	8004af8 <HAL_RCC_OscConfig+0x3ec>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d108      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x3d6>
 8004ad0:	4b4c      	ldr	r3, [pc, #304]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004ad8:	4a4a      	ldr	r2, [pc, #296]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004ada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ade:	6053      	str	r3, [r2, #4]
 8004ae0:	e02e      	b.n	8004b40 <HAL_RCC_OscConfig+0x434>
 8004ae2:	4b48      	ldr	r3, [pc, #288]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	069b      	lsls	r3, r3, #26
 8004af0:	4944      	ldr	r1, [pc, #272]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	604b      	str	r3, [r1, #4]
 8004af6:	e023      	b.n	8004b40 <HAL_RCC_OscConfig+0x434>
 8004af8:	4b42      	ldr	r3, [pc, #264]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	061b      	lsls	r3, r3, #24
 8004b06:	493f      	ldr	r1, [pc, #252]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	60cb      	str	r3, [r1, #12]
 8004b0c:	e018      	b.n	8004b40 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004b0e:	4b3d      	ldr	r3, [pc, #244]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a3c      	ldr	r2, [pc, #240]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1a:	f7fe fb29 	bl	8003170 <HAL_GetTick>
 8004b1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b20:	e008      	b.n	8004b34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004b22:	f7fe fb25 	bl	8003170 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e212      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b34:	4b33      	ldr	r3, [pc, #204]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f0      	bne.n	8004b22 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d036      	beq.n	8004bba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d019      	beq.n	8004b88 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b54:	4b2b      	ldr	r3, [pc, #172]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b58:	4a2a      	ldr	r2, [pc, #168]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004b5a:	f043 0301 	orr.w	r3, r3, #1
 8004b5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b60:	f7fe fb06 	bl	8003170 <HAL_GetTick>
 8004b64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b68:	f7fe fb02 	bl	8003170 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e1ef      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b7a:	4b22      	ldr	r3, [pc, #136]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0f0      	beq.n	8004b68 <HAL_RCC_OscConfig+0x45c>
 8004b86:	e018      	b.n	8004bba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b88:	4b1e      	ldr	r3, [pc, #120]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b8c:	4a1d      	ldr	r2, [pc, #116]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b94:	f7fe faec 	bl	8003170 <HAL_GetTick>
 8004b98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b9c:	f7fe fae8 	bl	8003170 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e1d5      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004bae:	4b15      	ldr	r3, [pc, #84]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d039      	beq.n	8004c3a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01c      	beq.n	8004c08 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bce:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a0c      	ldr	r2, [pc, #48]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004bd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004bda:	f7fe fac9 	bl	8003170 <HAL_GetTick>
 8004bde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004be2:	f7fe fac5 	bl	8003170 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e1b2      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0f0      	beq.n	8004be2 <HAL_RCC_OscConfig+0x4d6>
 8004c00:	e01b      	b.n	8004c3a <HAL_RCC_OscConfig+0x52e>
 8004c02:	bf00      	nop
 8004c04:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c08:	4b9b      	ldr	r3, [pc, #620]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a9a      	ldr	r2, [pc, #616]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c14:	f7fe faac 	bl	8003170 <HAL_GetTick>
 8004c18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004c1c:	f7fe faa8 	bl	8003170 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e195      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c2e:	4b92      	ldr	r3, [pc, #584]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f0      	bne.n	8004c1c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 8081 	beq.w	8004d4a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c48:	4b8c      	ldr	r3, [pc, #560]	; (8004e7c <HAL_RCC_OscConfig+0x770>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a8b      	ldr	r2, [pc, #556]	; (8004e7c <HAL_RCC_OscConfig+0x770>)
 8004c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c54:	f7fe fa8c 	bl	8003170 <HAL_GetTick>
 8004c58:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c5c:	f7fe fa88 	bl	8003170 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b64      	cmp	r3, #100	; 0x64
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e175      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c6e:	4b83      	ldr	r3, [pc, #524]	; (8004e7c <HAL_RCC_OscConfig+0x770>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f0      	beq.n	8004c5c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d106      	bne.n	8004c90 <HAL_RCC_OscConfig+0x584>
 8004c82:	4b7d      	ldr	r3, [pc, #500]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c86:	4a7c      	ldr	r2, [pc, #496]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004c88:	f043 0301 	orr.w	r3, r3, #1
 8004c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c8e:	e02d      	b.n	8004cec <HAL_RCC_OscConfig+0x5e0>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10c      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x5a6>
 8004c98:	4b77      	ldr	r3, [pc, #476]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9c:	4a76      	ldr	r2, [pc, #472]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004c9e:	f023 0301 	bic.w	r3, r3, #1
 8004ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca4:	4b74      	ldr	r3, [pc, #464]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca8:	4a73      	ldr	r2, [pc, #460]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004caa:	f023 0304 	bic.w	r3, r3, #4
 8004cae:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb0:	e01c      	b.n	8004cec <HAL_RCC_OscConfig+0x5e0>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b05      	cmp	r3, #5
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x5c8>
 8004cba:	4b6f      	ldr	r3, [pc, #444]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbe:	4a6e      	ldr	r2, [pc, #440]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004cc0:	f043 0304 	orr.w	r3, r3, #4
 8004cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc6:	4b6c      	ldr	r3, [pc, #432]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cca:	4a6b      	ldr	r2, [pc, #428]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd2:	e00b      	b.n	8004cec <HAL_RCC_OscConfig+0x5e0>
 8004cd4:	4b68      	ldr	r3, [pc, #416]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd8:	4a67      	ldr	r2, [pc, #412]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004cda:	f023 0301 	bic.w	r3, r3, #1
 8004cde:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce0:	4b65      	ldr	r3, [pc, #404]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	4a64      	ldr	r2, [pc, #400]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004ce6:	f023 0304 	bic.w	r3, r3, #4
 8004cea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d015      	beq.n	8004d20 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf4:	f7fe fa3c 	bl	8003170 <HAL_GetTick>
 8004cf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cfc:	f7fe fa38 	bl	8003170 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e123      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d12:	4b59      	ldr	r3, [pc, #356]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0ee      	beq.n	8004cfc <HAL_RCC_OscConfig+0x5f0>
 8004d1e:	e014      	b.n	8004d4a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d20:	f7fe fa26 	bl	8003170 <HAL_GetTick>
 8004d24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d26:	e00a      	b.n	8004d3e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d28:	f7fe fa22 	bl	8003170 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e10d      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d3e:	4b4e      	ldr	r3, [pc, #312]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1ee      	bne.n	8004d28 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 8102 	beq.w	8004f58 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004d54:	4b48      	ldr	r3, [pc, #288]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d5c:	2b18      	cmp	r3, #24
 8004d5e:	f000 80bd 	beq.w	8004edc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	f040 809e 	bne.w	8004ea8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6c:	4b42      	ldr	r3, [pc, #264]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a41      	ldr	r2, [pc, #260]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7fe f9fa 	bl	8003170 <HAL_GetTick>
 8004d7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d80:	f7fe f9f6 	bl	8003170 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e0e3      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d92:	4b39      	ldr	r3, [pc, #228]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d9e:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004da2:	4b37      	ldr	r3, [pc, #220]	; (8004e80 <HAL_RCC_OscConfig+0x774>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004dae:	0112      	lsls	r2, r2, #4
 8004db0:	430a      	orrs	r2, r1
 8004db2:	4931      	ldr	r1, [pc, #196]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	628b      	str	r3, [r1, #40]	; 0x28
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	025b      	lsls	r3, r3, #9
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	041b      	lsls	r3, r3, #16
 8004dd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de0:	3b01      	subs	r3, #1
 8004de2:	061b      	lsls	r3, r3, #24
 8004de4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004de8:	4923      	ldr	r1, [pc, #140]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004dee:	4b22      	ldr	r3, [pc, #136]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	4a21      	ldr	r2, [pc, #132]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004df4:	f023 0301 	bic.w	r3, r3, #1
 8004df8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004dfa:	4b1f      	ldr	r3, [pc, #124]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dfe:	4b21      	ldr	r3, [pc, #132]	; (8004e84 <HAL_RCC_OscConfig+0x778>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e06:	00d2      	lsls	r2, r2, #3
 8004e08:	491b      	ldr	r1, [pc, #108]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004e0e:	4b1a      	ldr	r3, [pc, #104]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	f023 020c 	bic.w	r2, r3, #12
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	4917      	ldr	r1, [pc, #92]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004e20:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	f023 0202 	bic.w	r2, r3, #2
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2c:	4912      	ldr	r1, [pc, #72]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e32:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	4a10      	ldr	r2, [pc, #64]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e3e:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	4a0d      	ldr	r2, [pc, #52]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	4a0a      	ldr	r2, [pc, #40]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004e56:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	4a07      	ldr	r2, [pc, #28]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e62:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a04      	ldr	r2, [pc, #16]	; (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6e:	f7fe f97f 	bl	8003170 <HAL_GetTick>
 8004e72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e74:	e011      	b.n	8004e9a <HAL_RCC_OscConfig+0x78e>
 8004e76:	bf00      	nop
 8004e78:	58024400 	.word	0x58024400
 8004e7c:	58024800 	.word	0x58024800
 8004e80:	fffffc0c 	.word	0xfffffc0c
 8004e84:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e88:	f7fe f972 	bl	8003170 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e05f      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e9a:	4b32      	ldr	r3, [pc, #200]	; (8004f64 <HAL_RCC_OscConfig+0x858>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0x77c>
 8004ea6:	e057      	b.n	8004f58 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea8:	4b2e      	ldr	r3, [pc, #184]	; (8004f64 <HAL_RCC_OscConfig+0x858>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a2d      	ldr	r2, [pc, #180]	; (8004f64 <HAL_RCC_OscConfig+0x858>)
 8004eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb4:	f7fe f95c 	bl	8003170 <HAL_GetTick>
 8004eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ebc:	f7fe f958 	bl	8003170 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e045      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ece:	4b25      	ldr	r3, [pc, #148]	; (8004f64 <HAL_RCC_OscConfig+0x858>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f0      	bne.n	8004ebc <HAL_RCC_OscConfig+0x7b0>
 8004eda:	e03d      	b.n	8004f58 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004edc:	4b21      	ldr	r3, [pc, #132]	; (8004f64 <HAL_RCC_OscConfig+0x858>)
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ee2:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <HAL_RCC_OscConfig+0x858>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d031      	beq.n	8004f54 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f003 0203 	and.w	r2, r3, #3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d12a      	bne.n	8004f54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	091b      	lsrs	r3, r3, #4
 8004f02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d122      	bne.n	8004f54 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d11a      	bne.n	8004f54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	0a5b      	lsrs	r3, r3, #9
 8004f22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d111      	bne.n	8004f54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	0c1b      	lsrs	r3, r3, #16
 8004f34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d108      	bne.n	8004f54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	0e1b      	lsrs	r3, r3, #24
 8004f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3730      	adds	r7, #48	; 0x30
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	58024400 	.word	0x58024400

08004f68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e19c      	b.n	80052b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f7c:	4b8a      	ldr	r3, [pc, #552]	; (80051a8 <HAL_RCC_ClockConfig+0x240>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 030f 	and.w	r3, r3, #15
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d910      	bls.n	8004fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8a:	4b87      	ldr	r3, [pc, #540]	; (80051a8 <HAL_RCC_ClockConfig+0x240>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f023 020f 	bic.w	r2, r3, #15
 8004f92:	4985      	ldr	r1, [pc, #532]	; (80051a8 <HAL_RCC_ClockConfig+0x240>)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9a:	4b83      	ldr	r3, [pc, #524]	; (80051a8 <HAL_RCC_ClockConfig+0x240>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e184      	b.n	80052b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d010      	beq.n	8004fda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	4b7b      	ldr	r3, [pc, #492]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d908      	bls.n	8004fda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004fc8:	4b78      	ldr	r3, [pc, #480]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	4975      	ldr	r1, [pc, #468]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d010      	beq.n	8005008 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695a      	ldr	r2, [r3, #20]
 8004fea:	4b70      	ldr	r3, [pc, #448]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d908      	bls.n	8005008 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ff6:	4b6d      	ldr	r3, [pc, #436]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	496a      	ldr	r1, [pc, #424]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005004:	4313      	orrs	r3, r2
 8005006:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b00      	cmp	r3, #0
 8005012:	d010      	beq.n	8005036 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699a      	ldr	r2, [r3, #24]
 8005018:	4b64      	ldr	r3, [pc, #400]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005020:	429a      	cmp	r2, r3
 8005022:	d908      	bls.n	8005036 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005024:	4b61      	ldr	r3, [pc, #388]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	495e      	ldr	r1, [pc, #376]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005032:	4313      	orrs	r3, r2
 8005034:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b00      	cmp	r3, #0
 8005040:	d010      	beq.n	8005064 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69da      	ldr	r2, [r3, #28]
 8005046:	4b59      	ldr	r3, [pc, #356]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800504e:	429a      	cmp	r2, r3
 8005050:	d908      	bls.n	8005064 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005052:	4b56      	ldr	r3, [pc, #344]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	4953      	ldr	r1, [pc, #332]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005060:	4313      	orrs	r3, r2
 8005062:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d010      	beq.n	8005092 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	4b4d      	ldr	r3, [pc, #308]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	429a      	cmp	r2, r3
 800507e:	d908      	bls.n	8005092 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005080:	4b4a      	ldr	r3, [pc, #296]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	f023 020f 	bic.w	r2, r3, #15
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	4947      	ldr	r1, [pc, #284]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 800508e:	4313      	orrs	r3, r2
 8005090:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d055      	beq.n	800514a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800509e:	4b43      	ldr	r3, [pc, #268]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	4940      	ldr	r1, [pc, #256]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d107      	bne.n	80050c8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050b8:	4b3c      	ldr	r3, [pc, #240]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d121      	bne.n	8005108 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0f6      	b.n	80052b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d107      	bne.n	80050e0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050d0:	4b36      	ldr	r3, [pc, #216]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d115      	bne.n	8005108 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e0ea      	b.n	80052b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d107      	bne.n	80050f8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050e8:	4b30      	ldr	r3, [pc, #192]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d109      	bne.n	8005108 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e0de      	b.n	80052b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050f8:	4b2c      	ldr	r3, [pc, #176]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0d6      	b.n	80052b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005108:	4b28      	ldr	r3, [pc, #160]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f023 0207 	bic.w	r2, r3, #7
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	4925      	ldr	r1, [pc, #148]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005116:	4313      	orrs	r3, r2
 8005118:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511a:	f7fe f829 	bl	8003170 <HAL_GetTick>
 800511e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005120:	e00a      	b.n	8005138 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005122:	f7fe f825 	bl	8003170 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005130:	4293      	cmp	r3, r2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e0be      	b.n	80052b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005138:	4b1c      	ldr	r3, [pc, #112]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	429a      	cmp	r2, r3
 8005148:	d1eb      	bne.n	8005122 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d010      	beq.n	8005178 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	4b14      	ldr	r3, [pc, #80]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	429a      	cmp	r2, r3
 8005164:	d208      	bcs.n	8005178 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005166:	4b11      	ldr	r3, [pc, #68]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	f023 020f 	bic.w	r2, r3, #15
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	490e      	ldr	r1, [pc, #56]	; (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005174:	4313      	orrs	r3, r2
 8005176:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005178:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <HAL_RCC_ClockConfig+0x240>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d214      	bcs.n	80051b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005186:	4b08      	ldr	r3, [pc, #32]	; (80051a8 <HAL_RCC_ClockConfig+0x240>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f023 020f 	bic.w	r2, r3, #15
 800518e:	4906      	ldr	r1, [pc, #24]	; (80051a8 <HAL_RCC_ClockConfig+0x240>)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	4313      	orrs	r3, r2
 8005194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005196:	4b04      	ldr	r3, [pc, #16]	; (80051a8 <HAL_RCC_ClockConfig+0x240>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d005      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e086      	b.n	80052b6 <HAL_RCC_ClockConfig+0x34e>
 80051a8:	52002000 	.word	0x52002000
 80051ac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d010      	beq.n	80051de <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	4b3f      	ldr	r3, [pc, #252]	; (80052c0 <HAL_RCC_ClockConfig+0x358>)
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d208      	bcs.n	80051de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051cc:	4b3c      	ldr	r3, [pc, #240]	; (80052c0 <HAL_RCC_ClockConfig+0x358>)
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	4939      	ldr	r1, [pc, #228]	; (80052c0 <HAL_RCC_ClockConfig+0x358>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d010      	beq.n	800520c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695a      	ldr	r2, [r3, #20]
 80051ee:	4b34      	ldr	r3, [pc, #208]	; (80052c0 <HAL_RCC_ClockConfig+0x358>)
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d208      	bcs.n	800520c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051fa:	4b31      	ldr	r3, [pc, #196]	; (80052c0 <HAL_RCC_ClockConfig+0x358>)
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	492e      	ldr	r1, [pc, #184]	; (80052c0 <HAL_RCC_ClockConfig+0x358>)
 8005208:	4313      	orrs	r3, r2
 800520a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b00      	cmp	r3, #0
 8005216:	d010      	beq.n	800523a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699a      	ldr	r2, [r3, #24]
 800521c:	4b28      	ldr	r3, [pc, #160]	; (80052c0 <HAL_RCC_ClockConfig+0x358>)
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005224:	429a      	cmp	r2, r3
 8005226:	d208      	bcs.n	800523a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005228:	4b25      	ldr	r3, [pc, #148]	; (80052c0 <HAL_RCC_ClockConfig+0x358>)
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	4922      	ldr	r1, [pc, #136]	; (80052c0 <HAL_RCC_ClockConfig+0x358>)
 8005236:	4313      	orrs	r3, r2
 8005238:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d010      	beq.n	8005268 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69da      	ldr	r2, [r3, #28]
 800524a:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <HAL_RCC_ClockConfig+0x358>)
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005252:	429a      	cmp	r2, r3
 8005254:	d208      	bcs.n	8005268 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005256:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <HAL_RCC_ClockConfig+0x358>)
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	4917      	ldr	r1, [pc, #92]	; (80052c0 <HAL_RCC_ClockConfig+0x358>)
 8005264:	4313      	orrs	r3, r2
 8005266:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005268:	f000 f834 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 800526c:	4602      	mov	r2, r0
 800526e:	4b14      	ldr	r3, [pc, #80]	; (80052c0 <HAL_RCC_ClockConfig+0x358>)
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	0a1b      	lsrs	r3, r3, #8
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	4912      	ldr	r1, [pc, #72]	; (80052c4 <HAL_RCC_ClockConfig+0x35c>)
 800527a:	5ccb      	ldrb	r3, [r1, r3]
 800527c:	f003 031f 	and.w	r3, r3, #31
 8005280:	fa22 f303 	lsr.w	r3, r2, r3
 8005284:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005286:	4b0e      	ldr	r3, [pc, #56]	; (80052c0 <HAL_RCC_ClockConfig+0x358>)
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	4a0d      	ldr	r2, [pc, #52]	; (80052c4 <HAL_RCC_ClockConfig+0x35c>)
 8005290:	5cd3      	ldrb	r3, [r2, r3]
 8005292:	f003 031f 	and.w	r3, r3, #31
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	fa22 f303 	lsr.w	r3, r2, r3
 800529c:	4a0a      	ldr	r2, [pc, #40]	; (80052c8 <HAL_RCC_ClockConfig+0x360>)
 800529e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052a0:	4a0a      	ldr	r2, [pc, #40]	; (80052cc <HAL_RCC_ClockConfig+0x364>)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80052a6:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <HAL_RCC_ClockConfig+0x368>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fd ff16 	bl	80030dc <HAL_InitTick>
 80052b0:	4603      	mov	r3, r0
 80052b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	58024400 	.word	0x58024400
 80052c4:	0800fe98 	.word	0x0800fe98
 80052c8:	24000004 	.word	0x24000004
 80052cc:	24000000 	.word	0x24000000
 80052d0:	24000010 	.word	0x24000010

080052d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b089      	sub	sp, #36	; 0x24
 80052d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052da:	4bb3      	ldr	r3, [pc, #716]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052e2:	2b18      	cmp	r3, #24
 80052e4:	f200 8155 	bhi.w	8005592 <HAL_RCC_GetSysClockFreq+0x2be>
 80052e8:	a201      	add	r2, pc, #4	; (adr r2, 80052f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80052ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ee:	bf00      	nop
 80052f0:	08005355 	.word	0x08005355
 80052f4:	08005593 	.word	0x08005593
 80052f8:	08005593 	.word	0x08005593
 80052fc:	08005593 	.word	0x08005593
 8005300:	08005593 	.word	0x08005593
 8005304:	08005593 	.word	0x08005593
 8005308:	08005593 	.word	0x08005593
 800530c:	08005593 	.word	0x08005593
 8005310:	0800537b 	.word	0x0800537b
 8005314:	08005593 	.word	0x08005593
 8005318:	08005593 	.word	0x08005593
 800531c:	08005593 	.word	0x08005593
 8005320:	08005593 	.word	0x08005593
 8005324:	08005593 	.word	0x08005593
 8005328:	08005593 	.word	0x08005593
 800532c:	08005593 	.word	0x08005593
 8005330:	08005381 	.word	0x08005381
 8005334:	08005593 	.word	0x08005593
 8005338:	08005593 	.word	0x08005593
 800533c:	08005593 	.word	0x08005593
 8005340:	08005593 	.word	0x08005593
 8005344:	08005593 	.word	0x08005593
 8005348:	08005593 	.word	0x08005593
 800534c:	08005593 	.word	0x08005593
 8005350:	08005387 	.word	0x08005387
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005354:	4b94      	ldr	r3, [pc, #592]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b00      	cmp	r3, #0
 800535e:	d009      	beq.n	8005374 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005360:	4b91      	ldr	r3, [pc, #580]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	08db      	lsrs	r3, r3, #3
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	4a90      	ldr	r2, [pc, #576]	; (80055ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
 8005370:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005372:	e111      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005374:	4b8d      	ldr	r3, [pc, #564]	; (80055ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005376:	61bb      	str	r3, [r7, #24]
    break;
 8005378:	e10e      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800537a:	4b8d      	ldr	r3, [pc, #564]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800537c:	61bb      	str	r3, [r7, #24]
    break;
 800537e:	e10b      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005380:	4b8c      	ldr	r3, [pc, #560]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005382:	61bb      	str	r3, [r7, #24]
    break;
 8005384:	e108      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005386:	4b88      	ldr	r3, [pc, #544]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005390:	4b85      	ldr	r3, [pc, #532]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	091b      	lsrs	r3, r3, #4
 8005396:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800539a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800539c:	4b82      	ldr	r3, [pc, #520]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80053a6:	4b80      	ldr	r3, [pc, #512]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053aa:	08db      	lsrs	r3, r3, #3
 80053ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80e1 	beq.w	800558c <HAL_RCC_GetSysClockFreq+0x2b8>
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	f000 8083 	beq.w	80054d8 <HAL_RCC_GetSysClockFreq+0x204>
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	f200 80a1 	bhi.w	800551c <HAL_RCC_GetSysClockFreq+0x248>
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_RCC_GetSysClockFreq+0x114>
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d056      	beq.n	8005494 <HAL_RCC_GetSysClockFreq+0x1c0>
 80053e6:	e099      	b.n	800551c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053e8:	4b6f      	ldr	r3, [pc, #444]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0320 	and.w	r3, r3, #32
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d02d      	beq.n	8005450 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053f4:	4b6c      	ldr	r3, [pc, #432]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	08db      	lsrs	r3, r3, #3
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	4a6b      	ldr	r2, [pc, #428]	; (80055ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005400:	fa22 f303 	lsr.w	r3, r2, r3
 8005404:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	ee07 3a90 	vmov	s15, r3
 800540c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800541e:	4b62      	ldr	r3, [pc, #392]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005426:	ee07 3a90 	vmov	s15, r3
 800542a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800542e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005432:	eddf 5a61 	vldr	s11, [pc, #388]	; 80055b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800543a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800543e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800544e:	e087      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80055bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800545e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005462:	4b51      	ldr	r3, [pc, #324]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005472:	ed97 6a02 	vldr	s12, [r7, #8]
 8005476:	eddf 5a50 	vldr	s11, [pc, #320]	; 80055b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800547a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800547e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005492:	e065      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80055c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80054a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a6:	4b40      	ldr	r3, [pc, #256]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80054ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80055b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054d6:	e043      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80055c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80054e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ea:	4b2f      	ldr	r3, [pc, #188]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f2:	ee07 3a90 	vmov	s15, r3
 80054f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80054fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80055b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800550a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800550e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005516:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800551a:	e021      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005526:	eddf 6a26 	vldr	s13, [pc, #152]	; 80055c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800552a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800552e:	4b1e      	ldr	r3, [pc, #120]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005542:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80055b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800554a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800555a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800555e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005560:	4b11      	ldr	r3, [pc, #68]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	0a5b      	lsrs	r3, r3, #9
 8005566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800556a:	3301      	adds	r3, #1
 800556c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	ee07 3a90 	vmov	s15, r3
 8005574:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005578:	edd7 6a07 	vldr	s13, [r7, #28]
 800557c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005584:	ee17 3a90 	vmov	r3, s15
 8005588:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800558a:	e005      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	61bb      	str	r3, [r7, #24]
    break;
 8005590:	e002      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005592:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005594:	61bb      	str	r3, [r7, #24]
    break;
 8005596:	bf00      	nop
  }

  return sysclockfreq;
 8005598:	69bb      	ldr	r3, [r7, #24]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3724      	adds	r7, #36	; 0x24
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	58024400 	.word	0x58024400
 80055ac:	03d09000 	.word	0x03d09000
 80055b0:	003d0900 	.word	0x003d0900
 80055b4:	007a1200 	.word	0x007a1200
 80055b8:	46000000 	.word	0x46000000
 80055bc:	4c742400 	.word	0x4c742400
 80055c0:	4a742400 	.word	0x4a742400
 80055c4:	4af42400 	.word	0x4af42400

080055c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80055ce:	f7ff fe81 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 80055d2:	4602      	mov	r2, r0
 80055d4:	4b10      	ldr	r3, [pc, #64]	; (8005618 <HAL_RCC_GetHCLKFreq+0x50>)
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	0a1b      	lsrs	r3, r3, #8
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	490f      	ldr	r1, [pc, #60]	; (800561c <HAL_RCC_GetHCLKFreq+0x54>)
 80055e0:	5ccb      	ldrb	r3, [r1, r3]
 80055e2:	f003 031f 	and.w	r3, r3, #31
 80055e6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055ec:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <HAL_RCC_GetHCLKFreq+0x50>)
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	f003 030f 	and.w	r3, r3, #15
 80055f4:	4a09      	ldr	r2, [pc, #36]	; (800561c <HAL_RCC_GetHCLKFreq+0x54>)
 80055f6:	5cd3      	ldrb	r3, [r2, r3]
 80055f8:	f003 031f 	and.w	r3, r3, #31
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005602:	4a07      	ldr	r2, [pc, #28]	; (8005620 <HAL_RCC_GetHCLKFreq+0x58>)
 8005604:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005606:	4a07      	ldr	r2, [pc, #28]	; (8005624 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800560c:	4b04      	ldr	r3, [pc, #16]	; (8005620 <HAL_RCC_GetHCLKFreq+0x58>)
 800560e:	681b      	ldr	r3, [r3, #0]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	58024400 	.word	0x58024400
 800561c:	0800fe98 	.word	0x0800fe98
 8005620:	24000004 	.word	0x24000004
 8005624:	24000000 	.word	0x24000000

08005628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800562c:	f7ff ffcc 	bl	80055c8 <HAL_RCC_GetHCLKFreq>
 8005630:	4602      	mov	r2, r0
 8005632:	4b06      	ldr	r3, [pc, #24]	; (800564c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	091b      	lsrs	r3, r3, #4
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	4904      	ldr	r1, [pc, #16]	; (8005650 <HAL_RCC_GetPCLK1Freq+0x28>)
 800563e:	5ccb      	ldrb	r3, [r1, r3]
 8005640:	f003 031f 	and.w	r3, r3, #31
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005648:	4618      	mov	r0, r3
 800564a:	bd80      	pop	{r7, pc}
 800564c:	58024400 	.word	0x58024400
 8005650:	0800fe98 	.word	0x0800fe98

08005654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005658:	f7ff ffb6 	bl	80055c8 <HAL_RCC_GetHCLKFreq>
 800565c:	4602      	mov	r2, r0
 800565e:	4b06      	ldr	r3, [pc, #24]	; (8005678 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	0a1b      	lsrs	r3, r3, #8
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	4904      	ldr	r1, [pc, #16]	; (800567c <HAL_RCC_GetPCLK2Freq+0x28>)
 800566a:	5ccb      	ldrb	r3, [r1, r3]
 800566c:	f003 031f 	and.w	r3, r3, #31
 8005670:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005674:	4618      	mov	r0, r3
 8005676:	bd80      	pop	{r7, pc}
 8005678:	58024400 	.word	0x58024400
 800567c:	0800fe98 	.word	0x0800fe98

08005680 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005688:	2300      	movs	r3, #0
 800568a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800568c:	2300      	movs	r3, #0
 800568e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d03f      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056a4:	d02a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80056a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056aa:	d824      	bhi.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056b0:	d018      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80056b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056b6:	d81e      	bhi.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056c0:	d007      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80056c2:	e018      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c4:	4ba3      	ldr	r3, [pc, #652]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	4aa2      	ldr	r2, [pc, #648]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80056d0:	e015      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3304      	adds	r3, #4
 80056d6:	2102      	movs	r1, #2
 80056d8:	4618      	mov	r0, r3
 80056da:	f001 f9d5 	bl	8006a88 <RCCEx_PLL2_Config>
 80056de:	4603      	mov	r3, r0
 80056e0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80056e2:	e00c      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3324      	adds	r3, #36	; 0x24
 80056e8:	2102      	movs	r1, #2
 80056ea:	4618      	mov	r0, r3
 80056ec:	f001 fa7e 	bl	8006bec <RCCEx_PLL3_Config>
 80056f0:	4603      	mov	r3, r0
 80056f2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80056f4:	e003      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	75fb      	strb	r3, [r7, #23]
      break;
 80056fa:	e000      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80056fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056fe:	7dfb      	ldrb	r3, [r7, #23]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d109      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005704:	4b93      	ldr	r3, [pc, #588]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005708:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005710:	4990      	ldr	r1, [pc, #576]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005712:	4313      	orrs	r3, r2
 8005714:	650b      	str	r3, [r1, #80]	; 0x50
 8005716:	e001      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005718:	7dfb      	ldrb	r3, [r7, #23]
 800571a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005724:	2b00      	cmp	r3, #0
 8005726:	d03d      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572c:	2b04      	cmp	r3, #4
 800572e:	d826      	bhi.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005730:	a201      	add	r2, pc, #4	; (adr r2, 8005738 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005736:	bf00      	nop
 8005738:	0800574d 	.word	0x0800574d
 800573c:	0800575b 	.word	0x0800575b
 8005740:	0800576d 	.word	0x0800576d
 8005744:	08005785 	.word	0x08005785
 8005748:	08005785 	.word	0x08005785
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800574c:	4b81      	ldr	r3, [pc, #516]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	4a80      	ldr	r2, [pc, #512]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005756:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005758:	e015      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3304      	adds	r3, #4
 800575e:	2100      	movs	r1, #0
 8005760:	4618      	mov	r0, r3
 8005762:	f001 f991 	bl	8006a88 <RCCEx_PLL2_Config>
 8005766:	4603      	mov	r3, r0
 8005768:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800576a:	e00c      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3324      	adds	r3, #36	; 0x24
 8005770:	2100      	movs	r1, #0
 8005772:	4618      	mov	r0, r3
 8005774:	f001 fa3a 	bl	8006bec <RCCEx_PLL3_Config>
 8005778:	4603      	mov	r3, r0
 800577a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800577c:	e003      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	75fb      	strb	r3, [r7, #23]
      break;
 8005782:	e000      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005786:	7dfb      	ldrb	r3, [r7, #23]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d109      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800578c:	4b71      	ldr	r3, [pc, #452]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800578e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005790:	f023 0207 	bic.w	r2, r3, #7
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005798:	496e      	ldr	r1, [pc, #440]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800579a:	4313      	orrs	r3, r2
 800579c:	650b      	str	r3, [r1, #80]	; 0x50
 800579e:	e001      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
 80057a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d042      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b8:	d02b      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80057ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057be:	d825      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80057c0:	2bc0      	cmp	r3, #192	; 0xc0
 80057c2:	d028      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80057c4:	2bc0      	cmp	r3, #192	; 0xc0
 80057c6:	d821      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80057c8:	2b80      	cmp	r3, #128	; 0x80
 80057ca:	d016      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80057cc:	2b80      	cmp	r3, #128	; 0x80
 80057ce:	d81d      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80057d4:	2b40      	cmp	r3, #64	; 0x40
 80057d6:	d007      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80057d8:	e018      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057da:	4b5e      	ldr	r3, [pc, #376]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	4a5d      	ldr	r2, [pc, #372]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80057e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80057e6:	e017      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3304      	adds	r3, #4
 80057ec:	2100      	movs	r1, #0
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 f94a 	bl	8006a88 <RCCEx_PLL2_Config>
 80057f4:	4603      	mov	r3, r0
 80057f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80057f8:	e00e      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3324      	adds	r3, #36	; 0x24
 80057fe:	2100      	movs	r1, #0
 8005800:	4618      	mov	r0, r3
 8005802:	f001 f9f3 	bl	8006bec <RCCEx_PLL3_Config>
 8005806:	4603      	mov	r3, r0
 8005808:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800580a:	e005      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	75fb      	strb	r3, [r7, #23]
      break;
 8005810:	e002      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005812:	bf00      	nop
 8005814:	e000      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005816:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005818:	7dfb      	ldrb	r3, [r7, #23]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d109      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800581e:	4b4d      	ldr	r3, [pc, #308]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005822:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582a:	494a      	ldr	r1, [pc, #296]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800582c:	4313      	orrs	r3, r2
 800582e:	650b      	str	r3, [r1, #80]	; 0x50
 8005830:	e001      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005832:	7dfb      	ldrb	r3, [r7, #23]
 8005834:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800583e:	2b00      	cmp	r3, #0
 8005840:	d049      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005848:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800584c:	d030      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800584e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005852:	d82a      	bhi.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005854:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005858:	d02c      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800585a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800585e:	d824      	bhi.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005864:	d018      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800586a:	d81e      	bhi.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005870:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005874:	d007      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005876:	e018      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005878:	4b36      	ldr	r3, [pc, #216]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	4a35      	ldr	r2, [pc, #212]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800587e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005882:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005884:	e017      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	3304      	adds	r3, #4
 800588a:	2100      	movs	r1, #0
 800588c:	4618      	mov	r0, r3
 800588e:	f001 f8fb 	bl	8006a88 <RCCEx_PLL2_Config>
 8005892:	4603      	mov	r3, r0
 8005894:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005896:	e00e      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3324      	adds	r3, #36	; 0x24
 800589c:	2100      	movs	r1, #0
 800589e:	4618      	mov	r0, r3
 80058a0:	f001 f9a4 	bl	8006bec <RCCEx_PLL3_Config>
 80058a4:	4603      	mov	r3, r0
 80058a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058a8:	e005      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	75fb      	strb	r3, [r7, #23]
      break;
 80058ae:	e002      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80058b0:	bf00      	nop
 80058b2:	e000      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80058b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b6:	7dfb      	ldrb	r3, [r7, #23]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80058bc:	4b25      	ldr	r3, [pc, #148]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80058be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80058ca:	4922      	ldr	r1, [pc, #136]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	658b      	str	r3, [r1, #88]	; 0x58
 80058d0:	e001      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
 80058d4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d04b      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80058e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058ec:	d030      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80058ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058f2:	d82a      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80058f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058f8:	d02e      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80058fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058fe:	d824      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005900:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005904:	d018      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005906:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800590a:	d81e      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005914:	d007      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005916:	e018      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005918:	4b0e      	ldr	r3, [pc, #56]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	4a0d      	ldr	r2, [pc, #52]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800591e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005922:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005924:	e019      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3304      	adds	r3, #4
 800592a:	2100      	movs	r1, #0
 800592c:	4618      	mov	r0, r3
 800592e:	f001 f8ab 	bl	8006a88 <RCCEx_PLL2_Config>
 8005932:	4603      	mov	r3, r0
 8005934:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005936:	e010      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3324      	adds	r3, #36	; 0x24
 800593c:	2100      	movs	r1, #0
 800593e:	4618      	mov	r0, r3
 8005940:	f001 f954 	bl	8006bec <RCCEx_PLL3_Config>
 8005944:	4603      	mov	r3, r0
 8005946:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005948:	e007      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	75fb      	strb	r3, [r7, #23]
      break;
 800594e:	e004      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005950:	bf00      	nop
 8005952:	e002      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005954:	58024400 	.word	0x58024400
      break;
 8005958:	bf00      	nop
    }

    if(ret == HAL_OK)
 800595a:	7dfb      	ldrb	r3, [r7, #23]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10a      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005960:	4b99      	ldr	r3, [pc, #612]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005964:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800596e:	4996      	ldr	r1, [pc, #600]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005970:	4313      	orrs	r3, r2
 8005972:	658b      	str	r3, [r1, #88]	; 0x58
 8005974:	e001      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005976:	7dfb      	ldrb	r3, [r7, #23]
 8005978:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d032      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800598a:	2b30      	cmp	r3, #48	; 0x30
 800598c:	d01c      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800598e:	2b30      	cmp	r3, #48	; 0x30
 8005990:	d817      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005992:	2b20      	cmp	r3, #32
 8005994:	d00c      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005996:	2b20      	cmp	r3, #32
 8005998:	d813      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800599a:	2b00      	cmp	r3, #0
 800599c:	d016      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800599e:	2b10      	cmp	r3, #16
 80059a0:	d10f      	bne.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059a2:	4b89      	ldr	r3, [pc, #548]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80059a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a6:	4a88      	ldr	r2, [pc, #544]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80059a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80059ae:	e00e      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3304      	adds	r3, #4
 80059b4:	2102      	movs	r1, #2
 80059b6:	4618      	mov	r0, r3
 80059b8:	f001 f866 	bl	8006a88 <RCCEx_PLL2_Config>
 80059bc:	4603      	mov	r3, r0
 80059be:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80059c0:	e005      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	75fb      	strb	r3, [r7, #23]
      break;
 80059c6:	e002      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80059c8:	bf00      	nop
 80059ca:	e000      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80059cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ce:	7dfb      	ldrb	r3, [r7, #23]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d109      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80059d4:	4b7c      	ldr	r3, [pc, #496]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80059d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e0:	4979      	ldr	r1, [pc, #484]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80059e6:	e001      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
 80059ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d047      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a00:	d030      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005a02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a06:	d82a      	bhi.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005a08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a0c:	d02c      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005a0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a12:	d824      	bhi.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a18:	d018      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a1e:	d81e      	bhi.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a28:	d007      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005a2a:	e018      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a2c:	4b66      	ldr	r3, [pc, #408]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a30:	4a65      	ldr	r2, [pc, #404]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005a38:	e017      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 f821 	bl	8006a88 <RCCEx_PLL2_Config>
 8005a46:	4603      	mov	r3, r0
 8005a48:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005a4a:	e00e      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3324      	adds	r3, #36	; 0x24
 8005a50:	2100      	movs	r1, #0
 8005a52:	4618      	mov	r0, r3
 8005a54:	f001 f8ca 	bl	8006bec <RCCEx_PLL3_Config>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005a5c:	e005      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	75fb      	strb	r3, [r7, #23]
      break;
 8005a62:	e002      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005a64:	bf00      	nop
 8005a66:	e000      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a6a:	7dfb      	ldrb	r3, [r7, #23]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d109      	bne.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005a70:	4b55      	ldr	r3, [pc, #340]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a74:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a7c:	4952      	ldr	r1, [pc, #328]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	650b      	str	r3, [r1, #80]	; 0x50
 8005a82:	e001      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
 8005a86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d049      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a9c:	d02e      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005a9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa2:	d828      	bhi.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005aa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005aa8:	d02a      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005aaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005aae:	d822      	bhi.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005ab0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ab4:	d026      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005ab6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005aba:	d81c      	bhi.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ac0:	d010      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005ac2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ac6:	d816      	bhi.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d01d      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad0:	d111      	bne.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 ffd5 	bl	8006a88 <RCCEx_PLL2_Config>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005ae2:	e012      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3324      	adds	r3, #36	; 0x24
 8005ae8:	2101      	movs	r1, #1
 8005aea:	4618      	mov	r0, r3
 8005aec:	f001 f87e 	bl	8006bec <RCCEx_PLL3_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005af4:	e009      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	75fb      	strb	r3, [r7, #23]
      break;
 8005afa:	e006      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005afc:	bf00      	nop
 8005afe:	e004      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005b00:	bf00      	nop
 8005b02:	e002      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005b04:	bf00      	nop
 8005b06:	e000      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d109      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005b10:	4b2d      	ldr	r3, [pc, #180]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b14:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1c:	492a      	ldr	r1, [pc, #168]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	650b      	str	r3, [r1, #80]	; 0x50
 8005b22:	e001      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b24:	7dfb      	ldrb	r3, [r7, #23]
 8005b26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d04d      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b3e:	d02e      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b44:	d828      	bhi.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4a:	d02a      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b50:	d822      	bhi.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005b52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b56:	d026      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005b58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b5c:	d81c      	bhi.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b62:	d010      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b68:	d816      	bhi.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d01d      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005b6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b72:	d111      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3304      	adds	r3, #4
 8005b78:	2101      	movs	r1, #1
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 ff84 	bl	8006a88 <RCCEx_PLL2_Config>
 8005b80:	4603      	mov	r3, r0
 8005b82:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005b84:	e012      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3324      	adds	r3, #36	; 0x24
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f001 f82d 	bl	8006bec <RCCEx_PLL3_Config>
 8005b92:	4603      	mov	r3, r0
 8005b94:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005b96:	e009      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b9c:	e006      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005b9e:	bf00      	nop
 8005ba0:	e004      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005ba2:	bf00      	nop
 8005ba4:	e002      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005ba6:	bf00      	nop
 8005ba8:	e000      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005baa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10c      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005bb2:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005bc0:	4901      	ldr	r1, [pc, #4]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	658b      	str	r3, [r1, #88]	; 0x58
 8005bc6:	e003      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005bc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
 8005bce:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d02f      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005be4:	d00e      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bea:	d814      	bhi.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d015      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005bf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bf4:	d10f      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bf6:	4baf      	ldr	r3, [pc, #700]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	4aae      	ldr	r2, [pc, #696]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005c02:	e00c      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3304      	adds	r3, #4
 8005c08:	2101      	movs	r1, #1
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 ff3c 	bl	8006a88 <RCCEx_PLL2_Config>
 8005c10:	4603      	mov	r3, r0
 8005c12:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005c14:	e003      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	75fb      	strb	r3, [r7, #23]
      break;
 8005c1a:	e000      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005c1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d109      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c24:	4ba3      	ldr	r3, [pc, #652]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c28:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c30:	49a0      	ldr	r1, [pc, #640]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	650b      	str	r3, [r1, #80]	; 0x50
 8005c36:	e001      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d032      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d81b      	bhi.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005c50:	a201      	add	r2, pc, #4	; (adr r2, 8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c56:	bf00      	nop
 8005c58:	08005c8f 	.word	0x08005c8f
 8005c5c:	08005c69 	.word	0x08005c69
 8005c60:	08005c77 	.word	0x08005c77
 8005c64:	08005c8f 	.word	0x08005c8f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c68:	4b92      	ldr	r3, [pc, #584]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	4a91      	ldr	r2, [pc, #580]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005c74:	e00c      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	2102      	movs	r1, #2
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 ff03 	bl	8006a88 <RCCEx_PLL2_Config>
 8005c82:	4603      	mov	r3, r0
 8005c84:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005c86:	e003      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c8c:	e000      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d109      	bne.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c96:	4b87      	ldr	r3, [pc, #540]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c9a:	f023 0203 	bic.w	r2, r3, #3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca2:	4984      	ldr	r1, [pc, #528]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ca8:	e001      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005caa:	7dfb      	ldrb	r3, [r7, #23]
 8005cac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 8086 	beq.w	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cbc:	4b7e      	ldr	r3, [pc, #504]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a7d      	ldr	r2, [pc, #500]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cc8:	f7fd fa52 	bl	8003170 <HAL_GetTick>
 8005ccc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cce:	e009      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd0:	f7fd fa4e 	bl	8003170 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b64      	cmp	r3, #100	; 0x64
 8005cdc:	d902      	bls.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	75fb      	strb	r3, [r7, #23]
        break;
 8005ce2:	e005      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ce4:	4b74      	ldr	r3, [pc, #464]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0ef      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005cf0:	7dfb      	ldrb	r3, [r7, #23]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d166      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005cf6:	4b6f      	ldr	r3, [pc, #444]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005cf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d00:	4053      	eors	r3, r2
 8005d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d013      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d0a:	4b6a      	ldr	r3, [pc, #424]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d12:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d14:	4b67      	ldr	r3, [pc, #412]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d18:	4a66      	ldr	r2, [pc, #408]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d1e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d20:	4b64      	ldr	r3, [pc, #400]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d24:	4a63      	ldr	r2, [pc, #396]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d2a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d2c:	4a61      	ldr	r2, [pc, #388]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d3c:	d115      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3e:	f7fd fa17 	bl	8003170 <HAL_GetTick>
 8005d42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d44:	e00b      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d46:	f7fd fa13 	bl	8003170 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d902      	bls.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	75fb      	strb	r3, [r7, #23]
            break;
 8005d5c:	e005      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d5e:	4b55      	ldr	r3, [pc, #340]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0ed      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005d6a:	7dfb      	ldrb	r3, [r7, #23]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d126      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d7e:	d10d      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005d80:	4b4c      	ldr	r3, [pc, #304]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d8e:	0919      	lsrs	r1, r3, #4
 8005d90:	4b4a      	ldr	r3, [pc, #296]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005d92:	400b      	ands	r3, r1
 8005d94:	4947      	ldr	r1, [pc, #284]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	610b      	str	r3, [r1, #16]
 8005d9a:	e005      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005d9c:	4b45      	ldr	r3, [pc, #276]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	4a44      	ldr	r2, [pc, #272]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005da2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005da6:	6113      	str	r3, [r2, #16]
 8005da8:	4b42      	ldr	r3, [pc, #264]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005daa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005db6:	493f      	ldr	r1, [pc, #252]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	670b      	str	r3, [r1, #112]	; 0x70
 8005dbc:	e004      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
 8005dc0:	75bb      	strb	r3, [r7, #22]
 8005dc2:	e001      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
 8005dc6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 8085 	beq.w	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dda:	2b28      	cmp	r3, #40	; 0x28
 8005ddc:	d866      	bhi.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005dde:	a201      	add	r2, pc, #4	; (adr r2, 8005de4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de4:	08005ec1 	.word	0x08005ec1
 8005de8:	08005ead 	.word	0x08005ead
 8005dec:	08005ead 	.word	0x08005ead
 8005df0:	08005ead 	.word	0x08005ead
 8005df4:	08005ead 	.word	0x08005ead
 8005df8:	08005ead 	.word	0x08005ead
 8005dfc:	08005ead 	.word	0x08005ead
 8005e00:	08005ead 	.word	0x08005ead
 8005e04:	08005e89 	.word	0x08005e89
 8005e08:	08005ead 	.word	0x08005ead
 8005e0c:	08005ead 	.word	0x08005ead
 8005e10:	08005ead 	.word	0x08005ead
 8005e14:	08005ead 	.word	0x08005ead
 8005e18:	08005ead 	.word	0x08005ead
 8005e1c:	08005ead 	.word	0x08005ead
 8005e20:	08005ead 	.word	0x08005ead
 8005e24:	08005e9b 	.word	0x08005e9b
 8005e28:	08005ead 	.word	0x08005ead
 8005e2c:	08005ead 	.word	0x08005ead
 8005e30:	08005ead 	.word	0x08005ead
 8005e34:	08005ead 	.word	0x08005ead
 8005e38:	08005ead 	.word	0x08005ead
 8005e3c:	08005ead 	.word	0x08005ead
 8005e40:	08005ead 	.word	0x08005ead
 8005e44:	08005ec1 	.word	0x08005ec1
 8005e48:	08005ead 	.word	0x08005ead
 8005e4c:	08005ead 	.word	0x08005ead
 8005e50:	08005ead 	.word	0x08005ead
 8005e54:	08005ead 	.word	0x08005ead
 8005e58:	08005ead 	.word	0x08005ead
 8005e5c:	08005ead 	.word	0x08005ead
 8005e60:	08005ead 	.word	0x08005ead
 8005e64:	08005ec1 	.word	0x08005ec1
 8005e68:	08005ead 	.word	0x08005ead
 8005e6c:	08005ead 	.word	0x08005ead
 8005e70:	08005ead 	.word	0x08005ead
 8005e74:	08005ead 	.word	0x08005ead
 8005e78:	08005ead 	.word	0x08005ead
 8005e7c:	08005ead 	.word	0x08005ead
 8005e80:	08005ead 	.word	0x08005ead
 8005e84:	08005ec1 	.word	0x08005ec1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 fdfa 	bl	8006a88 <RCCEx_PLL2_Config>
 8005e94:	4603      	mov	r3, r0
 8005e96:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005e98:	e013      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3324      	adds	r3, #36	; 0x24
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fea3 	bl	8006bec <RCCEx_PLL3_Config>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005eaa:	e00a      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb0:	e007      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005eb2:	bf00      	nop
 8005eb4:	58024400 	.word	0x58024400
 8005eb8:	58024800 	.word	0x58024800
 8005ebc:	00ffffcf 	.word	0x00ffffcf
      break;
 8005ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ec2:	7dfb      	ldrb	r3, [r7, #23]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d109      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ec8:	4b96      	ldr	r3, [pc, #600]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ecc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ed4:	4993      	ldr	r1, [pc, #588]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	654b      	str	r3, [r1, #84]	; 0x54
 8005eda:	e001      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005edc:	7dfb      	ldrb	r3, [r7, #23]
 8005ede:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d038      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ef0:	2b05      	cmp	r3, #5
 8005ef2:	d821      	bhi.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005ef4:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efa:	bf00      	nop
 8005efc:	08005f3f 	.word	0x08005f3f
 8005f00:	08005f15 	.word	0x08005f15
 8005f04:	08005f27 	.word	0x08005f27
 8005f08:	08005f3f 	.word	0x08005f3f
 8005f0c:	08005f3f 	.word	0x08005f3f
 8005f10:	08005f3f 	.word	0x08005f3f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3304      	adds	r3, #4
 8005f18:	2101      	movs	r1, #1
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fdb4 	bl	8006a88 <RCCEx_PLL2_Config>
 8005f20:	4603      	mov	r3, r0
 8005f22:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005f24:	e00c      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3324      	adds	r3, #36	; 0x24
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 fe5d 	bl	8006bec <RCCEx_PLL3_Config>
 8005f32:	4603      	mov	r3, r0
 8005f34:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005f36:	e003      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f3c:	e000      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d109      	bne.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f46:	4b77      	ldr	r3, [pc, #476]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4a:	f023 0207 	bic.w	r2, r3, #7
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f52:	4974      	ldr	r1, [pc, #464]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	654b      	str	r3, [r1, #84]	; 0x54
 8005f58:	e001      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
 8005f5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d03a      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f70:	2b05      	cmp	r3, #5
 8005f72:	d821      	bhi.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005f74:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7a:	bf00      	nop
 8005f7c:	08005fbf 	.word	0x08005fbf
 8005f80:	08005f95 	.word	0x08005f95
 8005f84:	08005fa7 	.word	0x08005fa7
 8005f88:	08005fbf 	.word	0x08005fbf
 8005f8c:	08005fbf 	.word	0x08005fbf
 8005f90:	08005fbf 	.word	0x08005fbf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3304      	adds	r3, #4
 8005f98:	2101      	movs	r1, #1
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fd74 	bl	8006a88 <RCCEx_PLL2_Config>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005fa4:	e00c      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3324      	adds	r3, #36	; 0x24
 8005faa:	2101      	movs	r1, #1
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 fe1d 	bl	8006bec <RCCEx_PLL3_Config>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005fb6:	e003      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	75fb      	strb	r3, [r7, #23]
      break;
 8005fbc:	e000      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fc0:	7dfb      	ldrb	r3, [r7, #23]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10a      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fc6:	4b57      	ldr	r3, [pc, #348]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fca:	f023 0207 	bic.w	r2, r3, #7
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd4:	4953      	ldr	r1, [pc, #332]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	658b      	str	r3, [r1, #88]	; 0x58
 8005fda:	e001      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
 8005fde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0320 	and.w	r3, r3, #32
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d04b      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ff6:	d02e      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ffc:	d828      	bhi.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006002:	d02a      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006008:	d822      	bhi.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800600a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800600e:	d026      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006010:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006014:	d81c      	bhi.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800601a:	d010      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800601c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006020:	d816      	bhi.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006022:	2b00      	cmp	r3, #0
 8006024:	d01d      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006026:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800602a:	d111      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	2100      	movs	r1, #0
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fd28 	bl	8006a88 <RCCEx_PLL2_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800603c:	e012      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	3324      	adds	r3, #36	; 0x24
 8006042:	2102      	movs	r1, #2
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fdd1 	bl	8006bec <RCCEx_PLL3_Config>
 800604a:	4603      	mov	r3, r0
 800604c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800604e:	e009      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	75fb      	strb	r3, [r7, #23]
      break;
 8006054:	e006      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006056:	bf00      	nop
 8006058:	e004      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800605a:	bf00      	nop
 800605c:	e002      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800605e:	bf00      	nop
 8006060:	e000      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006064:	7dfb      	ldrb	r3, [r7, #23]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10a      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800606a:	4b2e      	ldr	r3, [pc, #184]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800606c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006078:	492a      	ldr	r1, [pc, #168]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800607a:	4313      	orrs	r3, r2
 800607c:	654b      	str	r3, [r1, #84]	; 0x54
 800607e:	e001      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006080:	7dfb      	ldrb	r3, [r7, #23]
 8006082:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608c:	2b00      	cmp	r3, #0
 800608e:	d04d      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006096:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800609a:	d02e      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800609c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80060a0:	d828      	bhi.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80060a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a6:	d02a      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80060a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ac:	d822      	bhi.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80060ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060b2:	d026      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80060b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060b8:	d81c      	bhi.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80060ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060be:	d010      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80060c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060c4:	d816      	bhi.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d01d      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80060ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ce:	d111      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3304      	adds	r3, #4
 80060d4:	2100      	movs	r1, #0
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fcd6 	bl	8006a88 <RCCEx_PLL2_Config>
 80060dc:	4603      	mov	r3, r0
 80060de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80060e0:	e012      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3324      	adds	r3, #36	; 0x24
 80060e6:	2102      	movs	r1, #2
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 fd7f 	bl	8006bec <RCCEx_PLL3_Config>
 80060ee:	4603      	mov	r3, r0
 80060f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80060f2:	e009      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	75fb      	strb	r3, [r7, #23]
      break;
 80060f8:	e006      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80060fa:	bf00      	nop
 80060fc:	e004      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80060fe:	bf00      	nop
 8006100:	e002      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006102:	bf00      	nop
 8006104:	e000      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006108:	7dfb      	ldrb	r3, [r7, #23]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10c      	bne.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800610e:	4b05      	ldr	r3, [pc, #20]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006112:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800611c:	4901      	ldr	r1, [pc, #4]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800611e:	4313      	orrs	r3, r2
 8006120:	658b      	str	r3, [r1, #88]	; 0x58
 8006122:	e003      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006124:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006134:	2b00      	cmp	r3, #0
 8006136:	d04b      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800613e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006142:	d02e      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006144:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006148:	d828      	bhi.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800614a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800614e:	d02a      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006154:	d822      	bhi.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006156:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800615a:	d026      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800615c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006160:	d81c      	bhi.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006162:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006166:	d010      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800616c:	d816      	bhi.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800616e:	2b00      	cmp	r3, #0
 8006170:	d01d      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006176:	d111      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3304      	adds	r3, #4
 800617c:	2100      	movs	r1, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fc82 	bl	8006a88 <RCCEx_PLL2_Config>
 8006184:	4603      	mov	r3, r0
 8006186:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006188:	e012      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3324      	adds	r3, #36	; 0x24
 800618e:	2102      	movs	r1, #2
 8006190:	4618      	mov	r0, r3
 8006192:	f000 fd2b 	bl	8006bec <RCCEx_PLL3_Config>
 8006196:	4603      	mov	r3, r0
 8006198:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800619a:	e009      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	75fb      	strb	r3, [r7, #23]
      break;
 80061a0:	e006      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80061a2:	bf00      	nop
 80061a4:	e004      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80061a6:	bf00      	nop
 80061a8:	e002      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80061aa:	bf00      	nop
 80061ac:	e000      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80061ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061b0:	7dfb      	ldrb	r3, [r7, #23]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10a      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80061b6:	4b9d      	ldr	r3, [pc, #628]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061c4:	4999      	ldr	r1, [pc, #612]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	658b      	str	r3, [r1, #88]	; 0x58
 80061ca:	e001      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
 80061ce:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01a      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e6:	d10a      	bne.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3324      	adds	r3, #36	; 0x24
 80061ec:	2102      	movs	r1, #2
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fcfc 	bl	8006bec <RCCEx_PLL3_Config>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80061fe:	4b8b      	ldr	r3, [pc, #556]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006202:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800620c:	4987      	ldr	r1, [pc, #540]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800620e:	4313      	orrs	r3, r2
 8006210:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0310 	and.w	r3, r3, #16
 800621a:	2b00      	cmp	r3, #0
 800621c:	d01a      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006228:	d10a      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3324      	adds	r3, #36	; 0x24
 800622e:	2102      	movs	r1, #2
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fcdb 	bl	8006bec <RCCEx_PLL3_Config>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006240:	4b7a      	ldr	r3, [pc, #488]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800624e:	4977      	ldr	r1, [pc, #476]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006250:	4313      	orrs	r3, r2
 8006252:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d034      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800626a:	d01d      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800626c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006270:	d817      	bhi.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800627a:	d009      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800627c:	e011      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3304      	adds	r3, #4
 8006282:	2100      	movs	r1, #0
 8006284:	4618      	mov	r0, r3
 8006286:	f000 fbff 	bl	8006a88 <RCCEx_PLL2_Config>
 800628a:	4603      	mov	r3, r0
 800628c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800628e:	e00c      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3324      	adds	r3, #36	; 0x24
 8006294:	2102      	movs	r1, #2
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fca8 	bl	8006bec <RCCEx_PLL3_Config>
 800629c:	4603      	mov	r3, r0
 800629e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80062a0:	e003      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	75fb      	strb	r3, [r7, #23]
      break;
 80062a6:	e000      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80062a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10a      	bne.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062b0:	4b5e      	ldr	r3, [pc, #376]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80062b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80062be:	495b      	ldr	r1, [pc, #364]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	658b      	str	r3, [r1, #88]	; 0x58
 80062c4:	e001      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c6:	7dfb      	ldrb	r3, [r7, #23]
 80062c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d033      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062e0:	d01c      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80062e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062e6:	d816      	bhi.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80062e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ec:	d003      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80062ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062f2:	d007      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80062f4:	e00f      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062f6:	4b4d      	ldr	r3, [pc, #308]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	4a4c      	ldr	r2, [pc, #304]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80062fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006300:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006302:	e00c      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	3324      	adds	r3, #36	; 0x24
 8006308:	2101      	movs	r1, #1
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fc6e 	bl	8006bec <RCCEx_PLL3_Config>
 8006310:	4603      	mov	r3, r0
 8006312:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006314:	e003      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	75fb      	strb	r3, [r7, #23]
      break;
 800631a:	e000      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800631c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800631e:	7dfb      	ldrb	r3, [r7, #23]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006324:	4b41      	ldr	r3, [pc, #260]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006328:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006332:	493e      	ldr	r1, [pc, #248]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006334:	4313      	orrs	r3, r2
 8006336:	654b      	str	r3, [r1, #84]	; 0x54
 8006338:	e001      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633a:	7dfb      	ldrb	r3, [r7, #23]
 800633c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d029      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006356:	d007      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006358:	e00f      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800635a:	4b34      	ldr	r3, [pc, #208]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800635c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635e:	4a33      	ldr	r2, [pc, #204]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006364:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006366:	e00b      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3304      	adds	r3, #4
 800636c:	2102      	movs	r1, #2
 800636e:	4618      	mov	r0, r3
 8006370:	f000 fb8a 	bl	8006a88 <RCCEx_PLL2_Config>
 8006374:	4603      	mov	r3, r0
 8006376:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006378:	e002      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	75fb      	strb	r3, [r7, #23]
      break;
 800637e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d109      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006386:	4b29      	ldr	r3, [pc, #164]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800638a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006392:	4926      	ldr	r1, [pc, #152]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006394:	4313      	orrs	r3, r2
 8006396:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006398:	e001      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800639a:	7dfb      	ldrb	r3, [r7, #23]
 800639c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3324      	adds	r3, #36	; 0x24
 80063ae:	2102      	movs	r1, #2
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 fc1b 	bl	8006bec <RCCEx_PLL3_Config>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d033      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063d4:	d017      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80063d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063da:	d811      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80063dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063e0:	d013      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80063e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063e6:	d80b      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d010      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80063ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063f0:	d106      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f2:	4b0e      	ldr	r3, [pc, #56]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80063f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f6:	4a0d      	ldr	r2, [pc, #52]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80063f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80063fe:	e007      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	75fb      	strb	r3, [r7, #23]
      break;
 8006404:	e004      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006406:	bf00      	nop
 8006408:	e002      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800640a:	bf00      	nop
 800640c:	e000      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800640e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006410:	7dfb      	ldrb	r3, [r7, #23]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10c      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006422:	4902      	ldr	r1, [pc, #8]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006424:	4313      	orrs	r3, r2
 8006426:	654b      	str	r3, [r1, #84]	; 0x54
 8006428:	e004      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800642a:	bf00      	nop
 800642c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006430:	7dfb      	ldrb	r3, [r7, #23]
 8006432:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d008      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006440:	4b31      	ldr	r3, [pc, #196]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006444:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644c:	492e      	ldr	r1, [pc, #184]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800644e:	4313      	orrs	r3, r2
 8006450:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800645e:	4b2a      	ldr	r3, [pc, #168]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800646c:	4926      	ldr	r1, [pc, #152]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800646e:	4313      	orrs	r3, r2
 8006470:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d008      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800647e:	4b22      	ldr	r3, [pc, #136]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006482:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800648a:	491f      	ldr	r1, [pc, #124]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800648c:	4313      	orrs	r3, r2
 800648e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00d      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800649c:	4b1a      	ldr	r3, [pc, #104]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	4a19      	ldr	r2, [pc, #100]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80064a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064a6:	6113      	str	r3, [r2, #16]
 80064a8:	4b17      	ldr	r3, [pc, #92]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80064aa:	691a      	ldr	r2, [r3, #16]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80064b2:	4915      	ldr	r1, [pc, #84]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	da08      	bge.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80064c0:	4b11      	ldr	r3, [pc, #68]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80064c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064cc:	490e      	ldr	r1, [pc, #56]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d009      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064de:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80064e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ec:	4906      	ldr	r1, [pc, #24]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80064f2:	7dbb      	ldrb	r3, [r7, #22]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	e000      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	58024400 	.word	0x58024400

0800650c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006510:	f7ff f85a 	bl	80055c8 <HAL_RCC_GetHCLKFreq>
 8006514:	4602      	mov	r2, r0
 8006516:	4b06      	ldr	r3, [pc, #24]	; (8006530 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	091b      	lsrs	r3, r3, #4
 800651c:	f003 0307 	and.w	r3, r3, #7
 8006520:	4904      	ldr	r1, [pc, #16]	; (8006534 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006522:	5ccb      	ldrb	r3, [r1, r3]
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800652c:	4618      	mov	r0, r3
 800652e:	bd80      	pop	{r7, pc}
 8006530:	58024400 	.word	0x58024400
 8006534:	0800fe98 	.word	0x0800fe98

08006538 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006538:	b480      	push	{r7}
 800653a:	b089      	sub	sp, #36	; 0x24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006540:	4ba1      	ldr	r3, [pc, #644]	; (80067c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006544:	f003 0303 	and.w	r3, r3, #3
 8006548:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800654a:	4b9f      	ldr	r3, [pc, #636]	; (80067c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800654c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654e:	0b1b      	lsrs	r3, r3, #12
 8006550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006554:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006556:	4b9c      	ldr	r3, [pc, #624]	; (80067c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655a:	091b      	lsrs	r3, r3, #4
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006562:	4b99      	ldr	r3, [pc, #612]	; (80067c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006566:	08db      	lsrs	r3, r3, #3
 8006568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	fb02 f303 	mul.w	r3, r2, r3
 8006572:	ee07 3a90 	vmov	s15, r3
 8006576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800657a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 8111 	beq.w	80067a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	2b02      	cmp	r3, #2
 800658a:	f000 8083 	beq.w	8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	2b02      	cmp	r3, #2
 8006592:	f200 80a1 	bhi.w	80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d056      	beq.n	8006650 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80065a2:	e099      	b.n	80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065a4:	4b88      	ldr	r3, [pc, #544]	; (80067c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0320 	and.w	r3, r3, #32
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d02d      	beq.n	800660c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065b0:	4b85      	ldr	r3, [pc, #532]	; (80067c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	08db      	lsrs	r3, r3, #3
 80065b6:	f003 0303 	and.w	r3, r3, #3
 80065ba:	4a84      	ldr	r2, [pc, #528]	; (80067cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80065bc:	fa22 f303 	lsr.w	r3, r2, r3
 80065c0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	ee07 3a90 	vmov	s15, r3
 80065c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	ee07 3a90 	vmov	s15, r3
 80065d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065da:	4b7b      	ldr	r3, [pc, #492]	; (80067c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e2:	ee07 3a90 	vmov	s15, r3
 80065e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006606:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800660a:	e087      	b.n	800671c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	ee07 3a90 	vmov	s15, r3
 8006612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006616:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80067d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800661a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800661e:	4b6a      	ldr	r3, [pc, #424]	; (80067c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006626:	ee07 3a90 	vmov	s15, r3
 800662a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800662e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006632:	eddf 5a67 	vldr	s11, [pc, #412]	; 80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800663a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800663e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800664a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800664e:	e065      	b.n	800671c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	ee07 3a90 	vmov	s15, r3
 8006656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800665e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006662:	4b59      	ldr	r3, [pc, #356]	; (80067c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666a:	ee07 3a90 	vmov	s15, r3
 800666e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006672:	ed97 6a03 	vldr	s12, [r7, #12]
 8006676:	eddf 5a56 	vldr	s11, [pc, #344]	; 80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800667a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800667e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800668a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800668e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006692:	e043      	b.n	800671c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	ee07 3a90 	vmov	s15, r3
 800669a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800669e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80067dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80066a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066a6:	4b48      	ldr	r3, [pc, #288]	; (80067c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ae:	ee07 3a90 	vmov	s15, r3
 80066b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066d6:	e021      	b.n	800671c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	ee07 3a90 	vmov	s15, r3
 80066de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80066e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ea:	4b37      	ldr	r3, [pc, #220]	; (80067c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f2:	ee07 3a90 	vmov	s15, r3
 80066f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80066fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800670a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800670e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006716:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800671a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800671c:	4b2a      	ldr	r3, [pc, #168]	; (80067c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	0a5b      	lsrs	r3, r3, #9
 8006722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006732:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006736:	edd7 6a07 	vldr	s13, [r7, #28]
 800673a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800673e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006742:	ee17 2a90 	vmov	r2, s15
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800674a:	4b1f      	ldr	r3, [pc, #124]	; (80067c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674e:	0c1b      	lsrs	r3, r3, #16
 8006750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006754:	ee07 3a90 	vmov	s15, r3
 8006758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006760:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006764:	edd7 6a07 	vldr	s13, [r7, #28]
 8006768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800676c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006770:	ee17 2a90 	vmov	r2, s15
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006778:	4b13      	ldr	r3, [pc, #76]	; (80067c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800677a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677c:	0e1b      	lsrs	r3, r3, #24
 800677e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006782:	ee07 3a90 	vmov	s15, r3
 8006786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800678e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006792:	edd7 6a07 	vldr	s13, [r7, #28]
 8006796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800679a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800679e:	ee17 2a90 	vmov	r2, s15
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80067a6:	e008      	b.n	80067ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	609a      	str	r2, [r3, #8]
}
 80067ba:	bf00      	nop
 80067bc:	3724      	adds	r7, #36	; 0x24
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	58024400 	.word	0x58024400
 80067cc:	03d09000 	.word	0x03d09000
 80067d0:	46000000 	.word	0x46000000
 80067d4:	4c742400 	.word	0x4c742400
 80067d8:	4a742400 	.word	0x4a742400
 80067dc:	4af42400 	.word	0x4af42400

080067e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b089      	sub	sp, #36	; 0x24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067e8:	4ba1      	ldr	r3, [pc, #644]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ec:	f003 0303 	and.w	r3, r3, #3
 80067f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80067f2:	4b9f      	ldr	r3, [pc, #636]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f6:	0d1b      	lsrs	r3, r3, #20
 80067f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80067fe:	4b9c      	ldr	r3, [pc, #624]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006802:	0a1b      	lsrs	r3, r3, #8
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800680a:	4b99      	ldr	r3, [pc, #612]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800680c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680e:	08db      	lsrs	r3, r3, #3
 8006810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	fb02 f303 	mul.w	r3, r2, r3
 800681a:	ee07 3a90 	vmov	s15, r3
 800681e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006822:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 8111 	beq.w	8006a50 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	2b02      	cmp	r3, #2
 8006832:	f000 8083 	beq.w	800693c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b02      	cmp	r3, #2
 800683a:	f200 80a1 	bhi.w	8006980 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d056      	beq.n	80068f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800684a:	e099      	b.n	8006980 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800684c:	4b88      	ldr	r3, [pc, #544]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	2b00      	cmp	r3, #0
 8006856:	d02d      	beq.n	80068b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006858:	4b85      	ldr	r3, [pc, #532]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	08db      	lsrs	r3, r3, #3
 800685e:	f003 0303 	and.w	r3, r3, #3
 8006862:	4a84      	ldr	r2, [pc, #528]	; (8006a74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006864:	fa22 f303 	lsr.w	r3, r2, r3
 8006868:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	ee07 3a90 	vmov	s15, r3
 8006870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	ee07 3a90 	vmov	s15, r3
 800687a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006882:	4b7b      	ldr	r3, [pc, #492]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688a:	ee07 3a90 	vmov	s15, r3
 800688e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006892:	ed97 6a03 	vldr	s12, [r7, #12]
 8006896:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800689a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800689e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80068b2:	e087      	b.n	80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006a7c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80068c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068c6:	4b6a      	ldr	r3, [pc, #424]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ce:	ee07 3a90 	vmov	s15, r3
 80068d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80068da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068f6:	e065      	b.n	80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006902:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800690a:	4b59      	ldr	r3, [pc, #356]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006912:	ee07 3a90 	vmov	s15, r3
 8006916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800691a:	ed97 6a03 	vldr	s12, [r7, #12]
 800691e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800692a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800692e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006936:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800693a:	e043      	b.n	80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	ee07 3a90 	vmov	s15, r3
 8006942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006946:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800694a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800694e:	4b48      	ldr	r3, [pc, #288]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800695e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006962:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800696a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800696e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800697a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800697e:	e021      	b.n	80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	ee07 3a90 	vmov	s15, r3
 8006986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800698e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006992:	4b37      	ldr	r3, [pc, #220]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699a:	ee07 3a90 	vmov	s15, r3
 800699e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80069c4:	4b2a      	ldr	r3, [pc, #168]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	0a5b      	lsrs	r3, r3, #9
 80069ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ce:	ee07 3a90 	vmov	s15, r3
 80069d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069de:	edd7 6a07 	vldr	s13, [r7, #28]
 80069e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069ea:	ee17 2a90 	vmov	r2, s15
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80069f2:	4b1f      	ldr	r3, [pc, #124]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	0c1b      	lsrs	r3, r3, #16
 80069f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069fc:	ee07 3a90 	vmov	s15, r3
 8006a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a18:	ee17 2a90 	vmov	r2, s15
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006a20:	4b13      	ldr	r3, [pc, #76]	; (8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a24:	0e1b      	lsrs	r3, r3, #24
 8006a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a2a:	ee07 3a90 	vmov	s15, r3
 8006a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a46:	ee17 2a90 	vmov	r2, s15
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006a4e:	e008      	b.n	8006a62 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	609a      	str	r2, [r3, #8]
}
 8006a62:	bf00      	nop
 8006a64:	3724      	adds	r7, #36	; 0x24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	58024400 	.word	0x58024400
 8006a74:	03d09000 	.word	0x03d09000
 8006a78:	46000000 	.word	0x46000000
 8006a7c:	4c742400 	.word	0x4c742400
 8006a80:	4a742400 	.word	0x4a742400
 8006a84:	4af42400 	.word	0x4af42400

08006a88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a96:	4b53      	ldr	r3, [pc, #332]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d101      	bne.n	8006aa6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e099      	b.n	8006bda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006aa6:	4b4f      	ldr	r3, [pc, #316]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a4e      	ldr	r2, [pc, #312]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006aac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ab2:	f7fc fb5d 	bl	8003170 <HAL_GetTick>
 8006ab6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ab8:	e008      	b.n	8006acc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006aba:	f7fc fb59 	bl	8003170 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d901      	bls.n	8006acc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e086      	b.n	8006bda <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006acc:	4b45      	ldr	r3, [pc, #276]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1f0      	bne.n	8006aba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006ad8:	4b42      	ldr	r3, [pc, #264]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006adc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	031b      	lsls	r3, r3, #12
 8006ae6:	493f      	ldr	r1, [pc, #252]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	628b      	str	r3, [r1, #40]	; 0x28
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	025b      	lsls	r3, r3, #9
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	431a      	orrs	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	3b01      	subs	r3, #1
 8006b08:	041b      	lsls	r3, r3, #16
 8006b0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	061b      	lsls	r3, r3, #24
 8006b18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b1c:	4931      	ldr	r1, [pc, #196]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006b22:	4b30      	ldr	r3, [pc, #192]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	492d      	ldr	r1, [pc, #180]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006b34:	4b2b      	ldr	r3, [pc, #172]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	f023 0220 	bic.w	r2, r3, #32
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	4928      	ldr	r1, [pc, #160]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006b46:	4b27      	ldr	r3, [pc, #156]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4a:	4a26      	ldr	r2, [pc, #152]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006b4c:	f023 0310 	bic.w	r3, r3, #16
 8006b50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006b52:	4b24      	ldr	r3, [pc, #144]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006b54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b56:	4b24      	ldr	r3, [pc, #144]	; (8006be8 <RCCEx_PLL2_Config+0x160>)
 8006b58:	4013      	ands	r3, r2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	69d2      	ldr	r2, [r2, #28]
 8006b5e:	00d2      	lsls	r2, r2, #3
 8006b60:	4920      	ldr	r1, [pc, #128]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006b66:	4b1f      	ldr	r3, [pc, #124]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6a:	4a1e      	ldr	r2, [pc, #120]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006b6c:	f043 0310 	orr.w	r3, r3, #16
 8006b70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d106      	bne.n	8006b86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006b78:	4b1a      	ldr	r3, [pc, #104]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	4a19      	ldr	r2, [pc, #100]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006b7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b84:	e00f      	b.n	8006ba6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d106      	bne.n	8006b9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006b8c:	4b15      	ldr	r3, [pc, #84]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b90:	4a14      	ldr	r2, [pc, #80]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b98:	e005      	b.n	8006ba6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006b9a:	4b12      	ldr	r3, [pc, #72]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9e:	4a11      	ldr	r2, [pc, #68]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006ba0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ba4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006ba6:	4b0f      	ldr	r3, [pc, #60]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a0e      	ldr	r2, [pc, #56]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006bac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bb2:	f7fc fadd 	bl	8003170 <HAL_GetTick>
 8006bb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006bb8:	e008      	b.n	8006bcc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006bba:	f7fc fad9 	bl	8003170 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d901      	bls.n	8006bcc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e006      	b.n	8006bda <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006bcc:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <RCCEx_PLL2_Config+0x15c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d0f0      	beq.n	8006bba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	58024400 	.word	0x58024400
 8006be8:	ffff0007 	.word	0xffff0007

08006bec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bfa:	4b53      	ldr	r3, [pc, #332]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfe:	f003 0303 	and.w	r3, r3, #3
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d101      	bne.n	8006c0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e099      	b.n	8006d3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006c0a:	4b4f      	ldr	r3, [pc, #316]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a4e      	ldr	r2, [pc, #312]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c16:	f7fc faab 	bl	8003170 <HAL_GetTick>
 8006c1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c1c:	e008      	b.n	8006c30 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006c1e:	f7fc faa7 	bl	8003170 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d901      	bls.n	8006c30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e086      	b.n	8006d3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c30:	4b45      	ldr	r3, [pc, #276]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1f0      	bne.n	8006c1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006c3c:	4b42      	ldr	r3, [pc, #264]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	051b      	lsls	r3, r3, #20
 8006c4a:	493f      	ldr	r1, [pc, #252]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	628b      	str	r3, [r1, #40]	; 0x28
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	3b01      	subs	r3, #1
 8006c56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	025b      	lsls	r3, r3, #9
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	431a      	orrs	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	041b      	lsls	r3, r3, #16
 8006c6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c72:	431a      	orrs	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	061b      	lsls	r3, r3, #24
 8006c7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c80:	4931      	ldr	r1, [pc, #196]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006c86:	4b30      	ldr	r3, [pc, #192]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	492d      	ldr	r1, [pc, #180]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006c98:	4b2b      	ldr	r3, [pc, #172]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	4928      	ldr	r1, [pc, #160]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006caa:	4b27      	ldr	r3, [pc, #156]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	4a26      	ldr	r2, [pc, #152]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006cb6:	4b24      	ldr	r3, [pc, #144]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cba:	4b24      	ldr	r3, [pc, #144]	; (8006d4c <RCCEx_PLL3_Config+0x160>)
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	69d2      	ldr	r2, [r2, #28]
 8006cc2:	00d2      	lsls	r2, r2, #3
 8006cc4:	4920      	ldr	r1, [pc, #128]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006cca:	4b1f      	ldr	r3, [pc, #124]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cce:	4a1e      	ldr	r2, [pc, #120]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d106      	bne.n	8006cea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006cdc:	4b1a      	ldr	r3, [pc, #104]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce0:	4a19      	ldr	r2, [pc, #100]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006ce2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ce6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ce8:	e00f      	b.n	8006d0a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d106      	bne.n	8006cfe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006cf0:	4b15      	ldr	r3, [pc, #84]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	4a14      	ldr	r2, [pc, #80]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006cf6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006cfc:	e005      	b.n	8006d0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006cfe:	4b12      	ldr	r3, [pc, #72]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d02:	4a11      	ldr	r2, [pc, #68]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006d04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006d0a:	4b0f      	ldr	r3, [pc, #60]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a0e      	ldr	r2, [pc, #56]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d16:	f7fc fa2b 	bl	8003170 <HAL_GetTick>
 8006d1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d1c:	e008      	b.n	8006d30 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006d1e:	f7fc fa27 	bl	8003170 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d901      	bls.n	8006d30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e006      	b.n	8006d3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d30:	4b05      	ldr	r3, [pc, #20]	; (8006d48 <RCCEx_PLL3_Config+0x15c>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d0f0      	beq.n	8006d1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	58024400 	.word	0x58024400
 8006d4c:	ffff0007 	.word	0xffff0007

08006d50 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e0f1      	b.n	8006f46 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a78      	ldr	r2, [pc, #480]	; (8006f50 <HAL_SPI_Init+0x200>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d00f      	beq.n	8006d92 <HAL_SPI_Init+0x42>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a77      	ldr	r2, [pc, #476]	; (8006f54 <HAL_SPI_Init+0x204>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00a      	beq.n	8006d92 <HAL_SPI_Init+0x42>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a75      	ldr	r2, [pc, #468]	; (8006f58 <HAL_SPI_Init+0x208>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d005      	beq.n	8006d92 <HAL_SPI_Init+0x42>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	2b0f      	cmp	r3, #15
 8006d8c:	d901      	bls.n	8006d92 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e0d9      	b.n	8006f46 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 ff66 	bl	8007c64 <SPI_GetPacketSize>
 8006d98:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a6c      	ldr	r2, [pc, #432]	; (8006f50 <HAL_SPI_Init+0x200>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d00c      	beq.n	8006dbe <HAL_SPI_Init+0x6e>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a6a      	ldr	r2, [pc, #424]	; (8006f54 <HAL_SPI_Init+0x204>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d007      	beq.n	8006dbe <HAL_SPI_Init+0x6e>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a69      	ldr	r2, [pc, #420]	; (8006f58 <HAL_SPI_Init+0x208>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d002      	beq.n	8006dbe <HAL_SPI_Init+0x6e>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b08      	cmp	r3, #8
 8006dbc:	d811      	bhi.n	8006de2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006dc2:	4a63      	ldr	r2, [pc, #396]	; (8006f50 <HAL_SPI_Init+0x200>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d009      	beq.n	8006ddc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a61      	ldr	r2, [pc, #388]	; (8006f54 <HAL_SPI_Init+0x204>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d004      	beq.n	8006ddc <HAL_SPI_Init+0x8c>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a60      	ldr	r2, [pc, #384]	; (8006f58 <HAL_SPI_Init+0x208>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d104      	bne.n	8006de6 <HAL_SPI_Init+0x96>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b10      	cmp	r3, #16
 8006de0:	d901      	bls.n	8006de6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e0af      	b.n	8006f46 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d106      	bne.n	8006e00 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7fb fd16 	bl	800282c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0201 	bic.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006e22:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e2c:	d119      	bne.n	8006e62 <HAL_SPI_Init+0x112>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e36:	d103      	bne.n	8006e40 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d008      	beq.n	8006e52 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10c      	bne.n	8006e62 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006e4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e50:	d107      	bne.n	8006e62 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e60:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	69da      	ldr	r2, [r3, #28]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e74:	ea42 0103 	orr.w	r1, r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	430a      	orrs	r2, r1
 8006e82:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	431a      	orrs	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec2:	ea42 0103 	orr.w	r1, r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d113      	bne.n	8006f02 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f00:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 0201 	bic.w	r2, r2, #1
 8006f10:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	40013000 	.word	0x40013000
 8006f54:	40003800 	.word	0x40003800
 8006f58:	40003c00 	.word	0x40003c00

08006f5c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08a      	sub	sp, #40	; 0x28
 8006f60:	af02      	add	r7, sp, #8
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	603b      	str	r3, [r7, #0]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3320      	adds	r3, #32
 8006f72:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d101      	bne.n	8006f86 <HAL_SPI_Transmit+0x2a>
 8006f82:	2302      	movs	r3, #2
 8006f84:	e1d7      	b.n	8007336 <HAL_SPI_Transmit+0x3da>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f8e:	f7fc f8ef 	bl	8003170 <HAL_GetTick>
 8006f92:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d007      	beq.n	8006fb0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006fac:	7efb      	ldrb	r3, [r7, #27]
 8006fae:	e1c2      	b.n	8007336 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <HAL_SPI_Transmit+0x60>
 8006fb6:	88fb      	ldrh	r3, [r7, #6]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d107      	bne.n	8006fcc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006fc8:	7efb      	ldrb	r3, [r7, #27]
 8006fca:	e1b4      	b.n	8007336 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2203      	movs	r2, #3
 8006fd0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	88fa      	ldrh	r2, [r7, #6]
 8006fe6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	88fa      	ldrh	r2, [r7, #6]
 8006fee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800701c:	d107      	bne.n	800702e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800702c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	4b96      	ldr	r3, [pc, #600]	; (8007290 <HAL_SPI_Transmit+0x334>)
 8007036:	4013      	ands	r3, r2
 8007038:	88f9      	ldrh	r1, [r7, #6]
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	6812      	ldr	r2, [r2, #0]
 800703e:	430b      	orrs	r3, r1
 8007040:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f042 0201 	orr.w	r2, r2, #1
 8007050:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800705a:	d107      	bne.n	800706c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800706a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	2b0f      	cmp	r3, #15
 8007072:	d947      	bls.n	8007104 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007074:	e03f      	b.n	80070f6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b02      	cmp	r3, #2
 8007082:	d114      	bne.n	80070ae <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6812      	ldr	r2, [r2, #0]
 800708e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007094:	1d1a      	adds	r2, r3, #4
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	3b01      	subs	r3, #1
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80070ac:	e023      	b.n	80070f6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070ae:	f7fc f85f 	bl	8003170 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d803      	bhi.n	80070c6 <HAL_SPI_Transmit+0x16a>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c4:	d102      	bne.n	80070cc <HAL_SPI_Transmit+0x170>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d114      	bne.n	80070f6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 fcfb 	bl	8007ac8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e11f      	b.n	8007336 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1b9      	bne.n	8007076 <HAL_SPI_Transmit+0x11a>
 8007102:	e0f2      	b.n	80072ea <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	2b07      	cmp	r3, #7
 800710a:	f240 80e7 	bls.w	80072dc <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800710e:	e05d      	b.n	80071cc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b02      	cmp	r3, #2
 800711c:	d132      	bne.n	8007184 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b01      	cmp	r3, #1
 8007128:	d918      	bls.n	800715c <HAL_SPI_Transmit+0x200>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712e:	2b00      	cmp	r3, #0
 8007130:	d014      	beq.n	800715c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6812      	ldr	r2, [r2, #0]
 800713c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007142:	1d1a      	adds	r2, r3, #4
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800714e:	b29b      	uxth	r3, r3
 8007150:	3b02      	subs	r3, #2
 8007152:	b29a      	uxth	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800715a:	e037      	b.n	80071cc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007160:	881a      	ldrh	r2, [r3, #0]
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800716a:	1c9a      	adds	r2, r3, #2
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007176:	b29b      	uxth	r3, r3
 8007178:	3b01      	subs	r3, #1
 800717a:	b29a      	uxth	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007182:	e023      	b.n	80071cc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007184:	f7fb fff4 	bl	8003170 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d803      	bhi.n	800719c <HAL_SPI_Transmit+0x240>
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719a:	d102      	bne.n	80071a2 <HAL_SPI_Transmit+0x246>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d114      	bne.n	80071cc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 fc90 	bl	8007ac8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e0b4      	b.n	8007336 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d19b      	bne.n	8007110 <HAL_SPI_Transmit+0x1b4>
 80071d8:	e087      	b.n	80072ea <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d155      	bne.n	8007294 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d918      	bls.n	8007226 <HAL_SPI_Transmit+0x2ca>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f8:	2b40      	cmp	r3, #64	; 0x40
 80071fa:	d914      	bls.n	8007226 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6812      	ldr	r2, [r2, #0]
 8007206:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800720c:	1d1a      	adds	r2, r3, #4
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007218:	b29b      	uxth	r3, r3
 800721a:	3b04      	subs	r3, #4
 800721c:	b29a      	uxth	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007224:	e05a      	b.n	80072dc <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800722c:	b29b      	uxth	r3, r3
 800722e:	2b01      	cmp	r3, #1
 8007230:	d917      	bls.n	8007262 <HAL_SPI_Transmit+0x306>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007236:	2b00      	cmp	r3, #0
 8007238:	d013      	beq.n	8007262 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800723e:	881a      	ldrh	r2, [r3, #0]
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007248:	1c9a      	adds	r2, r3, #2
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007254:	b29b      	uxth	r3, r3
 8007256:	3b02      	subs	r3, #2
 8007258:	b29a      	uxth	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007260:	e03c      	b.n	80072dc <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3320      	adds	r3, #32
 800726c:	7812      	ldrb	r2, [r2, #0]
 800726e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007274:	1c5a      	adds	r2, r3, #1
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007280:	b29b      	uxth	r3, r3
 8007282:	3b01      	subs	r3, #1
 8007284:	b29a      	uxth	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800728c:	e026      	b.n	80072dc <HAL_SPI_Transmit+0x380>
 800728e:	bf00      	nop
 8007290:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007294:	f7fb ff6c 	bl	8003170 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d803      	bhi.n	80072ac <HAL_SPI_Transmit+0x350>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072aa:	d102      	bne.n	80072b2 <HAL_SPI_Transmit+0x356>
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d114      	bne.n	80072dc <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 fc08 	bl	8007ac8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e02c      	b.n	8007336 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f47f af78 	bne.w	80071da <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2200      	movs	r2, #0
 80072f2:	2108      	movs	r1, #8
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 fc87 	bl	8007c08 <SPI_WaitOnFlagUntilTimeout>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d007      	beq.n	8007310 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007306:	f043 0220 	orr.w	r2, r3, #32
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 fbd9 	bl	8007ac8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e000      	b.n	8007336 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8007334:	7efb      	ldrb	r3, [r7, #27]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3720      	adds	r7, #32
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop

08007340 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	; 0x28
 8007344:	af02      	add	r7, sp, #8
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	4613      	mov	r3, r2
 800734e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3330      	adds	r3, #48	; 0x30
 800735a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007364:	d112      	bne.n	800738c <HAL_SPI_Receive+0x4c>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10e      	bne.n	800738c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2204      	movs	r2, #4
 8007372:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007376:	88fa      	ldrh	r2, [r7, #6]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	4613      	mov	r3, r2
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	68b9      	ldr	r1, [r7, #8]
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 f978 	bl	8007678 <HAL_SPI_TransmitReceive>
 8007388:	4603      	mov	r3, r0
 800738a:	e16f      	b.n	800766c <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007392:	2b01      	cmp	r3, #1
 8007394:	d101      	bne.n	800739a <HAL_SPI_Receive+0x5a>
 8007396:	2302      	movs	r3, #2
 8007398:	e168      	b.n	800766c <HAL_SPI_Receive+0x32c>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073a2:	f7fb fee5 	bl	8003170 <HAL_GetTick>
 80073a6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d007      	beq.n	80073c4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80073b4:	2302      	movs	r3, #2
 80073b6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80073c0:	7ffb      	ldrb	r3, [r7, #31]
 80073c2:	e153      	b.n	800766c <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <HAL_SPI_Receive+0x90>
 80073ca:	88fb      	ldrh	r3, [r7, #6]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d107      	bne.n	80073e0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80073dc:	7ffb      	ldrb	r3, [r7, #31]
 80073de:	e145      	b.n	800766c <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2204      	movs	r2, #4
 80073e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	88fa      	ldrh	r2, [r7, #6]
 80073fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	88fa      	ldrh	r2, [r7, #6]
 8007402:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007430:	d107      	bne.n	8007442 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007440:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	4b8a      	ldr	r3, [pc, #552]	; (8007674 <HAL_SPI_Receive+0x334>)
 800744a:	4013      	ands	r3, r2
 800744c:	88f9      	ldrh	r1, [r7, #6]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	6812      	ldr	r2, [r2, #0]
 8007452:	430b      	orrs	r3, r1
 8007454:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f042 0201 	orr.w	r2, r2, #1
 8007464:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800746e:	d107      	bne.n	8007480 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800747e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	2b0f      	cmp	r3, #15
 8007486:	d948      	bls.n	800751a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007488:	e040      	b.n	800750c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	695a      	ldr	r2, [r3, #20]
 8007490:	f248 0308 	movw	r3, #32776	; 0x8008
 8007494:	4013      	ands	r3, r2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d014      	beq.n	80074c4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80074a4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074aa:	1d1a      	adds	r2, r3, #4
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	3b01      	subs	r3, #1
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80074c2:	e023      	b.n	800750c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074c4:	f7fb fe54 	bl	8003170 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d803      	bhi.n	80074dc <HAL_SPI_Receive+0x19c>
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074da:	d102      	bne.n	80074e2 <HAL_SPI_Receive+0x1a2>
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d114      	bne.n	800750c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 faf0 	bl	8007ac8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e0af      	b.n	800766c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007512:	b29b      	uxth	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1b8      	bne.n	800748a <HAL_SPI_Receive+0x14a>
 8007518:	e095      	b.n	8007646 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	2b07      	cmp	r3, #7
 8007520:	f240 808b 	bls.w	800763a <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007524:	e03f      	b.n	80075a6 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b01      	cmp	r3, #1
 8007532:	d114      	bne.n	800755e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	8812      	ldrh	r2, [r2, #0]
 800753c:	b292      	uxth	r2, r2
 800753e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007544:	1c9a      	adds	r2, r3, #2
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007550:	b29b      	uxth	r3, r3
 8007552:	3b01      	subs	r3, #1
 8007554:	b29a      	uxth	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800755c:	e023      	b.n	80075a6 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800755e:	f7fb fe07 	bl	8003170 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	683a      	ldr	r2, [r7, #0]
 800756a:	429a      	cmp	r2, r3
 800756c:	d803      	bhi.n	8007576 <HAL_SPI_Receive+0x236>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007574:	d102      	bne.n	800757c <HAL_SPI_Receive+0x23c>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d114      	bne.n	80075a6 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 faa3 	bl	8007ac8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007590:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e062      	b.n	800766c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1b9      	bne.n	8007526 <HAL_SPI_Receive+0x1e6>
 80075b2:	e048      	b.n	8007646 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d117      	bne.n	80075f2 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075ce:	7812      	ldrb	r2, [r2, #0]
 80075d0:	b2d2      	uxtb	r2, r2
 80075d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	3b01      	subs	r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80075f0:	e023      	b.n	800763a <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075f2:	f7fb fdbd 	bl	8003170 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d803      	bhi.n	800760a <HAL_SPI_Receive+0x2ca>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007608:	d102      	bne.n	8007610 <HAL_SPI_Receive+0x2d0>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d114      	bne.n	800763a <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f000 fa59 	bl	8007ac8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007624:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e018      	b.n	800766c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1b6      	bne.n	80075b4 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 fa3e 	bl	8007ac8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e000      	b.n	800766c <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800766a:	7ffb      	ldrb	r3, [r7, #31]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3720      	adds	r7, #32
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	ffff0000 	.word	0xffff0000

08007678 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08e      	sub	sp, #56	; 0x38
 800767c:	af02      	add	r7, sp, #8
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3320      	adds	r3, #32
 8007692:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	3330      	adds	r3, #48	; 0x30
 800769a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d101      	bne.n	80076aa <HAL_SPI_TransmitReceive+0x32>
 80076a6:	2302      	movs	r3, #2
 80076a8:	e209      	b.n	8007abe <HAL_SPI_TransmitReceive+0x446>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076b2:	f7fb fd5d 	bl	8003170 <HAL_GetTick>
 80076b6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80076b8:	887b      	ldrh	r3, [r7, #2]
 80076ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80076bc:	887b      	ldrh	r3, [r7, #2]
 80076be:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80076c6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076ce:	7efb      	ldrb	r3, [r7, #27]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d014      	beq.n	80076fe <HAL_SPI_TransmitReceive+0x86>
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076da:	d106      	bne.n	80076ea <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d102      	bne.n	80076ea <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80076e4:	7efb      	ldrb	r3, [r7, #27]
 80076e6:	2b04      	cmp	r3, #4
 80076e8:	d009      	beq.n	80076fe <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 80076ea:	2302      	movs	r3, #2
 80076ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80076f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076fc:	e1df      	b.n	8007abe <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d005      	beq.n	8007710 <HAL_SPI_TransmitReceive+0x98>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <HAL_SPI_TransmitReceive+0x98>
 800770a:	887b      	ldrh	r3, [r7, #2]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d109      	bne.n	8007724 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800771e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007722:	e1cc      	b.n	8007abe <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b04      	cmp	r3, #4
 800772e:	d003      	beq.n	8007738 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2205      	movs	r2, #5
 8007734:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	887a      	ldrh	r2, [r7, #2]
 800774a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	887a      	ldrh	r2, [r7, #2]
 8007752:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	887a      	ldrh	r2, [r7, #2]
 8007760:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	887a      	ldrh	r2, [r7, #2]
 8007768:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	4b82      	ldr	r3, [pc, #520]	; (8007988 <HAL_SPI_TransmitReceive+0x310>)
 8007780:	4013      	ands	r3, r2
 8007782:	8879      	ldrh	r1, [r7, #2]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	6812      	ldr	r2, [r2, #0]
 8007788:	430b      	orrs	r3, r1
 800778a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f042 0201 	orr.w	r2, r2, #1
 800779a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077a4:	d107      	bne.n	80077b6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	2b0f      	cmp	r3, #15
 80077bc:	d970      	bls.n	80078a0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80077be:	e068      	b.n	8007892 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d11a      	bne.n	8007804 <HAL_SPI_TransmitReceive+0x18c>
 80077ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d017      	beq.n	8007804 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6812      	ldr	r2, [r2, #0]
 80077de:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e4:	1d1a      	adds	r2, r3, #4
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	3b01      	subs	r3, #1
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007802:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	695a      	ldr	r2, [r3, #20]
 800780a:	f248 0308 	movw	r3, #32776	; 0x8008
 800780e:	4013      	ands	r3, r2
 8007810:	2b00      	cmp	r3, #0
 8007812:	d01a      	beq.n	800784a <HAL_SPI_TransmitReceive+0x1d2>
 8007814:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007816:	2b00      	cmp	r3, #0
 8007818:	d017      	beq.n	800784a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007822:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007824:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800782a:	1d1a      	adds	r2, r3, #4
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007836:	b29b      	uxth	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007848:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800784a:	f7fb fc91 	bl	8003170 <HAL_GetTick>
 800784e:	4602      	mov	r2, r0
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007856:	429a      	cmp	r2, r3
 8007858:	d803      	bhi.n	8007862 <HAL_SPI_TransmitReceive+0x1ea>
 800785a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007860:	d102      	bne.n	8007868 <HAL_SPI_TransmitReceive+0x1f0>
 8007862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007864:	2b00      	cmp	r3, #0
 8007866:	d114      	bne.n	8007892 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f000 f92d 	bl	8007ac8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800787c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e115      	b.n	8007abe <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007892:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007894:	2b00      	cmp	r3, #0
 8007896:	d193      	bne.n	80077c0 <HAL_SPI_TransmitReceive+0x148>
 8007898:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d190      	bne.n	80077c0 <HAL_SPI_TransmitReceive+0x148>
 800789e:	e0e7      	b.n	8007a70 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	2b07      	cmp	r3, #7
 80078a6:	f240 80dd 	bls.w	8007a64 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80078aa:	e066      	b.n	800797a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	f003 0302 	and.w	r3, r3, #2
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d119      	bne.n	80078ee <HAL_SPI_TransmitReceive+0x276>
 80078ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d016      	beq.n	80078ee <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078c4:	881a      	ldrh	r2, [r3, #0]
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ce:	1c9a      	adds	r2, r3, #2
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80078da:	b29b      	uxth	r3, r3
 80078dc:	3b01      	subs	r3, #1
 80078de:	b29a      	uxth	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80078ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d11a      	bne.n	8007932 <HAL_SPI_TransmitReceive+0x2ba>
 80078fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d017      	beq.n	8007932 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007906:	6a3a      	ldr	r2, [r7, #32]
 8007908:	8812      	ldrh	r2, [r2, #0]
 800790a:	b292      	uxth	r2, r2
 800790c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007912:	1c9a      	adds	r2, r3, #2
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800791e:	b29b      	uxth	r3, r3
 8007920:	3b01      	subs	r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007930:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007932:	f7fb fc1d 	bl	8003170 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800793e:	429a      	cmp	r2, r3
 8007940:	d803      	bhi.n	800794a <HAL_SPI_TransmitReceive+0x2d2>
 8007942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007948:	d102      	bne.n	8007950 <HAL_SPI_TransmitReceive+0x2d8>
 800794a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794c:	2b00      	cmp	r3, #0
 800794e:	d114      	bne.n	800797a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 f8b9 	bl	8007ac8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007964:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e0a1      	b.n	8007abe <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800797a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800797c:	2b00      	cmp	r3, #0
 800797e:	d195      	bne.n	80078ac <HAL_SPI_TransmitReceive+0x234>
 8007980:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007982:	2b00      	cmp	r3, #0
 8007984:	d192      	bne.n	80078ac <HAL_SPI_TransmitReceive+0x234>
 8007986:	e073      	b.n	8007a70 <HAL_SPI_TransmitReceive+0x3f8>
 8007988:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b02      	cmp	r3, #2
 8007998:	d11b      	bne.n	80079d2 <HAL_SPI_TransmitReceive+0x35a>
 800799a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800799c:	2b00      	cmp	r3, #0
 800799e:	d018      	beq.n	80079d2 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3320      	adds	r3, #32
 80079aa:	7812      	ldrb	r2, [r2, #0]
 80079ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80079be:	b29b      	uxth	r3, r3
 80079c0:	3b01      	subs	r3, #1
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80079d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d11d      	bne.n	8007a1c <HAL_SPI_TransmitReceive+0x3a4>
 80079e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d01a      	beq.n	8007a1c <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079f2:	7812      	ldrb	r2, [r2, #0]
 80079f4:	b2d2      	uxtb	r2, r2
 80079f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a1a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a1c:	f7fb fba8 	bl	8003170 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d803      	bhi.n	8007a34 <HAL_SPI_TransmitReceive+0x3bc>
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a32:	d102      	bne.n	8007a3a <HAL_SPI_TransmitReceive+0x3c2>
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d114      	bne.n	8007a64 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 f844 	bl	8007ac8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e02c      	b.n	8007abe <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007a64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d190      	bne.n	800798c <HAL_SPI_TransmitReceive+0x314>
 8007a6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d18d      	bne.n	800798c <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	2200      	movs	r2, #0
 8007a78:	2108      	movs	r1, #8
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 f8c4 	bl	8007c08 <SPI_WaitOnFlagUntilTimeout>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d007      	beq.n	8007a96 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a8c:	f043 0220 	orr.w	r2, r3, #32
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 f816 	bl	8007ac8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d001      	beq.n	8007aba <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e001      	b.n	8007abe <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8007aba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3730      	adds	r7, #48	; 0x30
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop

08007ac8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	699a      	ldr	r2, [r3, #24]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f042 0208 	orr.w	r2, r2, #8
 8007ae6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	699a      	ldr	r2, [r3, #24]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0210 	orr.w	r2, r2, #16
 8007af6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f022 0201 	bic.w	r2, r2, #1
 8007b06:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6919      	ldr	r1, [r3, #16]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	4b3c      	ldr	r3, [pc, #240]	; (8007c04 <SPI_CloseTransfer+0x13c>)
 8007b14:	400b      	ands	r3, r1
 8007b16:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007b26:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d014      	beq.n	8007b5e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f003 0320 	and.w	r3, r3, #32
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00f      	beq.n	8007b5e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	699a      	ldr	r2, [r3, #24]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f042 0220 	orr.w	r2, r2, #32
 8007b5c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d014      	beq.n	8007b94 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00f      	beq.n	8007b94 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b7a:	f043 0204 	orr.w	r2, r3, #4
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	699a      	ldr	r2, [r3, #24]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b92:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00f      	beq.n	8007bbe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ba4:	f043 0201 	orr.w	r2, r3, #1
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	699a      	ldr	r2, [r3, #24]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bbc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00f      	beq.n	8007be8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bce:	f043 0208 	orr.w	r2, r3, #8
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	699a      	ldr	r2, [r3, #24]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007be6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007bf8:	bf00      	nop
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	fffffc90 	.word	0xfffffc90

08007c08 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	603b      	str	r3, [r7, #0]
 8007c14:	4613      	mov	r3, r2
 8007c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007c18:	e010      	b.n	8007c3c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c1a:	f7fb faa9 	bl	8003170 <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d803      	bhi.n	8007c32 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c30:	d102      	bne.n	8007c38 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e00f      	b.n	8007c5c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	695a      	ldr	r2, [r3, #20]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	4013      	ands	r3, r2
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	bf0c      	ite	eq
 8007c4c:	2301      	moveq	r3, #1
 8007c4e:	2300      	movne	r3, #0
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	461a      	mov	r2, r3
 8007c54:	79fb      	ldrb	r3, [r7, #7]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d0df      	beq.n	8007c1a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c70:	095b      	lsrs	r3, r3, #5
 8007c72:	3301      	adds	r3, #1
 8007c74:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	3307      	adds	r3, #7
 8007c82:	08db      	lsrs	r3, r3, #3
 8007c84:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	fb02 f303 	mul.w	r3, r2, r3
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b082      	sub	sp, #8
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e049      	b.n	8007d40 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d106      	bne.n	8007cc6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7fa fe19 	bl	80028f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2202      	movs	r2, #2
 8007cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	4610      	mov	r0, r2
 8007cda:	f000 fab9 	bl	8008250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e049      	b.n	8007dee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d106      	bne.n	8007d74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f841 	bl	8007df6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2202      	movs	r2, #2
 8007d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	3304      	adds	r3, #4
 8007d84:	4619      	mov	r1, r3
 8007d86:	4610      	mov	r0, r2
 8007d88:	f000 fa62 	bl	8008250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
	...

08007e0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d109      	bne.n	8007e30 <HAL_TIM_PWM_Start+0x24>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	bf14      	ite	ne
 8007e28:	2301      	movne	r3, #1
 8007e2a:	2300      	moveq	r3, #0
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	e03c      	b.n	8007eaa <HAL_TIM_PWM_Start+0x9e>
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	d109      	bne.n	8007e4a <HAL_TIM_PWM_Start+0x3e>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	bf14      	ite	ne
 8007e42:	2301      	movne	r3, #1
 8007e44:	2300      	moveq	r3, #0
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	e02f      	b.n	8007eaa <HAL_TIM_PWM_Start+0x9e>
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2b08      	cmp	r3, #8
 8007e4e:	d109      	bne.n	8007e64 <HAL_TIM_PWM_Start+0x58>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	bf14      	ite	ne
 8007e5c:	2301      	movne	r3, #1
 8007e5e:	2300      	moveq	r3, #0
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	e022      	b.n	8007eaa <HAL_TIM_PWM_Start+0x9e>
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2b0c      	cmp	r3, #12
 8007e68:	d109      	bne.n	8007e7e <HAL_TIM_PWM_Start+0x72>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	bf14      	ite	ne
 8007e76:	2301      	movne	r3, #1
 8007e78:	2300      	moveq	r3, #0
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	e015      	b.n	8007eaa <HAL_TIM_PWM_Start+0x9e>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b10      	cmp	r3, #16
 8007e82:	d109      	bne.n	8007e98 <HAL_TIM_PWM_Start+0x8c>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	bf14      	ite	ne
 8007e90:	2301      	movne	r3, #1
 8007e92:	2300      	moveq	r3, #0
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	e008      	b.n	8007eaa <HAL_TIM_PWM_Start+0x9e>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	bf14      	ite	ne
 8007ea4:	2301      	movne	r3, #1
 8007ea6:	2300      	moveq	r3, #0
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e0a1      	b.n	8007ff6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d104      	bne.n	8007ec2 <HAL_TIM_PWM_Start+0xb6>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ec0:	e023      	b.n	8007f0a <HAL_TIM_PWM_Start+0xfe>
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	d104      	bne.n	8007ed2 <HAL_TIM_PWM_Start+0xc6>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ed0:	e01b      	b.n	8007f0a <HAL_TIM_PWM_Start+0xfe>
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d104      	bne.n	8007ee2 <HAL_TIM_PWM_Start+0xd6>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ee0:	e013      	b.n	8007f0a <HAL_TIM_PWM_Start+0xfe>
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b0c      	cmp	r3, #12
 8007ee6:	d104      	bne.n	8007ef2 <HAL_TIM_PWM_Start+0xe6>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ef0:	e00b      	b.n	8007f0a <HAL_TIM_PWM_Start+0xfe>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b10      	cmp	r3, #16
 8007ef6:	d104      	bne.n	8007f02 <HAL_TIM_PWM_Start+0xf6>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f00:	e003      	b.n	8007f0a <HAL_TIM_PWM_Start+0xfe>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2202      	movs	r2, #2
 8007f06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 fd0c 	bl	8008930 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a38      	ldr	r2, [pc, #224]	; (8008000 <HAL_TIM_PWM_Start+0x1f4>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d013      	beq.n	8007f4a <HAL_TIM_PWM_Start+0x13e>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a37      	ldr	r2, [pc, #220]	; (8008004 <HAL_TIM_PWM_Start+0x1f8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00e      	beq.n	8007f4a <HAL_TIM_PWM_Start+0x13e>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a35      	ldr	r2, [pc, #212]	; (8008008 <HAL_TIM_PWM_Start+0x1fc>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d009      	beq.n	8007f4a <HAL_TIM_PWM_Start+0x13e>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a34      	ldr	r2, [pc, #208]	; (800800c <HAL_TIM_PWM_Start+0x200>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d004      	beq.n	8007f4a <HAL_TIM_PWM_Start+0x13e>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a32      	ldr	r2, [pc, #200]	; (8008010 <HAL_TIM_PWM_Start+0x204>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d101      	bne.n	8007f4e <HAL_TIM_PWM_Start+0x142>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e000      	b.n	8007f50 <HAL_TIM_PWM_Start+0x144>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d007      	beq.n	8007f64 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a25      	ldr	r2, [pc, #148]	; (8008000 <HAL_TIM_PWM_Start+0x1f4>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d022      	beq.n	8007fb4 <HAL_TIM_PWM_Start+0x1a8>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f76:	d01d      	beq.n	8007fb4 <HAL_TIM_PWM_Start+0x1a8>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a25      	ldr	r2, [pc, #148]	; (8008014 <HAL_TIM_PWM_Start+0x208>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d018      	beq.n	8007fb4 <HAL_TIM_PWM_Start+0x1a8>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a24      	ldr	r2, [pc, #144]	; (8008018 <HAL_TIM_PWM_Start+0x20c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d013      	beq.n	8007fb4 <HAL_TIM_PWM_Start+0x1a8>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a22      	ldr	r2, [pc, #136]	; (800801c <HAL_TIM_PWM_Start+0x210>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d00e      	beq.n	8007fb4 <HAL_TIM_PWM_Start+0x1a8>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a1a      	ldr	r2, [pc, #104]	; (8008004 <HAL_TIM_PWM_Start+0x1f8>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d009      	beq.n	8007fb4 <HAL_TIM_PWM_Start+0x1a8>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a1e      	ldr	r2, [pc, #120]	; (8008020 <HAL_TIM_PWM_Start+0x214>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d004      	beq.n	8007fb4 <HAL_TIM_PWM_Start+0x1a8>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a16      	ldr	r2, [pc, #88]	; (8008008 <HAL_TIM_PWM_Start+0x1fc>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d115      	bne.n	8007fe0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689a      	ldr	r2, [r3, #8]
 8007fba:	4b1a      	ldr	r3, [pc, #104]	; (8008024 <HAL_TIM_PWM_Start+0x218>)
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2b06      	cmp	r3, #6
 8007fc4:	d015      	beq.n	8007ff2 <HAL_TIM_PWM_Start+0x1e6>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fcc:	d011      	beq.n	8007ff2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f042 0201 	orr.w	r2, r2, #1
 8007fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fde:	e008      	b.n	8007ff2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f042 0201 	orr.w	r2, r2, #1
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	e000      	b.n	8007ff4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ff2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	40010000 	.word	0x40010000
 8008004:	40010400 	.word	0x40010400
 8008008:	40014000 	.word	0x40014000
 800800c:	40014400 	.word	0x40014400
 8008010:	40014800 	.word	0x40014800
 8008014:	40000400 	.word	0x40000400
 8008018:	40000800 	.word	0x40000800
 800801c:	40000c00 	.word	0x40000c00
 8008020:	40001800 	.word	0x40001800
 8008024:	00010007 	.word	0x00010007

08008028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800803e:	2b01      	cmp	r3, #1
 8008040:	d101      	bne.n	8008046 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008042:	2302      	movs	r3, #2
 8008044:	e0ff      	b.n	8008246 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b14      	cmp	r3, #20
 8008052:	f200 80f0 	bhi.w	8008236 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008056:	a201      	add	r2, pc, #4	; (adr r2, 800805c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805c:	080080b1 	.word	0x080080b1
 8008060:	08008237 	.word	0x08008237
 8008064:	08008237 	.word	0x08008237
 8008068:	08008237 	.word	0x08008237
 800806c:	080080f1 	.word	0x080080f1
 8008070:	08008237 	.word	0x08008237
 8008074:	08008237 	.word	0x08008237
 8008078:	08008237 	.word	0x08008237
 800807c:	08008133 	.word	0x08008133
 8008080:	08008237 	.word	0x08008237
 8008084:	08008237 	.word	0x08008237
 8008088:	08008237 	.word	0x08008237
 800808c:	08008173 	.word	0x08008173
 8008090:	08008237 	.word	0x08008237
 8008094:	08008237 	.word	0x08008237
 8008098:	08008237 	.word	0x08008237
 800809c:	080081b5 	.word	0x080081b5
 80080a0:	08008237 	.word	0x08008237
 80080a4:	08008237 	.word	0x08008237
 80080a8:	08008237 	.word	0x08008237
 80080ac:	080081f5 	.word	0x080081f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68b9      	ldr	r1, [r7, #8]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 f964 	bl	8008384 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699a      	ldr	r2, [r3, #24]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f042 0208 	orr.w	r2, r2, #8
 80080ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	699a      	ldr	r2, [r3, #24]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f022 0204 	bic.w	r2, r2, #4
 80080da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6999      	ldr	r1, [r3, #24]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	691a      	ldr	r2, [r3, #16]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	619a      	str	r2, [r3, #24]
      break;
 80080ee:	e0a5      	b.n	800823c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68b9      	ldr	r1, [r7, #8]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 f9d4 	bl	80084a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	699a      	ldr	r2, [r3, #24]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800810a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	699a      	ldr	r2, [r3, #24]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800811a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6999      	ldr	r1, [r3, #24]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	021a      	lsls	r2, r3, #8
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	430a      	orrs	r2, r1
 800812e:	619a      	str	r2, [r3, #24]
      break;
 8008130:	e084      	b.n	800823c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68b9      	ldr	r1, [r7, #8]
 8008138:	4618      	mov	r0, r3
 800813a:	f000 fa3d 	bl	80085b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	69da      	ldr	r2, [r3, #28]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f042 0208 	orr.w	r2, r2, #8
 800814c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	69da      	ldr	r2, [r3, #28]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f022 0204 	bic.w	r2, r2, #4
 800815c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69d9      	ldr	r1, [r3, #28]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	691a      	ldr	r2, [r3, #16]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	430a      	orrs	r2, r1
 800816e:	61da      	str	r2, [r3, #28]
      break;
 8008170:	e064      	b.n	800823c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68b9      	ldr	r1, [r7, #8]
 8008178:	4618      	mov	r0, r3
 800817a:	f000 faa5 	bl	80086c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	69da      	ldr	r2, [r3, #28]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800818c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	69da      	ldr	r2, [r3, #28]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800819c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	69d9      	ldr	r1, [r3, #28]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	021a      	lsls	r2, r3, #8
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	61da      	str	r2, [r3, #28]
      break;
 80081b2:	e043      	b.n	800823c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68b9      	ldr	r1, [r7, #8]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 faee 	bl	800879c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0208 	orr.w	r2, r2, #8
 80081ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 0204 	bic.w	r2, r2, #4
 80081de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	691a      	ldr	r2, [r3, #16]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80081f2:	e023      	b.n	800823c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68b9      	ldr	r1, [r7, #8]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 fb32 	bl	8008864 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800820e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800821e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	021a      	lsls	r2, r3, #8
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008234:	e002      	b.n	800823c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	75fb      	strb	r3, [r7, #23]
      break;
 800823a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008244:	7dfb      	ldrb	r3, [r7, #23]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop

08008250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a40      	ldr	r2, [pc, #256]	; (8008364 <TIM_Base_SetConfig+0x114>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d013      	beq.n	8008290 <TIM_Base_SetConfig+0x40>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800826e:	d00f      	beq.n	8008290 <TIM_Base_SetConfig+0x40>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a3d      	ldr	r2, [pc, #244]	; (8008368 <TIM_Base_SetConfig+0x118>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00b      	beq.n	8008290 <TIM_Base_SetConfig+0x40>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a3c      	ldr	r2, [pc, #240]	; (800836c <TIM_Base_SetConfig+0x11c>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d007      	beq.n	8008290 <TIM_Base_SetConfig+0x40>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a3b      	ldr	r2, [pc, #236]	; (8008370 <TIM_Base_SetConfig+0x120>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d003      	beq.n	8008290 <TIM_Base_SetConfig+0x40>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a3a      	ldr	r2, [pc, #232]	; (8008374 <TIM_Base_SetConfig+0x124>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d108      	bne.n	80082a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a2f      	ldr	r2, [pc, #188]	; (8008364 <TIM_Base_SetConfig+0x114>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d01f      	beq.n	80082ea <TIM_Base_SetConfig+0x9a>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b0:	d01b      	beq.n	80082ea <TIM_Base_SetConfig+0x9a>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a2c      	ldr	r2, [pc, #176]	; (8008368 <TIM_Base_SetConfig+0x118>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d017      	beq.n	80082ea <TIM_Base_SetConfig+0x9a>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a2b      	ldr	r2, [pc, #172]	; (800836c <TIM_Base_SetConfig+0x11c>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d013      	beq.n	80082ea <TIM_Base_SetConfig+0x9a>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a2a      	ldr	r2, [pc, #168]	; (8008370 <TIM_Base_SetConfig+0x120>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d00f      	beq.n	80082ea <TIM_Base_SetConfig+0x9a>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a29      	ldr	r2, [pc, #164]	; (8008374 <TIM_Base_SetConfig+0x124>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d00b      	beq.n	80082ea <TIM_Base_SetConfig+0x9a>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a28      	ldr	r2, [pc, #160]	; (8008378 <TIM_Base_SetConfig+0x128>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d007      	beq.n	80082ea <TIM_Base_SetConfig+0x9a>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a27      	ldr	r2, [pc, #156]	; (800837c <TIM_Base_SetConfig+0x12c>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d003      	beq.n	80082ea <TIM_Base_SetConfig+0x9a>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a26      	ldr	r2, [pc, #152]	; (8008380 <TIM_Base_SetConfig+0x130>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d108      	bne.n	80082fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	4313      	orrs	r3, r2
 8008308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	689a      	ldr	r2, [r3, #8]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a10      	ldr	r2, [pc, #64]	; (8008364 <TIM_Base_SetConfig+0x114>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d00f      	beq.n	8008348 <TIM_Base_SetConfig+0xf8>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a12      	ldr	r2, [pc, #72]	; (8008374 <TIM_Base_SetConfig+0x124>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d00b      	beq.n	8008348 <TIM_Base_SetConfig+0xf8>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a11      	ldr	r2, [pc, #68]	; (8008378 <TIM_Base_SetConfig+0x128>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d007      	beq.n	8008348 <TIM_Base_SetConfig+0xf8>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a10      	ldr	r2, [pc, #64]	; (800837c <TIM_Base_SetConfig+0x12c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d003      	beq.n	8008348 <TIM_Base_SetConfig+0xf8>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a0f      	ldr	r2, [pc, #60]	; (8008380 <TIM_Base_SetConfig+0x130>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d103      	bne.n	8008350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	691a      	ldr	r2, [r3, #16]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	615a      	str	r2, [r3, #20]
}
 8008356:	bf00      	nop
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	40010000 	.word	0x40010000
 8008368:	40000400 	.word	0x40000400
 800836c:	40000800 	.word	0x40000800
 8008370:	40000c00 	.word	0x40000c00
 8008374:	40010400 	.word	0x40010400
 8008378:	40014000 	.word	0x40014000
 800837c:	40014400 	.word	0x40014400
 8008380:	40014800 	.word	0x40014800

08008384 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008384:	b480      	push	{r7}
 8008386:	b087      	sub	sp, #28
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	f023 0201 	bic.w	r2, r3, #1
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	4b37      	ldr	r3, [pc, #220]	; (800848c <TIM_OC1_SetConfig+0x108>)
 80083b0:	4013      	ands	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f023 0303 	bic.w	r3, r3, #3
 80083ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f023 0302 	bic.w	r3, r3, #2
 80083cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a2d      	ldr	r2, [pc, #180]	; (8008490 <TIM_OC1_SetConfig+0x10c>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d00f      	beq.n	8008400 <TIM_OC1_SetConfig+0x7c>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a2c      	ldr	r2, [pc, #176]	; (8008494 <TIM_OC1_SetConfig+0x110>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d00b      	beq.n	8008400 <TIM_OC1_SetConfig+0x7c>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a2b      	ldr	r2, [pc, #172]	; (8008498 <TIM_OC1_SetConfig+0x114>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d007      	beq.n	8008400 <TIM_OC1_SetConfig+0x7c>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a2a      	ldr	r2, [pc, #168]	; (800849c <TIM_OC1_SetConfig+0x118>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d003      	beq.n	8008400 <TIM_OC1_SetConfig+0x7c>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a29      	ldr	r2, [pc, #164]	; (80084a0 <TIM_OC1_SetConfig+0x11c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d10c      	bne.n	800841a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f023 0308 	bic.w	r3, r3, #8
 8008406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	4313      	orrs	r3, r2
 8008410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f023 0304 	bic.w	r3, r3, #4
 8008418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a1c      	ldr	r2, [pc, #112]	; (8008490 <TIM_OC1_SetConfig+0x10c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00f      	beq.n	8008442 <TIM_OC1_SetConfig+0xbe>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a1b      	ldr	r2, [pc, #108]	; (8008494 <TIM_OC1_SetConfig+0x110>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d00b      	beq.n	8008442 <TIM_OC1_SetConfig+0xbe>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a1a      	ldr	r2, [pc, #104]	; (8008498 <TIM_OC1_SetConfig+0x114>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d007      	beq.n	8008442 <TIM_OC1_SetConfig+0xbe>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a19      	ldr	r2, [pc, #100]	; (800849c <TIM_OC1_SetConfig+0x118>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d003      	beq.n	8008442 <TIM_OC1_SetConfig+0xbe>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a18      	ldr	r2, [pc, #96]	; (80084a0 <TIM_OC1_SetConfig+0x11c>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d111      	bne.n	8008466 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	4313      	orrs	r3, r2
 800845a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	4313      	orrs	r3, r2
 8008464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	621a      	str	r2, [r3, #32]
}
 8008480:	bf00      	nop
 8008482:	371c      	adds	r7, #28
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	fffeff8f 	.word	0xfffeff8f
 8008490:	40010000 	.word	0x40010000
 8008494:	40010400 	.word	0x40010400
 8008498:	40014000 	.word	0x40014000
 800849c:	40014400 	.word	0x40014400
 80084a0:	40014800 	.word	0x40014800

080084a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	f023 0210 	bic.w	r2, r3, #16
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4b34      	ldr	r3, [pc, #208]	; (80085a0 <TIM_OC2_SetConfig+0xfc>)
 80084d0:	4013      	ands	r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	021b      	lsls	r3, r3, #8
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f023 0320 	bic.w	r3, r3, #32
 80084ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	011b      	lsls	r3, r3, #4
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a29      	ldr	r2, [pc, #164]	; (80085a4 <TIM_OC2_SetConfig+0x100>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d003      	beq.n	800850c <TIM_OC2_SetConfig+0x68>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a28      	ldr	r2, [pc, #160]	; (80085a8 <TIM_OC2_SetConfig+0x104>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d10d      	bne.n	8008528 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	011b      	lsls	r3, r3, #4
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	4313      	orrs	r3, r2
 800851e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008526:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a1e      	ldr	r2, [pc, #120]	; (80085a4 <TIM_OC2_SetConfig+0x100>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d00f      	beq.n	8008550 <TIM_OC2_SetConfig+0xac>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a1d      	ldr	r2, [pc, #116]	; (80085a8 <TIM_OC2_SetConfig+0x104>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d00b      	beq.n	8008550 <TIM_OC2_SetConfig+0xac>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a1c      	ldr	r2, [pc, #112]	; (80085ac <TIM_OC2_SetConfig+0x108>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d007      	beq.n	8008550 <TIM_OC2_SetConfig+0xac>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a1b      	ldr	r2, [pc, #108]	; (80085b0 <TIM_OC2_SetConfig+0x10c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d003      	beq.n	8008550 <TIM_OC2_SetConfig+0xac>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a1a      	ldr	r2, [pc, #104]	; (80085b4 <TIM_OC2_SetConfig+0x110>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d113      	bne.n	8008578 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008556:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800855e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	695b      	ldr	r3, [r3, #20]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	4313      	orrs	r3, r2
 800856a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	4313      	orrs	r3, r2
 8008576:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	685a      	ldr	r2, [r3, #4]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	621a      	str	r2, [r3, #32]
}
 8008592:	bf00      	nop
 8008594:	371c      	adds	r7, #28
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	feff8fff 	.word	0xfeff8fff
 80085a4:	40010000 	.word	0x40010000
 80085a8:	40010400 	.word	0x40010400
 80085ac:	40014000 	.word	0x40014000
 80085b0:	40014400 	.word	0x40014400
 80085b4:	40014800 	.word	0x40014800

080085b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	4b33      	ldr	r3, [pc, #204]	; (80086b0 <TIM_OC3_SetConfig+0xf8>)
 80085e4:	4013      	ands	r3, r2
 80085e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 0303 	bic.w	r3, r3, #3
 80085ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	021b      	lsls	r3, r3, #8
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	4313      	orrs	r3, r2
 800860c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a28      	ldr	r2, [pc, #160]	; (80086b4 <TIM_OC3_SetConfig+0xfc>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d003      	beq.n	800861e <TIM_OC3_SetConfig+0x66>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a27      	ldr	r2, [pc, #156]	; (80086b8 <TIM_OC3_SetConfig+0x100>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d10d      	bne.n	800863a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008624:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	021b      	lsls	r3, r3, #8
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	4313      	orrs	r3, r2
 8008630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a1d      	ldr	r2, [pc, #116]	; (80086b4 <TIM_OC3_SetConfig+0xfc>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d00f      	beq.n	8008662 <TIM_OC3_SetConfig+0xaa>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a1c      	ldr	r2, [pc, #112]	; (80086b8 <TIM_OC3_SetConfig+0x100>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d00b      	beq.n	8008662 <TIM_OC3_SetConfig+0xaa>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a1b      	ldr	r2, [pc, #108]	; (80086bc <TIM_OC3_SetConfig+0x104>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d007      	beq.n	8008662 <TIM_OC3_SetConfig+0xaa>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a1a      	ldr	r2, [pc, #104]	; (80086c0 <TIM_OC3_SetConfig+0x108>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d003      	beq.n	8008662 <TIM_OC3_SetConfig+0xaa>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a19      	ldr	r2, [pc, #100]	; (80086c4 <TIM_OC3_SetConfig+0x10c>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d113      	bne.n	800868a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	011b      	lsls	r3, r3, #4
 8008678:	693a      	ldr	r2, [r7, #16]
 800867a:	4313      	orrs	r3, r2
 800867c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	011b      	lsls	r3, r3, #4
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	4313      	orrs	r3, r2
 8008688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	621a      	str	r2, [r3, #32]
}
 80086a4:	bf00      	nop
 80086a6:	371c      	adds	r7, #28
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	fffeff8f 	.word	0xfffeff8f
 80086b4:	40010000 	.word	0x40010000
 80086b8:	40010400 	.word	0x40010400
 80086bc:	40014000 	.word	0x40014000
 80086c0:	40014400 	.word	0x40014400
 80086c4:	40014800 	.word	0x40014800

080086c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	4b24      	ldr	r3, [pc, #144]	; (8008784 <TIM_OC4_SetConfig+0xbc>)
 80086f4:	4013      	ands	r3, r2
 80086f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	021b      	lsls	r3, r3, #8
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	4313      	orrs	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	031b      	lsls	r3, r3, #12
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	4313      	orrs	r3, r2
 800871e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a19      	ldr	r2, [pc, #100]	; (8008788 <TIM_OC4_SetConfig+0xc0>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d00f      	beq.n	8008748 <TIM_OC4_SetConfig+0x80>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a18      	ldr	r2, [pc, #96]	; (800878c <TIM_OC4_SetConfig+0xc4>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d00b      	beq.n	8008748 <TIM_OC4_SetConfig+0x80>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a17      	ldr	r2, [pc, #92]	; (8008790 <TIM_OC4_SetConfig+0xc8>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d007      	beq.n	8008748 <TIM_OC4_SetConfig+0x80>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a16      	ldr	r2, [pc, #88]	; (8008794 <TIM_OC4_SetConfig+0xcc>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d003      	beq.n	8008748 <TIM_OC4_SetConfig+0x80>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a15      	ldr	r2, [pc, #84]	; (8008798 <TIM_OC4_SetConfig+0xd0>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d109      	bne.n	800875c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800874e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	695b      	ldr	r3, [r3, #20]
 8008754:	019b      	lsls	r3, r3, #6
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	4313      	orrs	r3, r2
 800875a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	621a      	str	r2, [r3, #32]
}
 8008776:	bf00      	nop
 8008778:	371c      	adds	r7, #28
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	feff8fff 	.word	0xfeff8fff
 8008788:	40010000 	.word	0x40010000
 800878c:	40010400 	.word	0x40010400
 8008790:	40014000 	.word	0x40014000
 8008794:	40014400 	.word	0x40014400
 8008798:	40014800 	.word	0x40014800

0800879c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a1b      	ldr	r3, [r3, #32]
 80087aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	4b21      	ldr	r3, [pc, #132]	; (800884c <TIM_OC5_SetConfig+0xb0>)
 80087c8:	4013      	ands	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80087dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	041b      	lsls	r3, r3, #16
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a18      	ldr	r2, [pc, #96]	; (8008850 <TIM_OC5_SetConfig+0xb4>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d00f      	beq.n	8008812 <TIM_OC5_SetConfig+0x76>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a17      	ldr	r2, [pc, #92]	; (8008854 <TIM_OC5_SetConfig+0xb8>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d00b      	beq.n	8008812 <TIM_OC5_SetConfig+0x76>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a16      	ldr	r2, [pc, #88]	; (8008858 <TIM_OC5_SetConfig+0xbc>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d007      	beq.n	8008812 <TIM_OC5_SetConfig+0x76>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a15      	ldr	r2, [pc, #84]	; (800885c <TIM_OC5_SetConfig+0xc0>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d003      	beq.n	8008812 <TIM_OC5_SetConfig+0x76>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a14      	ldr	r2, [pc, #80]	; (8008860 <TIM_OC5_SetConfig+0xc4>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d109      	bne.n	8008826 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008818:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	021b      	lsls	r3, r3, #8
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	4313      	orrs	r3, r2
 8008824:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	621a      	str	r2, [r3, #32]
}
 8008840:	bf00      	nop
 8008842:	371c      	adds	r7, #28
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	fffeff8f 	.word	0xfffeff8f
 8008850:	40010000 	.word	0x40010000
 8008854:	40010400 	.word	0x40010400
 8008858:	40014000 	.word	0x40014000
 800885c:	40014400 	.word	0x40014400
 8008860:	40014800 	.word	0x40014800

08008864 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008864:	b480      	push	{r7}
 8008866:	b087      	sub	sp, #28
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	4b22      	ldr	r3, [pc, #136]	; (8008918 <TIM_OC6_SetConfig+0xb4>)
 8008890:	4013      	ands	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	021b      	lsls	r3, r3, #8
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	4313      	orrs	r3, r2
 800889e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	051b      	lsls	r3, r3, #20
 80088ae:	693a      	ldr	r2, [r7, #16]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a19      	ldr	r2, [pc, #100]	; (800891c <TIM_OC6_SetConfig+0xb8>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d00f      	beq.n	80088dc <TIM_OC6_SetConfig+0x78>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a18      	ldr	r2, [pc, #96]	; (8008920 <TIM_OC6_SetConfig+0xbc>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d00b      	beq.n	80088dc <TIM_OC6_SetConfig+0x78>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a17      	ldr	r2, [pc, #92]	; (8008924 <TIM_OC6_SetConfig+0xc0>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d007      	beq.n	80088dc <TIM_OC6_SetConfig+0x78>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a16      	ldr	r2, [pc, #88]	; (8008928 <TIM_OC6_SetConfig+0xc4>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d003      	beq.n	80088dc <TIM_OC6_SetConfig+0x78>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a15      	ldr	r2, [pc, #84]	; (800892c <TIM_OC6_SetConfig+0xc8>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d109      	bne.n	80088f0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	029b      	lsls	r3, r3, #10
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	621a      	str	r2, [r3, #32]
}
 800890a:	bf00      	nop
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	feff8fff 	.word	0xfeff8fff
 800891c:	40010000 	.word	0x40010000
 8008920:	40010400 	.word	0x40010400
 8008924:	40014000 	.word	0x40014000
 8008928:	40014400 	.word	0x40014400
 800892c:	40014800 	.word	0x40014800

08008930 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008930:	b480      	push	{r7}
 8008932:	b087      	sub	sp, #28
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f003 031f 	and.w	r3, r3, #31
 8008942:	2201      	movs	r2, #1
 8008944:	fa02 f303 	lsl.w	r3, r2, r3
 8008948:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6a1a      	ldr	r2, [r3, #32]
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	43db      	mvns	r3, r3
 8008952:	401a      	ands	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6a1a      	ldr	r2, [r3, #32]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	f003 031f 	and.w	r3, r3, #31
 8008962:	6879      	ldr	r1, [r7, #4]
 8008964:	fa01 f303 	lsl.w	r3, r1, r3
 8008968:	431a      	orrs	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	621a      	str	r2, [r3, #32]
}
 800896e:	bf00      	nop
 8008970:	371c      	adds	r7, #28
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
	...

0800897c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008986:	2300      	movs	r3, #0
 8008988:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008990:	2b01      	cmp	r3, #1
 8008992:	d101      	bne.n	8008998 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008994:	2302      	movs	r3, #2
 8008996:	e065      	b.n	8008a64 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fe:	4313      	orrs	r3, r2
 8008a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	041b      	lsls	r3, r3, #16
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a16      	ldr	r2, [pc, #88]	; (8008a70 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d004      	beq.n	8008a26 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a14      	ldr	r2, [pc, #80]	; (8008a74 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d115      	bne.n	8008a52 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	051b      	lsls	r3, r3, #20
 8008a32:	4313      	orrs	r3, r2
 8008a34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	69db      	ldr	r3, [r3, #28]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	40010000 	.word	0x40010000
 8008a74:	40010400 	.word	0x40010400

08008a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e042      	b.n	8008b10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d106      	bne.n	8008aa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7f9 ffc9 	bl	8002a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2224      	movs	r2, #36	; 0x24
 8008aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f022 0201 	bic.w	r2, r2, #1
 8008ab8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f8c2 	bl	8008c44 <UART_SetConfig>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d101      	bne.n	8008aca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e022      	b.n	8008b10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d002      	beq.n	8008ad8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fe1e 	bl	8009714 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ae6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	689a      	ldr	r2, [r3, #8]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008af6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f042 0201 	orr.w	r2, r2, #1
 8008b06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fea5 	bl	8009858 <UART_CheckIdleState>
 8008b0e:	4603      	mov	r3, r0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b08a      	sub	sp, #40	; 0x28
 8008b1c:	af02      	add	r7, sp, #8
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	603b      	str	r3, [r7, #0]
 8008b24:	4613      	mov	r3, r2
 8008b26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b2e:	2b20      	cmp	r3, #32
 8008b30:	f040 8083 	bne.w	8008c3a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d002      	beq.n	8008b40 <HAL_UART_Transmit+0x28>
 8008b3a:	88fb      	ldrh	r3, [r7, #6]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e07b      	b.n	8008c3c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d101      	bne.n	8008b52 <HAL_UART_Transmit+0x3a>
 8008b4e:	2302      	movs	r3, #2
 8008b50:	e074      	b.n	8008c3c <HAL_UART_Transmit+0x124>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2221      	movs	r2, #33	; 0x21
 8008b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b6a:	f7fa fb01 	bl	8003170 <HAL_GetTick>
 8008b6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	88fa      	ldrh	r2, [r7, #6]
 8008b74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	88fa      	ldrh	r2, [r7, #6]
 8008b7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b88:	d108      	bne.n	8008b9c <HAL_UART_Transmit+0x84>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d104      	bne.n	8008b9c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	61bb      	str	r3, [r7, #24]
 8008b9a:	e003      	b.n	8008ba4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008bac:	e02c      	b.n	8008c08 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2180      	movs	r1, #128	; 0x80
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f000 fe98 	bl	80098ee <UART_WaitOnFlagUntilTimeout>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d001      	beq.n	8008bc8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e039      	b.n	8008c3c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10b      	bne.n	8008be6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	881b      	ldrh	r3, [r3, #0]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bdc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	3302      	adds	r3, #2
 8008be2:	61bb      	str	r3, [r7, #24]
 8008be4:	e007      	b.n	8008bf6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	781a      	ldrb	r2, [r3, #0]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1cc      	bne.n	8008bae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	2140      	movs	r1, #64	; 0x40
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 fe65 	bl	80098ee <UART_WaitOnFlagUntilTimeout>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e006      	b.n	8008c3c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2220      	movs	r2, #32
 8008c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	e000      	b.n	8008c3c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008c3a:	2302      	movs	r3, #2
  }
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3720      	adds	r7, #32
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c48:	b092      	sub	sp, #72	; 0x48
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	689a      	ldr	r2, [r3, #8]
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	431a      	orrs	r2, r3
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	695b      	ldr	r3, [r3, #20]
 8008c62:	431a      	orrs	r2, r3
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	4bbe      	ldr	r3, [pc, #760]	; (8008f6c <UART_SetConfig+0x328>)
 8008c74:	4013      	ands	r3, r2
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	6812      	ldr	r2, [r2, #0]
 8008c7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c7c:	430b      	orrs	r3, r1
 8008c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	68da      	ldr	r2, [r3, #12]
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4ab3      	ldr	r2, [pc, #716]	; (8008f70 <UART_SetConfig+0x32c>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d004      	beq.n	8008cb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cac:	4313      	orrs	r3, r2
 8008cae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	689a      	ldr	r2, [r3, #8]
 8008cb6:	4baf      	ldr	r3, [pc, #700]	; (8008f74 <UART_SetConfig+0x330>)
 8008cb8:	4013      	ands	r3, r2
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	6812      	ldr	r2, [r2, #0]
 8008cbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008cc0:	430b      	orrs	r3, r1
 8008cc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cca:	f023 010f 	bic.w	r1, r3, #15
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4aa6      	ldr	r2, [pc, #664]	; (8008f78 <UART_SetConfig+0x334>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d177      	bne.n	8008dd4 <UART_SetConfig+0x190>
 8008ce4:	4ba5      	ldr	r3, [pc, #660]	; (8008f7c <UART_SetConfig+0x338>)
 8008ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cec:	2b28      	cmp	r3, #40	; 0x28
 8008cee:	d86d      	bhi.n	8008dcc <UART_SetConfig+0x188>
 8008cf0:	a201      	add	r2, pc, #4	; (adr r2, 8008cf8 <UART_SetConfig+0xb4>)
 8008cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf6:	bf00      	nop
 8008cf8:	08008d9d 	.word	0x08008d9d
 8008cfc:	08008dcd 	.word	0x08008dcd
 8008d00:	08008dcd 	.word	0x08008dcd
 8008d04:	08008dcd 	.word	0x08008dcd
 8008d08:	08008dcd 	.word	0x08008dcd
 8008d0c:	08008dcd 	.word	0x08008dcd
 8008d10:	08008dcd 	.word	0x08008dcd
 8008d14:	08008dcd 	.word	0x08008dcd
 8008d18:	08008da5 	.word	0x08008da5
 8008d1c:	08008dcd 	.word	0x08008dcd
 8008d20:	08008dcd 	.word	0x08008dcd
 8008d24:	08008dcd 	.word	0x08008dcd
 8008d28:	08008dcd 	.word	0x08008dcd
 8008d2c:	08008dcd 	.word	0x08008dcd
 8008d30:	08008dcd 	.word	0x08008dcd
 8008d34:	08008dcd 	.word	0x08008dcd
 8008d38:	08008dad 	.word	0x08008dad
 8008d3c:	08008dcd 	.word	0x08008dcd
 8008d40:	08008dcd 	.word	0x08008dcd
 8008d44:	08008dcd 	.word	0x08008dcd
 8008d48:	08008dcd 	.word	0x08008dcd
 8008d4c:	08008dcd 	.word	0x08008dcd
 8008d50:	08008dcd 	.word	0x08008dcd
 8008d54:	08008dcd 	.word	0x08008dcd
 8008d58:	08008db5 	.word	0x08008db5
 8008d5c:	08008dcd 	.word	0x08008dcd
 8008d60:	08008dcd 	.word	0x08008dcd
 8008d64:	08008dcd 	.word	0x08008dcd
 8008d68:	08008dcd 	.word	0x08008dcd
 8008d6c:	08008dcd 	.word	0x08008dcd
 8008d70:	08008dcd 	.word	0x08008dcd
 8008d74:	08008dcd 	.word	0x08008dcd
 8008d78:	08008dbd 	.word	0x08008dbd
 8008d7c:	08008dcd 	.word	0x08008dcd
 8008d80:	08008dcd 	.word	0x08008dcd
 8008d84:	08008dcd 	.word	0x08008dcd
 8008d88:	08008dcd 	.word	0x08008dcd
 8008d8c:	08008dcd 	.word	0x08008dcd
 8008d90:	08008dcd 	.word	0x08008dcd
 8008d94:	08008dcd 	.word	0x08008dcd
 8008d98:	08008dc5 	.word	0x08008dc5
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da2:	e222      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008da4:	2304      	movs	r3, #4
 8008da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008daa:	e21e      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008dac:	2308      	movs	r3, #8
 8008dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008db2:	e21a      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008db4:	2310      	movs	r3, #16
 8008db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dba:	e216      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008dbc:	2320      	movs	r3, #32
 8008dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dc2:	e212      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008dc4:	2340      	movs	r3, #64	; 0x40
 8008dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dca:	e20e      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008dcc:	2380      	movs	r3, #128	; 0x80
 8008dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dd2:	e20a      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a69      	ldr	r2, [pc, #420]	; (8008f80 <UART_SetConfig+0x33c>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d130      	bne.n	8008e40 <UART_SetConfig+0x1fc>
 8008dde:	4b67      	ldr	r3, [pc, #412]	; (8008f7c <UART_SetConfig+0x338>)
 8008de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de2:	f003 0307 	and.w	r3, r3, #7
 8008de6:	2b05      	cmp	r3, #5
 8008de8:	d826      	bhi.n	8008e38 <UART_SetConfig+0x1f4>
 8008dea:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <UART_SetConfig+0x1ac>)
 8008dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df0:	08008e09 	.word	0x08008e09
 8008df4:	08008e11 	.word	0x08008e11
 8008df8:	08008e19 	.word	0x08008e19
 8008dfc:	08008e21 	.word	0x08008e21
 8008e00:	08008e29 	.word	0x08008e29
 8008e04:	08008e31 	.word	0x08008e31
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e0e:	e1ec      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008e10:	2304      	movs	r3, #4
 8008e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e16:	e1e8      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008e18:	2308      	movs	r3, #8
 8008e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e1e:	e1e4      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008e20:	2310      	movs	r3, #16
 8008e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e26:	e1e0      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008e28:	2320      	movs	r3, #32
 8008e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e2e:	e1dc      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008e30:	2340      	movs	r3, #64	; 0x40
 8008e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e36:	e1d8      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008e38:	2380      	movs	r3, #128	; 0x80
 8008e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e3e:	e1d4      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a4f      	ldr	r2, [pc, #316]	; (8008f84 <UART_SetConfig+0x340>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d130      	bne.n	8008eac <UART_SetConfig+0x268>
 8008e4a:	4b4c      	ldr	r3, [pc, #304]	; (8008f7c <UART_SetConfig+0x338>)
 8008e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e4e:	f003 0307 	and.w	r3, r3, #7
 8008e52:	2b05      	cmp	r3, #5
 8008e54:	d826      	bhi.n	8008ea4 <UART_SetConfig+0x260>
 8008e56:	a201      	add	r2, pc, #4	; (adr r2, 8008e5c <UART_SetConfig+0x218>)
 8008e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5c:	08008e75 	.word	0x08008e75
 8008e60:	08008e7d 	.word	0x08008e7d
 8008e64:	08008e85 	.word	0x08008e85
 8008e68:	08008e8d 	.word	0x08008e8d
 8008e6c:	08008e95 	.word	0x08008e95
 8008e70:	08008e9d 	.word	0x08008e9d
 8008e74:	2300      	movs	r3, #0
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e7a:	e1b6      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e82:	e1b2      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008e84:	2308      	movs	r3, #8
 8008e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e8a:	e1ae      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e92:	e1aa      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008e94:	2320      	movs	r3, #32
 8008e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e9a:	e1a6      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008e9c:	2340      	movs	r3, #64	; 0x40
 8008e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ea2:	e1a2      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008ea4:	2380      	movs	r3, #128	; 0x80
 8008ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eaa:	e19e      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a35      	ldr	r2, [pc, #212]	; (8008f88 <UART_SetConfig+0x344>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d130      	bne.n	8008f18 <UART_SetConfig+0x2d4>
 8008eb6:	4b31      	ldr	r3, [pc, #196]	; (8008f7c <UART_SetConfig+0x338>)
 8008eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	2b05      	cmp	r3, #5
 8008ec0:	d826      	bhi.n	8008f10 <UART_SetConfig+0x2cc>
 8008ec2:	a201      	add	r2, pc, #4	; (adr r2, 8008ec8 <UART_SetConfig+0x284>)
 8008ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec8:	08008ee1 	.word	0x08008ee1
 8008ecc:	08008ee9 	.word	0x08008ee9
 8008ed0:	08008ef1 	.word	0x08008ef1
 8008ed4:	08008ef9 	.word	0x08008ef9
 8008ed8:	08008f01 	.word	0x08008f01
 8008edc:	08008f09 	.word	0x08008f09
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ee6:	e180      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008ee8:	2304      	movs	r3, #4
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eee:	e17c      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ef6:	e178      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008ef8:	2310      	movs	r3, #16
 8008efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008efe:	e174      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008f00:	2320      	movs	r3, #32
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f06:	e170      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008f08:	2340      	movs	r3, #64	; 0x40
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f0e:	e16c      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008f10:	2380      	movs	r3, #128	; 0x80
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f16:	e168      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a1b      	ldr	r2, [pc, #108]	; (8008f8c <UART_SetConfig+0x348>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d142      	bne.n	8008fa8 <UART_SetConfig+0x364>
 8008f22:	4b16      	ldr	r3, [pc, #88]	; (8008f7c <UART_SetConfig+0x338>)
 8008f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f26:	f003 0307 	and.w	r3, r3, #7
 8008f2a:	2b05      	cmp	r3, #5
 8008f2c:	d838      	bhi.n	8008fa0 <UART_SetConfig+0x35c>
 8008f2e:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <UART_SetConfig+0x2f0>)
 8008f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f34:	08008f4d 	.word	0x08008f4d
 8008f38:	08008f55 	.word	0x08008f55
 8008f3c:	08008f5d 	.word	0x08008f5d
 8008f40:	08008f65 	.word	0x08008f65
 8008f44:	08008f91 	.word	0x08008f91
 8008f48:	08008f99 	.word	0x08008f99
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f52:	e14a      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008f54:	2304      	movs	r3, #4
 8008f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f5a:	e146      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008f5c:	2308      	movs	r3, #8
 8008f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f62:	e142      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008f64:	2310      	movs	r3, #16
 8008f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f6a:	e13e      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008f6c:	cfff69f3 	.word	0xcfff69f3
 8008f70:	58000c00 	.word	0x58000c00
 8008f74:	11fff4ff 	.word	0x11fff4ff
 8008f78:	40011000 	.word	0x40011000
 8008f7c:	58024400 	.word	0x58024400
 8008f80:	40004400 	.word	0x40004400
 8008f84:	40004800 	.word	0x40004800
 8008f88:	40004c00 	.word	0x40004c00
 8008f8c:	40005000 	.word	0x40005000
 8008f90:	2320      	movs	r3, #32
 8008f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f96:	e128      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008f98:	2340      	movs	r3, #64	; 0x40
 8008f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f9e:	e124      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008fa0:	2380      	movs	r3, #128	; 0x80
 8008fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fa6:	e120      	b.n	80091ea <UART_SetConfig+0x5a6>
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4acb      	ldr	r2, [pc, #812]	; (80092dc <UART_SetConfig+0x698>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d176      	bne.n	80090a0 <UART_SetConfig+0x45c>
 8008fb2:	4bcb      	ldr	r3, [pc, #812]	; (80092e0 <UART_SetConfig+0x69c>)
 8008fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fba:	2b28      	cmp	r3, #40	; 0x28
 8008fbc:	d86c      	bhi.n	8009098 <UART_SetConfig+0x454>
 8008fbe:	a201      	add	r2, pc, #4	; (adr r2, 8008fc4 <UART_SetConfig+0x380>)
 8008fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc4:	08009069 	.word	0x08009069
 8008fc8:	08009099 	.word	0x08009099
 8008fcc:	08009099 	.word	0x08009099
 8008fd0:	08009099 	.word	0x08009099
 8008fd4:	08009099 	.word	0x08009099
 8008fd8:	08009099 	.word	0x08009099
 8008fdc:	08009099 	.word	0x08009099
 8008fe0:	08009099 	.word	0x08009099
 8008fe4:	08009071 	.word	0x08009071
 8008fe8:	08009099 	.word	0x08009099
 8008fec:	08009099 	.word	0x08009099
 8008ff0:	08009099 	.word	0x08009099
 8008ff4:	08009099 	.word	0x08009099
 8008ff8:	08009099 	.word	0x08009099
 8008ffc:	08009099 	.word	0x08009099
 8009000:	08009099 	.word	0x08009099
 8009004:	08009079 	.word	0x08009079
 8009008:	08009099 	.word	0x08009099
 800900c:	08009099 	.word	0x08009099
 8009010:	08009099 	.word	0x08009099
 8009014:	08009099 	.word	0x08009099
 8009018:	08009099 	.word	0x08009099
 800901c:	08009099 	.word	0x08009099
 8009020:	08009099 	.word	0x08009099
 8009024:	08009081 	.word	0x08009081
 8009028:	08009099 	.word	0x08009099
 800902c:	08009099 	.word	0x08009099
 8009030:	08009099 	.word	0x08009099
 8009034:	08009099 	.word	0x08009099
 8009038:	08009099 	.word	0x08009099
 800903c:	08009099 	.word	0x08009099
 8009040:	08009099 	.word	0x08009099
 8009044:	08009089 	.word	0x08009089
 8009048:	08009099 	.word	0x08009099
 800904c:	08009099 	.word	0x08009099
 8009050:	08009099 	.word	0x08009099
 8009054:	08009099 	.word	0x08009099
 8009058:	08009099 	.word	0x08009099
 800905c:	08009099 	.word	0x08009099
 8009060:	08009099 	.word	0x08009099
 8009064:	08009091 	.word	0x08009091
 8009068:	2301      	movs	r3, #1
 800906a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800906e:	e0bc      	b.n	80091ea <UART_SetConfig+0x5a6>
 8009070:	2304      	movs	r3, #4
 8009072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009076:	e0b8      	b.n	80091ea <UART_SetConfig+0x5a6>
 8009078:	2308      	movs	r3, #8
 800907a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800907e:	e0b4      	b.n	80091ea <UART_SetConfig+0x5a6>
 8009080:	2310      	movs	r3, #16
 8009082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009086:	e0b0      	b.n	80091ea <UART_SetConfig+0x5a6>
 8009088:	2320      	movs	r3, #32
 800908a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800908e:	e0ac      	b.n	80091ea <UART_SetConfig+0x5a6>
 8009090:	2340      	movs	r3, #64	; 0x40
 8009092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009096:	e0a8      	b.n	80091ea <UART_SetConfig+0x5a6>
 8009098:	2380      	movs	r3, #128	; 0x80
 800909a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800909e:	e0a4      	b.n	80091ea <UART_SetConfig+0x5a6>
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a8f      	ldr	r2, [pc, #572]	; (80092e4 <UART_SetConfig+0x6a0>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d130      	bne.n	800910c <UART_SetConfig+0x4c8>
 80090aa:	4b8d      	ldr	r3, [pc, #564]	; (80092e0 <UART_SetConfig+0x69c>)
 80090ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ae:	f003 0307 	and.w	r3, r3, #7
 80090b2:	2b05      	cmp	r3, #5
 80090b4:	d826      	bhi.n	8009104 <UART_SetConfig+0x4c0>
 80090b6:	a201      	add	r2, pc, #4	; (adr r2, 80090bc <UART_SetConfig+0x478>)
 80090b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090bc:	080090d5 	.word	0x080090d5
 80090c0:	080090dd 	.word	0x080090dd
 80090c4:	080090e5 	.word	0x080090e5
 80090c8:	080090ed 	.word	0x080090ed
 80090cc:	080090f5 	.word	0x080090f5
 80090d0:	080090fd 	.word	0x080090fd
 80090d4:	2300      	movs	r3, #0
 80090d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090da:	e086      	b.n	80091ea <UART_SetConfig+0x5a6>
 80090dc:	2304      	movs	r3, #4
 80090de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090e2:	e082      	b.n	80091ea <UART_SetConfig+0x5a6>
 80090e4:	2308      	movs	r3, #8
 80090e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ea:	e07e      	b.n	80091ea <UART_SetConfig+0x5a6>
 80090ec:	2310      	movs	r3, #16
 80090ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090f2:	e07a      	b.n	80091ea <UART_SetConfig+0x5a6>
 80090f4:	2320      	movs	r3, #32
 80090f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090fa:	e076      	b.n	80091ea <UART_SetConfig+0x5a6>
 80090fc:	2340      	movs	r3, #64	; 0x40
 80090fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009102:	e072      	b.n	80091ea <UART_SetConfig+0x5a6>
 8009104:	2380      	movs	r3, #128	; 0x80
 8009106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800910a:	e06e      	b.n	80091ea <UART_SetConfig+0x5a6>
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a75      	ldr	r2, [pc, #468]	; (80092e8 <UART_SetConfig+0x6a4>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d130      	bne.n	8009178 <UART_SetConfig+0x534>
 8009116:	4b72      	ldr	r3, [pc, #456]	; (80092e0 <UART_SetConfig+0x69c>)
 8009118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800911a:	f003 0307 	and.w	r3, r3, #7
 800911e:	2b05      	cmp	r3, #5
 8009120:	d826      	bhi.n	8009170 <UART_SetConfig+0x52c>
 8009122:	a201      	add	r2, pc, #4	; (adr r2, 8009128 <UART_SetConfig+0x4e4>)
 8009124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009128:	08009141 	.word	0x08009141
 800912c:	08009149 	.word	0x08009149
 8009130:	08009151 	.word	0x08009151
 8009134:	08009159 	.word	0x08009159
 8009138:	08009161 	.word	0x08009161
 800913c:	08009169 	.word	0x08009169
 8009140:	2300      	movs	r3, #0
 8009142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009146:	e050      	b.n	80091ea <UART_SetConfig+0x5a6>
 8009148:	2304      	movs	r3, #4
 800914a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800914e:	e04c      	b.n	80091ea <UART_SetConfig+0x5a6>
 8009150:	2308      	movs	r3, #8
 8009152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009156:	e048      	b.n	80091ea <UART_SetConfig+0x5a6>
 8009158:	2310      	movs	r3, #16
 800915a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800915e:	e044      	b.n	80091ea <UART_SetConfig+0x5a6>
 8009160:	2320      	movs	r3, #32
 8009162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009166:	e040      	b.n	80091ea <UART_SetConfig+0x5a6>
 8009168:	2340      	movs	r3, #64	; 0x40
 800916a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800916e:	e03c      	b.n	80091ea <UART_SetConfig+0x5a6>
 8009170:	2380      	movs	r3, #128	; 0x80
 8009172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009176:	e038      	b.n	80091ea <UART_SetConfig+0x5a6>
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a5b      	ldr	r2, [pc, #364]	; (80092ec <UART_SetConfig+0x6a8>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d130      	bne.n	80091e4 <UART_SetConfig+0x5a0>
 8009182:	4b57      	ldr	r3, [pc, #348]	; (80092e0 <UART_SetConfig+0x69c>)
 8009184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009186:	f003 0307 	and.w	r3, r3, #7
 800918a:	2b05      	cmp	r3, #5
 800918c:	d826      	bhi.n	80091dc <UART_SetConfig+0x598>
 800918e:	a201      	add	r2, pc, #4	; (adr r2, 8009194 <UART_SetConfig+0x550>)
 8009190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009194:	080091ad 	.word	0x080091ad
 8009198:	080091b5 	.word	0x080091b5
 800919c:	080091bd 	.word	0x080091bd
 80091a0:	080091c5 	.word	0x080091c5
 80091a4:	080091cd 	.word	0x080091cd
 80091a8:	080091d5 	.word	0x080091d5
 80091ac:	2302      	movs	r3, #2
 80091ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091b2:	e01a      	b.n	80091ea <UART_SetConfig+0x5a6>
 80091b4:	2304      	movs	r3, #4
 80091b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ba:	e016      	b.n	80091ea <UART_SetConfig+0x5a6>
 80091bc:	2308      	movs	r3, #8
 80091be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091c2:	e012      	b.n	80091ea <UART_SetConfig+0x5a6>
 80091c4:	2310      	movs	r3, #16
 80091c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ca:	e00e      	b.n	80091ea <UART_SetConfig+0x5a6>
 80091cc:	2320      	movs	r3, #32
 80091ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091d2:	e00a      	b.n	80091ea <UART_SetConfig+0x5a6>
 80091d4:	2340      	movs	r3, #64	; 0x40
 80091d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091da:	e006      	b.n	80091ea <UART_SetConfig+0x5a6>
 80091dc:	2380      	movs	r3, #128	; 0x80
 80091de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091e2:	e002      	b.n	80091ea <UART_SetConfig+0x5a6>
 80091e4:	2380      	movs	r3, #128	; 0x80
 80091e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a3f      	ldr	r2, [pc, #252]	; (80092ec <UART_SetConfig+0x6a8>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	f040 80f8 	bne.w	80093e6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80091f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80091fa:	2b20      	cmp	r3, #32
 80091fc:	dc46      	bgt.n	800928c <UART_SetConfig+0x648>
 80091fe:	2b02      	cmp	r3, #2
 8009200:	f2c0 8082 	blt.w	8009308 <UART_SetConfig+0x6c4>
 8009204:	3b02      	subs	r3, #2
 8009206:	2b1e      	cmp	r3, #30
 8009208:	d87e      	bhi.n	8009308 <UART_SetConfig+0x6c4>
 800920a:	a201      	add	r2, pc, #4	; (adr r2, 8009210 <UART_SetConfig+0x5cc>)
 800920c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009210:	08009293 	.word	0x08009293
 8009214:	08009309 	.word	0x08009309
 8009218:	0800929b 	.word	0x0800929b
 800921c:	08009309 	.word	0x08009309
 8009220:	08009309 	.word	0x08009309
 8009224:	08009309 	.word	0x08009309
 8009228:	080092ab 	.word	0x080092ab
 800922c:	08009309 	.word	0x08009309
 8009230:	08009309 	.word	0x08009309
 8009234:	08009309 	.word	0x08009309
 8009238:	08009309 	.word	0x08009309
 800923c:	08009309 	.word	0x08009309
 8009240:	08009309 	.word	0x08009309
 8009244:	08009309 	.word	0x08009309
 8009248:	080092bb 	.word	0x080092bb
 800924c:	08009309 	.word	0x08009309
 8009250:	08009309 	.word	0x08009309
 8009254:	08009309 	.word	0x08009309
 8009258:	08009309 	.word	0x08009309
 800925c:	08009309 	.word	0x08009309
 8009260:	08009309 	.word	0x08009309
 8009264:	08009309 	.word	0x08009309
 8009268:	08009309 	.word	0x08009309
 800926c:	08009309 	.word	0x08009309
 8009270:	08009309 	.word	0x08009309
 8009274:	08009309 	.word	0x08009309
 8009278:	08009309 	.word	0x08009309
 800927c:	08009309 	.word	0x08009309
 8009280:	08009309 	.word	0x08009309
 8009284:	08009309 	.word	0x08009309
 8009288:	080092fb 	.word	0x080092fb
 800928c:	2b40      	cmp	r3, #64	; 0x40
 800928e:	d037      	beq.n	8009300 <UART_SetConfig+0x6bc>
 8009290:	e03a      	b.n	8009308 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009292:	f7fd f93b 	bl	800650c <HAL_RCCEx_GetD3PCLK1Freq>
 8009296:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009298:	e03c      	b.n	8009314 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800929a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fd f94a 	bl	8006538 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80092a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092a8:	e034      	b.n	8009314 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092aa:	f107 0318 	add.w	r3, r7, #24
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7fd fa96 	bl	80067e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092b8:	e02c      	b.n	8009314 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092ba:	4b09      	ldr	r3, [pc, #36]	; (80092e0 <UART_SetConfig+0x69c>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 0320 	and.w	r3, r3, #32
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d016      	beq.n	80092f4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092c6:	4b06      	ldr	r3, [pc, #24]	; (80092e0 <UART_SetConfig+0x69c>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	08db      	lsrs	r3, r3, #3
 80092cc:	f003 0303 	and.w	r3, r3, #3
 80092d0:	4a07      	ldr	r2, [pc, #28]	; (80092f0 <UART_SetConfig+0x6ac>)
 80092d2:	fa22 f303 	lsr.w	r3, r2, r3
 80092d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092d8:	e01c      	b.n	8009314 <UART_SetConfig+0x6d0>
 80092da:	bf00      	nop
 80092dc:	40011400 	.word	0x40011400
 80092e0:	58024400 	.word	0x58024400
 80092e4:	40007800 	.word	0x40007800
 80092e8:	40007c00 	.word	0x40007c00
 80092ec:	58000c00 	.word	0x58000c00
 80092f0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80092f4:	4b9d      	ldr	r3, [pc, #628]	; (800956c <UART_SetConfig+0x928>)
 80092f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092f8:	e00c      	b.n	8009314 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092fa:	4b9d      	ldr	r3, [pc, #628]	; (8009570 <UART_SetConfig+0x92c>)
 80092fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092fe:	e009      	b.n	8009314 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009306:	e005      	b.n	8009314 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009308:	2300      	movs	r3, #0
 800930a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009312:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 81de 	beq.w	80096d8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009320:	4a94      	ldr	r2, [pc, #592]	; (8009574 <UART_SetConfig+0x930>)
 8009322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009326:	461a      	mov	r2, r3
 8009328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800932a:	fbb3 f3f2 	udiv	r3, r3, r2
 800932e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	685a      	ldr	r2, [r3, #4]
 8009334:	4613      	mov	r3, r2
 8009336:	005b      	lsls	r3, r3, #1
 8009338:	4413      	add	r3, r2
 800933a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800933c:	429a      	cmp	r2, r3
 800933e:	d305      	bcc.n	800934c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009348:	429a      	cmp	r2, r3
 800934a:	d903      	bls.n	8009354 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009352:	e1c1      	b.n	80096d8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009356:	2200      	movs	r2, #0
 8009358:	60bb      	str	r3, [r7, #8]
 800935a:	60fa      	str	r2, [r7, #12]
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009360:	4a84      	ldr	r2, [pc, #528]	; (8009574 <UART_SetConfig+0x930>)
 8009362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009366:	b29b      	uxth	r3, r3
 8009368:	2200      	movs	r2, #0
 800936a:	603b      	str	r3, [r7, #0]
 800936c:	607a      	str	r2, [r7, #4]
 800936e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009372:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009376:	f7f7 f80b 	bl	8000390 <__aeabi_uldivmod>
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	4610      	mov	r0, r2
 8009380:	4619      	mov	r1, r3
 8009382:	f04f 0200 	mov.w	r2, #0
 8009386:	f04f 0300 	mov.w	r3, #0
 800938a:	020b      	lsls	r3, r1, #8
 800938c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009390:	0202      	lsls	r2, r0, #8
 8009392:	6979      	ldr	r1, [r7, #20]
 8009394:	6849      	ldr	r1, [r1, #4]
 8009396:	0849      	lsrs	r1, r1, #1
 8009398:	2000      	movs	r0, #0
 800939a:	460c      	mov	r4, r1
 800939c:	4605      	mov	r5, r0
 800939e:	eb12 0804 	adds.w	r8, r2, r4
 80093a2:	eb43 0905 	adc.w	r9, r3, r5
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	469a      	mov	sl, r3
 80093ae:	4693      	mov	fp, r2
 80093b0:	4652      	mov	r2, sl
 80093b2:	465b      	mov	r3, fp
 80093b4:	4640      	mov	r0, r8
 80093b6:	4649      	mov	r1, r9
 80093b8:	f7f6 ffea 	bl	8000390 <__aeabi_uldivmod>
 80093bc:	4602      	mov	r2, r0
 80093be:	460b      	mov	r3, r1
 80093c0:	4613      	mov	r3, r2
 80093c2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80093c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093ca:	d308      	bcc.n	80093de <UART_SetConfig+0x79a>
 80093cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093d2:	d204      	bcs.n	80093de <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093da:	60da      	str	r2, [r3, #12]
 80093dc:	e17c      	b.n	80096d8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80093e4:	e178      	b.n	80096d8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093ee:	f040 80c5 	bne.w	800957c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80093f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80093f6:	2b20      	cmp	r3, #32
 80093f8:	dc48      	bgt.n	800948c <UART_SetConfig+0x848>
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	db7b      	blt.n	80094f6 <UART_SetConfig+0x8b2>
 80093fe:	2b20      	cmp	r3, #32
 8009400:	d879      	bhi.n	80094f6 <UART_SetConfig+0x8b2>
 8009402:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <UART_SetConfig+0x7c4>)
 8009404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009408:	08009493 	.word	0x08009493
 800940c:	0800949b 	.word	0x0800949b
 8009410:	080094f7 	.word	0x080094f7
 8009414:	080094f7 	.word	0x080094f7
 8009418:	080094a3 	.word	0x080094a3
 800941c:	080094f7 	.word	0x080094f7
 8009420:	080094f7 	.word	0x080094f7
 8009424:	080094f7 	.word	0x080094f7
 8009428:	080094b3 	.word	0x080094b3
 800942c:	080094f7 	.word	0x080094f7
 8009430:	080094f7 	.word	0x080094f7
 8009434:	080094f7 	.word	0x080094f7
 8009438:	080094f7 	.word	0x080094f7
 800943c:	080094f7 	.word	0x080094f7
 8009440:	080094f7 	.word	0x080094f7
 8009444:	080094f7 	.word	0x080094f7
 8009448:	080094c3 	.word	0x080094c3
 800944c:	080094f7 	.word	0x080094f7
 8009450:	080094f7 	.word	0x080094f7
 8009454:	080094f7 	.word	0x080094f7
 8009458:	080094f7 	.word	0x080094f7
 800945c:	080094f7 	.word	0x080094f7
 8009460:	080094f7 	.word	0x080094f7
 8009464:	080094f7 	.word	0x080094f7
 8009468:	080094f7 	.word	0x080094f7
 800946c:	080094f7 	.word	0x080094f7
 8009470:	080094f7 	.word	0x080094f7
 8009474:	080094f7 	.word	0x080094f7
 8009478:	080094f7 	.word	0x080094f7
 800947c:	080094f7 	.word	0x080094f7
 8009480:	080094f7 	.word	0x080094f7
 8009484:	080094f7 	.word	0x080094f7
 8009488:	080094e9 	.word	0x080094e9
 800948c:	2b40      	cmp	r3, #64	; 0x40
 800948e:	d02e      	beq.n	80094ee <UART_SetConfig+0x8aa>
 8009490:	e031      	b.n	80094f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009492:	f7fc f8c9 	bl	8005628 <HAL_RCC_GetPCLK1Freq>
 8009496:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009498:	e033      	b.n	8009502 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800949a:	f7fc f8db 	bl	8005654 <HAL_RCC_GetPCLK2Freq>
 800949e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80094a0:	e02f      	b.n	8009502 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fd f846 	bl	8006538 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80094ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094b0:	e027      	b.n	8009502 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094b2:	f107 0318 	add.w	r3, r7, #24
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fd f992 	bl	80067e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094c0:	e01f      	b.n	8009502 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094c2:	4b2d      	ldr	r3, [pc, #180]	; (8009578 <UART_SetConfig+0x934>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 0320 	and.w	r3, r3, #32
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d009      	beq.n	80094e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80094ce:	4b2a      	ldr	r3, [pc, #168]	; (8009578 <UART_SetConfig+0x934>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	08db      	lsrs	r3, r3, #3
 80094d4:	f003 0303 	and.w	r3, r3, #3
 80094d8:	4a24      	ldr	r2, [pc, #144]	; (800956c <UART_SetConfig+0x928>)
 80094da:	fa22 f303 	lsr.w	r3, r2, r3
 80094de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094e0:	e00f      	b.n	8009502 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80094e2:	4b22      	ldr	r3, [pc, #136]	; (800956c <UART_SetConfig+0x928>)
 80094e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094e6:	e00c      	b.n	8009502 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80094e8:	4b21      	ldr	r3, [pc, #132]	; (8009570 <UART_SetConfig+0x92c>)
 80094ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094ec:	e009      	b.n	8009502 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094f4:	e005      	b.n	8009502 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80094f6:	2300      	movs	r3, #0
 80094f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009500:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009504:	2b00      	cmp	r3, #0
 8009506:	f000 80e7 	beq.w	80096d8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950e:	4a19      	ldr	r2, [pc, #100]	; (8009574 <UART_SetConfig+0x930>)
 8009510:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009514:	461a      	mov	r2, r3
 8009516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009518:	fbb3 f3f2 	udiv	r3, r3, r2
 800951c:	005a      	lsls	r2, r3, #1
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	085b      	lsrs	r3, r3, #1
 8009524:	441a      	add	r2, r3
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	fbb2 f3f3 	udiv	r3, r2, r3
 800952e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009532:	2b0f      	cmp	r3, #15
 8009534:	d916      	bls.n	8009564 <UART_SetConfig+0x920>
 8009536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800953c:	d212      	bcs.n	8009564 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800953e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009540:	b29b      	uxth	r3, r3
 8009542:	f023 030f 	bic.w	r3, r3, #15
 8009546:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954a:	085b      	lsrs	r3, r3, #1
 800954c:	b29b      	uxth	r3, r3
 800954e:	f003 0307 	and.w	r3, r3, #7
 8009552:	b29a      	uxth	r2, r3
 8009554:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009556:	4313      	orrs	r3, r2
 8009558:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009560:	60da      	str	r2, [r3, #12]
 8009562:	e0b9      	b.n	80096d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800956a:	e0b5      	b.n	80096d8 <UART_SetConfig+0xa94>
 800956c:	03d09000 	.word	0x03d09000
 8009570:	003d0900 	.word	0x003d0900
 8009574:	0800fec8 	.word	0x0800fec8
 8009578:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800957c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009580:	2b20      	cmp	r3, #32
 8009582:	dc49      	bgt.n	8009618 <UART_SetConfig+0x9d4>
 8009584:	2b00      	cmp	r3, #0
 8009586:	db7c      	blt.n	8009682 <UART_SetConfig+0xa3e>
 8009588:	2b20      	cmp	r3, #32
 800958a:	d87a      	bhi.n	8009682 <UART_SetConfig+0xa3e>
 800958c:	a201      	add	r2, pc, #4	; (adr r2, 8009594 <UART_SetConfig+0x950>)
 800958e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009592:	bf00      	nop
 8009594:	0800961f 	.word	0x0800961f
 8009598:	08009627 	.word	0x08009627
 800959c:	08009683 	.word	0x08009683
 80095a0:	08009683 	.word	0x08009683
 80095a4:	0800962f 	.word	0x0800962f
 80095a8:	08009683 	.word	0x08009683
 80095ac:	08009683 	.word	0x08009683
 80095b0:	08009683 	.word	0x08009683
 80095b4:	0800963f 	.word	0x0800963f
 80095b8:	08009683 	.word	0x08009683
 80095bc:	08009683 	.word	0x08009683
 80095c0:	08009683 	.word	0x08009683
 80095c4:	08009683 	.word	0x08009683
 80095c8:	08009683 	.word	0x08009683
 80095cc:	08009683 	.word	0x08009683
 80095d0:	08009683 	.word	0x08009683
 80095d4:	0800964f 	.word	0x0800964f
 80095d8:	08009683 	.word	0x08009683
 80095dc:	08009683 	.word	0x08009683
 80095e0:	08009683 	.word	0x08009683
 80095e4:	08009683 	.word	0x08009683
 80095e8:	08009683 	.word	0x08009683
 80095ec:	08009683 	.word	0x08009683
 80095f0:	08009683 	.word	0x08009683
 80095f4:	08009683 	.word	0x08009683
 80095f8:	08009683 	.word	0x08009683
 80095fc:	08009683 	.word	0x08009683
 8009600:	08009683 	.word	0x08009683
 8009604:	08009683 	.word	0x08009683
 8009608:	08009683 	.word	0x08009683
 800960c:	08009683 	.word	0x08009683
 8009610:	08009683 	.word	0x08009683
 8009614:	08009675 	.word	0x08009675
 8009618:	2b40      	cmp	r3, #64	; 0x40
 800961a:	d02e      	beq.n	800967a <UART_SetConfig+0xa36>
 800961c:	e031      	b.n	8009682 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800961e:	f7fc f803 	bl	8005628 <HAL_RCC_GetPCLK1Freq>
 8009622:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009624:	e033      	b.n	800968e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009626:	f7fc f815 	bl	8005654 <HAL_RCC_GetPCLK2Freq>
 800962a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800962c:	e02f      	b.n	800968e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800962e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009632:	4618      	mov	r0, r3
 8009634:	f7fc ff80 	bl	8006538 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800963c:	e027      	b.n	800968e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800963e:	f107 0318 	add.w	r3, r7, #24
 8009642:	4618      	mov	r0, r3
 8009644:	f7fd f8cc 	bl	80067e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800964c:	e01f      	b.n	800968e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800964e:	4b2d      	ldr	r3, [pc, #180]	; (8009704 <UART_SetConfig+0xac0>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 0320 	and.w	r3, r3, #32
 8009656:	2b00      	cmp	r3, #0
 8009658:	d009      	beq.n	800966e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800965a:	4b2a      	ldr	r3, [pc, #168]	; (8009704 <UART_SetConfig+0xac0>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	08db      	lsrs	r3, r3, #3
 8009660:	f003 0303 	and.w	r3, r3, #3
 8009664:	4a28      	ldr	r2, [pc, #160]	; (8009708 <UART_SetConfig+0xac4>)
 8009666:	fa22 f303 	lsr.w	r3, r2, r3
 800966a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800966c:	e00f      	b.n	800968e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800966e:	4b26      	ldr	r3, [pc, #152]	; (8009708 <UART_SetConfig+0xac4>)
 8009670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009672:	e00c      	b.n	800968e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009674:	4b25      	ldr	r3, [pc, #148]	; (800970c <UART_SetConfig+0xac8>)
 8009676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009678:	e009      	b.n	800968e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800967a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800967e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009680:	e005      	b.n	800968e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009682:	2300      	movs	r3, #0
 8009684:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800968c:	bf00      	nop
    }

    if (pclk != 0U)
 800968e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009690:	2b00      	cmp	r3, #0
 8009692:	d021      	beq.n	80096d8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009698:	4a1d      	ldr	r2, [pc, #116]	; (8009710 <UART_SetConfig+0xacc>)
 800969a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800969e:	461a      	mov	r2, r3
 80096a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	085b      	lsrs	r3, r3, #1
 80096ac:	441a      	add	r2, r3
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ba:	2b0f      	cmp	r3, #15
 80096bc:	d909      	bls.n	80096d2 <UART_SetConfig+0xa8e>
 80096be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096c4:	d205      	bcs.n	80096d2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	60da      	str	r2, [r3, #12]
 80096d0:	e002      	b.n	80096d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	2201      	movs	r2, #1
 80096dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	2200      	movs	r2, #0
 80096ec:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	2200      	movs	r2, #0
 80096f2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80096f4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3748      	adds	r7, #72	; 0x48
 80096fc:	46bd      	mov	sp, r7
 80096fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009702:	bf00      	nop
 8009704:	58024400 	.word	0x58024400
 8009708:	03d09000 	.word	0x03d09000
 800970c:	003d0900 	.word	0x003d0900
 8009710:	0800fec8 	.word	0x0800fec8

08009714 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00a      	beq.n	800973e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	430a      	orrs	r2, r1
 800973c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009742:	f003 0302 	and.w	r3, r3, #2
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00a      	beq.n	8009760 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	430a      	orrs	r2, r1
 800975e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009764:	f003 0304 	and.w	r3, r3, #4
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00a      	beq.n	8009782 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	430a      	orrs	r2, r1
 8009780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009786:	f003 0308 	and.w	r3, r3, #8
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00a      	beq.n	80097a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	430a      	orrs	r2, r1
 80097a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a8:	f003 0310 	and.w	r3, r3, #16
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00a      	beq.n	80097c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	430a      	orrs	r2, r1
 80097c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ca:	f003 0320 	and.w	r3, r3, #32
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00a      	beq.n	80097e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	430a      	orrs	r2, r1
 80097e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d01a      	beq.n	800982a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	430a      	orrs	r2, r1
 8009808:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800980e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009812:	d10a      	bne.n	800982a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00a      	beq.n	800984c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	430a      	orrs	r2, r1
 800984a:	605a      	str	r2, [r3, #4]
  }
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af02      	add	r7, sp, #8
 800985e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009868:	f7f9 fc82 	bl	8003170 <HAL_GetTick>
 800986c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0308 	and.w	r3, r3, #8
 8009878:	2b08      	cmp	r3, #8
 800987a:	d10e      	bne.n	800989a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800987c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f82f 	bl	80098ee <UART_WaitOnFlagUntilTimeout>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e025      	b.n	80098e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 0304 	and.w	r3, r3, #4
 80098a4:	2b04      	cmp	r3, #4
 80098a6:	d10e      	bne.n	80098c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f819 	bl	80098ee <UART_WaitOnFlagUntilTimeout>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098c2:	2303      	movs	r3, #3
 80098c4:	e00f      	b.n	80098e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2220      	movs	r2, #32
 80098ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2220      	movs	r2, #32
 80098d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b09c      	sub	sp, #112	; 0x70
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	603b      	str	r3, [r7, #0]
 80098fa:	4613      	mov	r3, r2
 80098fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098fe:	e0a9      	b.n	8009a54 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009906:	f000 80a5 	beq.w	8009a54 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800990a:	f7f9 fc31 	bl	8003170 <HAL_GetTick>
 800990e:	4602      	mov	r2, r0
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009916:	429a      	cmp	r2, r3
 8009918:	d302      	bcc.n	8009920 <UART_WaitOnFlagUntilTimeout+0x32>
 800991a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800991c:	2b00      	cmp	r3, #0
 800991e:	d140      	bne.n	80099a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009928:	e853 3f00 	ldrex	r3, [r3]
 800992c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800992e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009930:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009934:	667b      	str	r3, [r7, #100]	; 0x64
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	461a      	mov	r2, r3
 800993c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800993e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009940:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009942:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009944:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009946:	e841 2300 	strex	r3, r2, [r1]
 800994a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800994c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1e6      	bne.n	8009920 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	3308      	adds	r3, #8
 8009958:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800995c:	e853 3f00 	ldrex	r3, [r3]
 8009960:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009964:	f023 0301 	bic.w	r3, r3, #1
 8009968:	663b      	str	r3, [r7, #96]	; 0x60
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	3308      	adds	r3, #8
 8009970:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009972:	64ba      	str	r2, [r7, #72]	; 0x48
 8009974:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009976:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800997a:	e841 2300 	strex	r3, r2, [r1]
 800997e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1e5      	bne.n	8009952 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2220      	movs	r2, #32
 800998a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2220      	movs	r2, #32
 8009992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800999e:	2303      	movs	r3, #3
 80099a0:	e069      	b.n	8009a76 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 0304 	and.w	r3, r3, #4
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d051      	beq.n	8009a54 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099be:	d149      	bne.n	8009a54 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d2:	e853 3f00 	ldrex	r3, [r3]
 80099d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80099de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	461a      	mov	r2, r3
 80099e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099e8:	637b      	str	r3, [r7, #52]	; 0x34
 80099ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099f0:	e841 2300 	strex	r3, r2, [r1]
 80099f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80099f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1e6      	bne.n	80099ca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3308      	adds	r3, #8
 8009a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	e853 3f00 	ldrex	r3, [r3]
 8009a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	f023 0301 	bic.w	r3, r3, #1
 8009a12:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	3308      	adds	r3, #8
 8009a1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a1c:	623a      	str	r2, [r7, #32]
 8009a1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a20:	69f9      	ldr	r1, [r7, #28]
 8009a22:	6a3a      	ldr	r2, [r7, #32]
 8009a24:	e841 2300 	strex	r3, r2, [r1]
 8009a28:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d1e5      	bne.n	80099fc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2220      	movs	r2, #32
 8009a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2220      	movs	r2, #32
 8009a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2220      	movs	r2, #32
 8009a44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009a50:	2303      	movs	r3, #3
 8009a52:	e010      	b.n	8009a76 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	69da      	ldr	r2, [r3, #28]
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	bf0c      	ite	eq
 8009a64:	2301      	moveq	r3, #1
 8009a66:	2300      	movne	r3, #0
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	79fb      	ldrb	r3, [r7, #7]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	f43f af46 	beq.w	8009900 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3770      	adds	r7, #112	; 0x70
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b085      	sub	sp, #20
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d101      	bne.n	8009a94 <HAL_UARTEx_DisableFifoMode+0x16>
 8009a90:	2302      	movs	r3, #2
 8009a92:	e027      	b.n	8009ae4 <HAL_UARTEx_DisableFifoMode+0x66>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2224      	movs	r2, #36	; 0x24
 8009aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f022 0201 	bic.w	r2, r2, #1
 8009aba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009ac2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2220      	movs	r2, #32
 8009ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d101      	bne.n	8009b08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b04:	2302      	movs	r3, #2
 8009b06:	e02d      	b.n	8009b64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2224      	movs	r2, #36	; 0x24
 8009b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f022 0201 	bic.w	r2, r2, #1
 8009b2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	430a      	orrs	r2, r1
 8009b42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 f84f 	bl	8009be8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2220      	movs	r2, #32
 8009b56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d101      	bne.n	8009b84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b80:	2302      	movs	r3, #2
 8009b82:	e02d      	b.n	8009be0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2224      	movs	r2, #36	; 0x24
 8009b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f022 0201 	bic.w	r2, r2, #1
 8009baa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	683a      	ldr	r2, [r7, #0]
 8009bbc:	430a      	orrs	r2, r1
 8009bbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f811 	bl	8009be8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2220      	movs	r2, #32
 8009bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d108      	bne.n	8009c0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c08:	e031      	b.n	8009c6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c0a:	2310      	movs	r3, #16
 8009c0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c0e:	2310      	movs	r3, #16
 8009c10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	0e5b      	lsrs	r3, r3, #25
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	f003 0307 	and.w	r3, r3, #7
 8009c20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	0f5b      	lsrs	r3, r3, #29
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	f003 0307 	and.w	r3, r3, #7
 8009c30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c32:	7bbb      	ldrb	r3, [r7, #14]
 8009c34:	7b3a      	ldrb	r2, [r7, #12]
 8009c36:	4911      	ldr	r1, [pc, #68]	; (8009c7c <UARTEx_SetNbDataToProcess+0x94>)
 8009c38:	5c8a      	ldrb	r2, [r1, r2]
 8009c3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c3e:	7b3a      	ldrb	r2, [r7, #12]
 8009c40:	490f      	ldr	r1, [pc, #60]	; (8009c80 <UARTEx_SetNbDataToProcess+0x98>)
 8009c42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c44:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
 8009c52:	7b7a      	ldrb	r2, [r7, #13]
 8009c54:	4909      	ldr	r1, [pc, #36]	; (8009c7c <UARTEx_SetNbDataToProcess+0x94>)
 8009c56:	5c8a      	ldrb	r2, [r1, r2]
 8009c58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c5c:	7b7a      	ldrb	r2, [r7, #13]
 8009c5e:	4908      	ldr	r1, [pc, #32]	; (8009c80 <UARTEx_SetNbDataToProcess+0x98>)
 8009c60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c62:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009c6e:	bf00      	nop
 8009c70:	3714      	adds	r7, #20
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	0800fee0 	.word	0x0800fee0
 8009c80:	0800fee8 	.word	0x0800fee8

08009c84 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c96:	2b84      	cmp	r3, #132	; 0x84
 8009c98:	d005      	beq.n	8009ca6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009c9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	3303      	adds	r3, #3
 8009ca4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cba:	f3ef 8305 	mrs	r3, IPSR
 8009cbe:	607b      	str	r3, [r7, #4]
  return(result);
 8009cc0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	bf14      	ite	ne
 8009cc6:	2301      	movne	r3, #1
 8009cc8:	2300      	moveq	r3, #0
 8009cca:	b2db      	uxtb	r3, r3
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009cdc:	f001 ffd4 	bl	800bc88 <vTaskStartScheduler>
  
  return osOK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009ce6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ce8:	b089      	sub	sp, #36	; 0x24
 8009cea:	af04      	add	r7, sp, #16
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	695b      	ldr	r3, [r3, #20]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d020      	beq.n	8009d3a <osThreadCreate+0x54>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	699b      	ldr	r3, [r3, #24]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d01c      	beq.n	8009d3a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685c      	ldr	r4, [r3, #4]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681d      	ldr	r5, [r3, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	691e      	ldr	r6, [r3, #16]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7ff ffb6 	bl	8009c84 <makeFreeRtosPriority>
 8009d18:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	695b      	ldr	r3, [r3, #20]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d22:	9202      	str	r2, [sp, #8]
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	9100      	str	r1, [sp, #0]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	4632      	mov	r2, r6
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f001 fde2 	bl	800b8f8 <xTaskCreateStatic>
 8009d34:	4603      	mov	r3, r0
 8009d36:	60fb      	str	r3, [r7, #12]
 8009d38:	e01c      	b.n	8009d74 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	685c      	ldr	r4, [r3, #4]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d46:	b29e      	uxth	r6, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7ff ff98 	bl	8009c84 <makeFreeRtosPriority>
 8009d54:	4602      	mov	r2, r0
 8009d56:	f107 030c 	add.w	r3, r7, #12
 8009d5a:	9301      	str	r3, [sp, #4]
 8009d5c:	9200      	str	r2, [sp, #0]
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	4632      	mov	r2, r6
 8009d62:	4629      	mov	r1, r5
 8009d64:	4620      	mov	r0, r4
 8009d66:	f001 fe24 	bl	800b9b2 <xTaskCreate>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d001      	beq.n	8009d74 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009d70:	2300      	movs	r3, #0
 8009d72:	e000      	b.n	8009d76 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009d74:	68fb      	ldr	r3, [r7, #12]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3714      	adds	r7, #20
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d7e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b084      	sub	sp, #16
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d001      	beq.n	8009d94 <osDelay+0x16>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	e000      	b.n	8009d96 <osDelay+0x18>
 8009d94:	2301      	movs	r3, #1
 8009d96:	4618      	mov	r0, r3
 8009d98:	f001 ff42 	bl	800bc20 <vTaskDelay>
  
  return osOK;
 8009d9c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b082      	sub	sp, #8
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d007      	beq.n	8009dc6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	4619      	mov	r1, r3
 8009dbc:	2001      	movs	r0, #1
 8009dbe:	f000 ffc6 	bl	800ad4e <xQueueCreateMutexStatic>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	e003      	b.n	8009dce <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009dc6:	2001      	movs	r0, #1
 8009dc8:	f000 ffa9 	bl	800ad1e <xQueueCreateMutex>
 8009dcc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3708      	adds	r7, #8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
	...

08009dd8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009de2:	2300      	movs	r3, #0
 8009de4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d101      	bne.n	8009df0 <osMutexWait+0x18>
    return osErrorParameter;
 8009dec:	2380      	movs	r3, #128	; 0x80
 8009dee:	e03a      	b.n	8009e66 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dfa:	d103      	bne.n	8009e04 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8009e00:	60fb      	str	r3, [r7, #12]
 8009e02:	e009      	b.n	8009e18 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d006      	beq.n	8009e18 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <osMutexWait+0x40>
      ticks = 1;
 8009e14:	2301      	movs	r3, #1
 8009e16:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009e18:	f7ff ff4c 	bl	8009cb4 <inHandlerMode>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d017      	beq.n	8009e52 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009e22:	f107 0308 	add.w	r3, r7, #8
 8009e26:	461a      	mov	r2, r3
 8009e28:	2100      	movs	r1, #0
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f001 fbbc 	bl	800b5a8 <xQueueReceiveFromISR>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d001      	beq.n	8009e3a <osMutexWait+0x62>
      return osErrorOS;
 8009e36:	23ff      	movs	r3, #255	; 0xff
 8009e38:	e015      	b.n	8009e66 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d011      	beq.n	8009e64 <osMutexWait+0x8c>
 8009e40:	4b0b      	ldr	r3, [pc, #44]	; (8009e70 <osMutexWait+0x98>)
 8009e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e46:	601a      	str	r2, [r3, #0]
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	e008      	b.n	8009e64 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009e52:	68f9      	ldr	r1, [r7, #12]
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f001 fa9b 	bl	800b390 <xQueueSemaphoreTake>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d001      	beq.n	8009e64 <osMutexWait+0x8c>
    return osErrorOS;
 8009e60:	23ff      	movs	r3, #255	; 0xff
 8009e62:	e000      	b.n	8009e66 <osMutexWait+0x8e>
  }
  
  return osOK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	e000ed04 	.word	0xe000ed04

08009e74 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009e80:	2300      	movs	r3, #0
 8009e82:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009e84:	f7ff ff16 	bl	8009cb4 <inHandlerMode>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d016      	beq.n	8009ebc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009e8e:	f107 0308 	add.w	r3, r7, #8
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f001 f90e 	bl	800b0b6 <xQueueGiveFromISR>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d001      	beq.n	8009ea4 <osMutexRelease+0x30>
      return osErrorOS;
 8009ea0:	23ff      	movs	r3, #255	; 0xff
 8009ea2:	e017      	b.n	8009ed4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d013      	beq.n	8009ed2 <osMutexRelease+0x5e>
 8009eaa:	4b0c      	ldr	r3, [pc, #48]	; (8009edc <osMutexRelease+0x68>)
 8009eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eb0:	601a      	str	r2, [r3, #0]
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	e00a      	b.n	8009ed2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 ff5e 	bl	800ad84 <xQueueGenericSend>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d001      	beq.n	8009ed2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009ece:	23ff      	movs	r3, #255	; 0xff
 8009ed0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	e000ed04 	.word	0xe000ed04

08009ee0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009ee0:	b590      	push	{r4, r7, lr}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af02      	add	r7, sp, #8
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d011      	beq.n	8009f16 <osMessageCreate+0x36>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00d      	beq.n	8009f16 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6818      	ldr	r0, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6859      	ldr	r1, [r3, #4]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	689a      	ldr	r2, [r3, #8]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	2400      	movs	r4, #0
 8009f0c:	9400      	str	r4, [sp, #0]
 8009f0e:	f000 fe1b 	bl	800ab48 <xQueueGenericCreateStatic>
 8009f12:	4603      	mov	r3, r0
 8009f14:	e008      	b.n	8009f28 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6818      	ldr	r0, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	4619      	mov	r1, r3
 8009f22:	f000 fe89 	bl	800ac38 <xQueueGenericCreate>
 8009f26:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd90      	pop	{r4, r7, pc}

08009f30 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d101      	bne.n	8009f4e <osMessagePut+0x1e>
    ticks = 1;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009f4e:	f7ff feb1 	bl	8009cb4 <inHandlerMode>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d018      	beq.n	8009f8a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009f58:	f107 0210 	add.w	r2, r7, #16
 8009f5c:	f107 0108 	add.w	r1, r7, #8
 8009f60:	2300      	movs	r3, #0
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f001 f80c 	bl	800af80 <xQueueGenericSendFromISR>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d001      	beq.n	8009f72 <osMessagePut+0x42>
      return osErrorOS;
 8009f6e:	23ff      	movs	r3, #255	; 0xff
 8009f70:	e018      	b.n	8009fa4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d014      	beq.n	8009fa2 <osMessagePut+0x72>
 8009f78:	4b0c      	ldr	r3, [pc, #48]	; (8009fac <osMessagePut+0x7c>)
 8009f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f7e:	601a      	str	r2, [r3, #0]
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	e00b      	b.n	8009fa2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009f8a:	f107 0108 	add.w	r1, r7, #8
 8009f8e:	2300      	movs	r3, #0
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f000 fef6 	bl	800ad84 <xQueueGenericSend>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d001      	beq.n	8009fa2 <osMessagePut+0x72>
      return osErrorOS;
 8009f9e:	23ff      	movs	r3, #255	; 0xff
 8009fa0:	e000      	b.n	8009fa4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3718      	adds	r7, #24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	e000ed04 	.word	0xe000ed04

08009fb0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009fb0:	b590      	push	{r4, r7, lr}
 8009fb2:	b08b      	sub	sp, #44	; 0x2c
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10a      	bne.n	8009fe0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009fca:	2380      	movs	r3, #128	; 0x80
 8009fcc:	617b      	str	r3, [r7, #20]
    return event;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	461c      	mov	r4, r3
 8009fd2:	f107 0314 	add.w	r3, r7, #20
 8009fd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009fda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009fde:	e054      	b.n	800a08a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fee:	d103      	bne.n	8009ff8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ff6:	e009      	b.n	800a00c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d006      	beq.n	800a00c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <osMessageGet+0x5c>
      ticks = 1;
 800a008:	2301      	movs	r3, #1
 800a00a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a00c:	f7ff fe52 	bl	8009cb4 <inHandlerMode>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d01c      	beq.n	800a050 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a016:	f107 0220 	add.w	r2, r7, #32
 800a01a:	f107 0314 	add.w	r3, r7, #20
 800a01e:	3304      	adds	r3, #4
 800a020:	4619      	mov	r1, r3
 800a022:	68b8      	ldr	r0, [r7, #8]
 800a024:	f001 fac0 	bl	800b5a8 <xQueueReceiveFromISR>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d102      	bne.n	800a034 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a02e:	2310      	movs	r3, #16
 800a030:	617b      	str	r3, [r7, #20]
 800a032:	e001      	b.n	800a038 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a034:	2300      	movs	r3, #0
 800a036:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a038:	6a3b      	ldr	r3, [r7, #32]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d01d      	beq.n	800a07a <osMessageGet+0xca>
 800a03e:	4b15      	ldr	r3, [pc, #84]	; (800a094 <osMessageGet+0xe4>)
 800a040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a044:	601a      	str	r2, [r3, #0]
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	e014      	b.n	800a07a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a050:	f107 0314 	add.w	r3, r7, #20
 800a054:	3304      	adds	r3, #4
 800a056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a058:	4619      	mov	r1, r3
 800a05a:	68b8      	ldr	r0, [r7, #8]
 800a05c:	f001 f8b8 	bl	800b1d0 <xQueueReceive>
 800a060:	4603      	mov	r3, r0
 800a062:	2b01      	cmp	r3, #1
 800a064:	d102      	bne.n	800a06c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a066:	2310      	movs	r3, #16
 800a068:	617b      	str	r3, [r7, #20]
 800a06a:	e006      	b.n	800a07a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <osMessageGet+0xc6>
 800a072:	2300      	movs	r3, #0
 800a074:	e000      	b.n	800a078 <osMessageGet+0xc8>
 800a076:	2340      	movs	r3, #64	; 0x40
 800a078:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	461c      	mov	r4, r3
 800a07e:	f107 0314 	add.w	r3, r7, #20
 800a082:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a086:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	372c      	adds	r7, #44	; 0x2c
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd90      	pop	{r4, r7, pc}
 800a092:	bf00      	nop
 800a094:	e000ed04 	.word	0xe000ed04

0800a098 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b08a      	sub	sp, #40	; 0x28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a0a4:	f001 fe50 	bl	800bd48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a0a8:	4b5b      	ldr	r3, [pc, #364]	; (800a218 <pvPortMalloc+0x180>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a0b0:	f000 f920 	bl	800a2f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a0b4:	4b59      	ldr	r3, [pc, #356]	; (800a21c <pvPortMalloc+0x184>)
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f040 8093 	bne.w	800a1e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d01d      	beq.n	800a104 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a0c8:	2208      	movs	r2, #8
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f003 0307 	and.w	r3, r3, #7
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d014      	beq.n	800a104 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f023 0307 	bic.w	r3, r3, #7
 800a0e0:	3308      	adds	r3, #8
 800a0e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f003 0307 	and.w	r3, r3, #7
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00a      	beq.n	800a104 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a100:	bf00      	nop
 800a102:	e7fe      	b.n	800a102 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d06e      	beq.n	800a1e8 <pvPortMalloc+0x150>
 800a10a:	4b45      	ldr	r3, [pc, #276]	; (800a220 <pvPortMalloc+0x188>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	429a      	cmp	r2, r3
 800a112:	d869      	bhi.n	800a1e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a114:	4b43      	ldr	r3, [pc, #268]	; (800a224 <pvPortMalloc+0x18c>)
 800a116:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a118:	4b42      	ldr	r3, [pc, #264]	; (800a224 <pvPortMalloc+0x18c>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a11e:	e004      	b.n	800a12a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a122:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	429a      	cmp	r2, r3
 800a132:	d903      	bls.n	800a13c <pvPortMalloc+0xa4>
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1f1      	bne.n	800a120 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a13c:	4b36      	ldr	r3, [pc, #216]	; (800a218 <pvPortMalloc+0x180>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a142:	429a      	cmp	r2, r3
 800a144:	d050      	beq.n	800a1e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2208      	movs	r2, #8
 800a14c:	4413      	add	r3, r2
 800a14e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	1ad2      	subs	r2, r2, r3
 800a160:	2308      	movs	r3, #8
 800a162:	005b      	lsls	r3, r3, #1
 800a164:	429a      	cmp	r2, r3
 800a166:	d91f      	bls.n	800a1a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4413      	add	r3, r2
 800a16e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	f003 0307 	and.w	r3, r3, #7
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00a      	beq.n	800a190 <pvPortMalloc+0xf8>
	__asm volatile
 800a17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	613b      	str	r3, [r7, #16]
}
 800a18c:	bf00      	nop
 800a18e:	e7fe      	b.n	800a18e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	685a      	ldr	r2, [r3, #4]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	1ad2      	subs	r2, r2, r3
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a1a2:	69b8      	ldr	r0, [r7, #24]
 800a1a4:	f000 f908 	bl	800a3b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a1a8:	4b1d      	ldr	r3, [pc, #116]	; (800a220 <pvPortMalloc+0x188>)
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	4a1b      	ldr	r2, [pc, #108]	; (800a220 <pvPortMalloc+0x188>)
 800a1b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a1b6:	4b1a      	ldr	r3, [pc, #104]	; (800a220 <pvPortMalloc+0x188>)
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	4b1b      	ldr	r3, [pc, #108]	; (800a228 <pvPortMalloc+0x190>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d203      	bcs.n	800a1ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a1c2:	4b17      	ldr	r3, [pc, #92]	; (800a220 <pvPortMalloc+0x188>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a18      	ldr	r2, [pc, #96]	; (800a228 <pvPortMalloc+0x190>)
 800a1c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	685a      	ldr	r2, [r3, #4]
 800a1ce:	4b13      	ldr	r3, [pc, #76]	; (800a21c <pvPortMalloc+0x184>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	431a      	orrs	r2, r3
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	2200      	movs	r2, #0
 800a1dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a1de:	4b13      	ldr	r3, [pc, #76]	; (800a22c <pvPortMalloc+0x194>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	4a11      	ldr	r2, [pc, #68]	; (800a22c <pvPortMalloc+0x194>)
 800a1e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1e8:	f001 fdbc 	bl	800bd64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	f003 0307 	and.w	r3, r3, #7
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00a      	beq.n	800a20c <pvPortMalloc+0x174>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	60fb      	str	r3, [r7, #12]
}
 800a208:	bf00      	nop
 800a20a:	e7fe      	b.n	800a20a <pvPortMalloc+0x172>
	return pvReturn;
 800a20c:	69fb      	ldr	r3, [r7, #28]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3728      	adds	r7, #40	; 0x28
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	24004574 	.word	0x24004574
 800a21c:	24004588 	.word	0x24004588
 800a220:	24004578 	.word	0x24004578
 800a224:	2400456c 	.word	0x2400456c
 800a228:	2400457c 	.word	0x2400457c
 800a22c:	24004580 	.word	0x24004580

0800a230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d04d      	beq.n	800a2de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a242:	2308      	movs	r3, #8
 800a244:	425b      	negs	r3, r3
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	4413      	add	r3, r2
 800a24a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	685a      	ldr	r2, [r3, #4]
 800a254:	4b24      	ldr	r3, [pc, #144]	; (800a2e8 <vPortFree+0xb8>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4013      	ands	r3, r2
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10a      	bne.n	800a274 <vPortFree+0x44>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	60fb      	str	r3, [r7, #12]
}
 800a270:	bf00      	nop
 800a272:	e7fe      	b.n	800a272 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00a      	beq.n	800a292 <vPortFree+0x62>
	__asm volatile
 800a27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a280:	f383 8811 	msr	BASEPRI, r3
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	60bb      	str	r3, [r7, #8]
}
 800a28e:	bf00      	nop
 800a290:	e7fe      	b.n	800a290 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	685a      	ldr	r2, [r3, #4]
 800a296:	4b14      	ldr	r3, [pc, #80]	; (800a2e8 <vPortFree+0xb8>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4013      	ands	r3, r2
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d01e      	beq.n	800a2de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d11a      	bne.n	800a2de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	4b0e      	ldr	r3, [pc, #56]	; (800a2e8 <vPortFree+0xb8>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	43db      	mvns	r3, r3
 800a2b2:	401a      	ands	r2, r3
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a2b8:	f001 fd46 	bl	800bd48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	685a      	ldr	r2, [r3, #4]
 800a2c0:	4b0a      	ldr	r3, [pc, #40]	; (800a2ec <vPortFree+0xbc>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	4a09      	ldr	r2, [pc, #36]	; (800a2ec <vPortFree+0xbc>)
 800a2c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2ca:	6938      	ldr	r0, [r7, #16]
 800a2cc:	f000 f874 	bl	800a3b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a2d0:	4b07      	ldr	r3, [pc, #28]	; (800a2f0 <vPortFree+0xc0>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	4a06      	ldr	r2, [pc, #24]	; (800a2f0 <vPortFree+0xc0>)
 800a2d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a2da:	f001 fd43 	bl	800bd64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2de:	bf00      	nop
 800a2e0:	3718      	adds	r7, #24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	24004588 	.word	0x24004588
 800a2ec:	24004578 	.word	0x24004578
 800a2f0:	24004584 	.word	0x24004584

0800a2f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a2fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a300:	4b27      	ldr	r3, [pc, #156]	; (800a3a0 <prvHeapInit+0xac>)
 800a302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f003 0307 	and.w	r3, r3, #7
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00c      	beq.n	800a328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	3307      	adds	r3, #7
 800a312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f023 0307 	bic.w	r3, r3, #7
 800a31a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	4a1f      	ldr	r2, [pc, #124]	; (800a3a0 <prvHeapInit+0xac>)
 800a324:	4413      	add	r3, r2
 800a326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a32c:	4a1d      	ldr	r2, [pc, #116]	; (800a3a4 <prvHeapInit+0xb0>)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a332:	4b1c      	ldr	r3, [pc, #112]	; (800a3a4 <prvHeapInit+0xb0>)
 800a334:	2200      	movs	r2, #0
 800a336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	4413      	add	r3, r2
 800a33e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a340:	2208      	movs	r2, #8
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	1a9b      	subs	r3, r3, r2
 800a346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f023 0307 	bic.w	r3, r3, #7
 800a34e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	4a15      	ldr	r2, [pc, #84]	; (800a3a8 <prvHeapInit+0xb4>)
 800a354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a356:	4b14      	ldr	r3, [pc, #80]	; (800a3a8 <prvHeapInit+0xb4>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2200      	movs	r2, #0
 800a35c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a35e:	4b12      	ldr	r3, [pc, #72]	; (800a3a8 <prvHeapInit+0xb4>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2200      	movs	r2, #0
 800a364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	1ad2      	subs	r2, r2, r3
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a374:	4b0c      	ldr	r3, [pc, #48]	; (800a3a8 <prvHeapInit+0xb4>)
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	4a0a      	ldr	r2, [pc, #40]	; (800a3ac <prvHeapInit+0xb8>)
 800a382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	4a09      	ldr	r2, [pc, #36]	; (800a3b0 <prvHeapInit+0xbc>)
 800a38a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a38c:	4b09      	ldr	r3, [pc, #36]	; (800a3b4 <prvHeapInit+0xc0>)
 800a38e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a392:	601a      	str	r2, [r3, #0]
}
 800a394:	bf00      	nop
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	2400096c 	.word	0x2400096c
 800a3a4:	2400456c 	.word	0x2400456c
 800a3a8:	24004574 	.word	0x24004574
 800a3ac:	2400457c 	.word	0x2400457c
 800a3b0:	24004578 	.word	0x24004578
 800a3b4:	24004588 	.word	0x24004588

0800a3b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3c0:	4b28      	ldr	r3, [pc, #160]	; (800a464 <prvInsertBlockIntoFreeList+0xac>)
 800a3c2:	60fb      	str	r3, [r7, #12]
 800a3c4:	e002      	b.n	800a3cc <prvInsertBlockIntoFreeList+0x14>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	60fb      	str	r3, [r7, #12]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d8f7      	bhi.n	800a3c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d108      	bne.n	800a3fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	685a      	ldr	r2, [r3, #4]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	441a      	add	r2, r3
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	441a      	add	r2, r3
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d118      	bne.n	800a440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	4b15      	ldr	r3, [pc, #84]	; (800a468 <prvInsertBlockIntoFreeList+0xb0>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	429a      	cmp	r2, r3
 800a418:	d00d      	beq.n	800a436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685a      	ldr	r2, [r3, #4]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	441a      	add	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	601a      	str	r2, [r3, #0]
 800a434:	e008      	b.n	800a448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a436:	4b0c      	ldr	r3, [pc, #48]	; (800a468 <prvInsertBlockIntoFreeList+0xb0>)
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	601a      	str	r2, [r3, #0]
 800a43e:	e003      	b.n	800a448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d002      	beq.n	800a456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a456:	bf00      	nop
 800a458:	3714      	adds	r7, #20
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	2400456c 	.word	0x2400456c
 800a468:	24004574 	.word	0x24004574

0800a46c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f103 0208 	add.w	r2, r3, #8
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f04f 32ff 	mov.w	r2, #4294967295
 800a484:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f103 0208 	add.w	r2, r3, #8
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f103 0208 	add.w	r2, r3, #8
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4ba:	bf00      	nop
 800a4bc:	370c      	adds	r7, #12
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b085      	sub	sp, #20
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	689a      	ldr	r2, [r3, #8]
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	683a      	ldr	r2, [r7, #0]
 800a4ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	1c5a      	adds	r2, r3, #1
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	601a      	str	r2, [r3, #0]
}
 800a502:	bf00      	nop
 800a504:	3714      	adds	r7, #20
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a50e:	b480      	push	{r7}
 800a510:	b085      	sub	sp, #20
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a524:	d103      	bne.n	800a52e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	60fb      	str	r3, [r7, #12]
 800a52c:	e00c      	b.n	800a548 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	3308      	adds	r3, #8
 800a532:	60fb      	str	r3, [r7, #12]
 800a534:	e002      	b.n	800a53c <vListInsert+0x2e>
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	60fb      	str	r3, [r7, #12]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	429a      	cmp	r2, r3
 800a546:	d2f6      	bcs.n	800a536 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	683a      	ldr	r2, [r7, #0]
 800a556:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	1c5a      	adds	r2, r3, #1
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	601a      	str	r2, [r3, #0]
}
 800a574:	bf00      	nop
 800a576:	3714      	adds	r7, #20
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	691b      	ldr	r3, [r3, #16]
 800a58c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	6892      	ldr	r2, [r2, #8]
 800a596:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	6852      	ldr	r2, [r2, #4]
 800a5a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d103      	bne.n	800a5b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	689a      	ldr	r2, [r3, #8]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	1e5a      	subs	r2, r3, #1
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3714      	adds	r7, #20
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	3b04      	subs	r3, #4
 800a5e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	3b04      	subs	r3, #4
 800a5f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	f023 0201 	bic.w	r2, r3, #1
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	3b04      	subs	r3, #4
 800a602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a604:	4a0c      	ldr	r2, [pc, #48]	; (800a638 <pxPortInitialiseStack+0x64>)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	3b14      	subs	r3, #20
 800a60e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3b04      	subs	r3, #4
 800a61a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f06f 0202 	mvn.w	r2, #2
 800a622:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	3b20      	subs	r3, #32
 800a628:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a62a:	68fb      	ldr	r3, [r7, #12]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr
 800a638:	0800a63d 	.word	0x0800a63d

0800a63c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a642:	2300      	movs	r3, #0
 800a644:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a646:	4b12      	ldr	r3, [pc, #72]	; (800a690 <prvTaskExitError+0x54>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a64e:	d00a      	beq.n	800a666 <prvTaskExitError+0x2a>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	60fb      	str	r3, [r7, #12]
}
 800a662:	bf00      	nop
 800a664:	e7fe      	b.n	800a664 <prvTaskExitError+0x28>
	__asm volatile
 800a666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	60bb      	str	r3, [r7, #8]
}
 800a678:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a67a:	bf00      	nop
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d0fc      	beq.n	800a67c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a682:	bf00      	nop
 800a684:	bf00      	nop
 800a686:	3714      	adds	r7, #20
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	24000018 	.word	0x24000018
	...

0800a6a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a6a0:	4b07      	ldr	r3, [pc, #28]	; (800a6c0 <pxCurrentTCBConst2>)
 800a6a2:	6819      	ldr	r1, [r3, #0]
 800a6a4:	6808      	ldr	r0, [r1, #0]
 800a6a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6aa:	f380 8809 	msr	PSP, r0
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	f04f 0000 	mov.w	r0, #0
 800a6b6:	f380 8811 	msr	BASEPRI, r0
 800a6ba:	4770      	bx	lr
 800a6bc:	f3af 8000 	nop.w

0800a6c0 <pxCurrentTCBConst2>:
 800a6c0:	24004594 	.word	0x24004594
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop

0800a6c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a6c8:	4808      	ldr	r0, [pc, #32]	; (800a6ec <prvPortStartFirstTask+0x24>)
 800a6ca:	6800      	ldr	r0, [r0, #0]
 800a6cc:	6800      	ldr	r0, [r0, #0]
 800a6ce:	f380 8808 	msr	MSP, r0
 800a6d2:	f04f 0000 	mov.w	r0, #0
 800a6d6:	f380 8814 	msr	CONTROL, r0
 800a6da:	b662      	cpsie	i
 800a6dc:	b661      	cpsie	f
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	df00      	svc	0
 800a6e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a6ea:	bf00      	nop
 800a6ec:	e000ed08 	.word	0xe000ed08

0800a6f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a6f6:	4b46      	ldr	r3, [pc, #280]	; (800a810 <xPortStartScheduler+0x120>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a46      	ldr	r2, [pc, #280]	; (800a814 <xPortStartScheduler+0x124>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d10a      	bne.n	800a716 <xPortStartScheduler+0x26>
	__asm volatile
 800a700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a704:	f383 8811 	msr	BASEPRI, r3
 800a708:	f3bf 8f6f 	isb	sy
 800a70c:	f3bf 8f4f 	dsb	sy
 800a710:	613b      	str	r3, [r7, #16]
}
 800a712:	bf00      	nop
 800a714:	e7fe      	b.n	800a714 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a716:	4b3e      	ldr	r3, [pc, #248]	; (800a810 <xPortStartScheduler+0x120>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a3f      	ldr	r2, [pc, #252]	; (800a818 <xPortStartScheduler+0x128>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d10a      	bne.n	800a736 <xPortStartScheduler+0x46>
	__asm volatile
 800a720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	60fb      	str	r3, [r7, #12]
}
 800a732:	bf00      	nop
 800a734:	e7fe      	b.n	800a734 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a736:	4b39      	ldr	r3, [pc, #228]	; (800a81c <xPortStartScheduler+0x12c>)
 800a738:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	22ff      	movs	r2, #255	; 0xff
 800a746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a750:	78fb      	ldrb	r3, [r7, #3]
 800a752:	b2db      	uxtb	r3, r3
 800a754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	4b31      	ldr	r3, [pc, #196]	; (800a820 <xPortStartScheduler+0x130>)
 800a75c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a75e:	4b31      	ldr	r3, [pc, #196]	; (800a824 <xPortStartScheduler+0x134>)
 800a760:	2207      	movs	r2, #7
 800a762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a764:	e009      	b.n	800a77a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a766:	4b2f      	ldr	r3, [pc, #188]	; (800a824 <xPortStartScheduler+0x134>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	3b01      	subs	r3, #1
 800a76c:	4a2d      	ldr	r2, [pc, #180]	; (800a824 <xPortStartScheduler+0x134>)
 800a76e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a770:	78fb      	ldrb	r3, [r7, #3]
 800a772:	b2db      	uxtb	r3, r3
 800a774:	005b      	lsls	r3, r3, #1
 800a776:	b2db      	uxtb	r3, r3
 800a778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a77a:	78fb      	ldrb	r3, [r7, #3]
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a782:	2b80      	cmp	r3, #128	; 0x80
 800a784:	d0ef      	beq.n	800a766 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a786:	4b27      	ldr	r3, [pc, #156]	; (800a824 <xPortStartScheduler+0x134>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f1c3 0307 	rsb	r3, r3, #7
 800a78e:	2b04      	cmp	r3, #4
 800a790:	d00a      	beq.n	800a7a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	60bb      	str	r3, [r7, #8]
}
 800a7a4:	bf00      	nop
 800a7a6:	e7fe      	b.n	800a7a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a7a8:	4b1e      	ldr	r3, [pc, #120]	; (800a824 <xPortStartScheduler+0x134>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	021b      	lsls	r3, r3, #8
 800a7ae:	4a1d      	ldr	r2, [pc, #116]	; (800a824 <xPortStartScheduler+0x134>)
 800a7b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a7b2:	4b1c      	ldr	r3, [pc, #112]	; (800a824 <xPortStartScheduler+0x134>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7ba:	4a1a      	ldr	r2, [pc, #104]	; (800a824 <xPortStartScheduler+0x134>)
 800a7bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	b2da      	uxtb	r2, r3
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a7c6:	4b18      	ldr	r3, [pc, #96]	; (800a828 <xPortStartScheduler+0x138>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a17      	ldr	r2, [pc, #92]	; (800a828 <xPortStartScheduler+0x138>)
 800a7cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a7d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a7d2:	4b15      	ldr	r3, [pc, #84]	; (800a828 <xPortStartScheduler+0x138>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a14      	ldr	r2, [pc, #80]	; (800a828 <xPortStartScheduler+0x138>)
 800a7d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a7dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a7de:	f000 f8dd 	bl	800a99c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a7e2:	4b12      	ldr	r3, [pc, #72]	; (800a82c <xPortStartScheduler+0x13c>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a7e8:	f000 f8fc 	bl	800a9e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a7ec:	4b10      	ldr	r3, [pc, #64]	; (800a830 <xPortStartScheduler+0x140>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a0f      	ldr	r2, [pc, #60]	; (800a830 <xPortStartScheduler+0x140>)
 800a7f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a7f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a7f8:	f7ff ff66 	bl	800a6c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7fc:	f001 fc06 	bl	800c00c <vTaskSwitchContext>
	prvTaskExitError();
 800a800:	f7ff ff1c 	bl	800a63c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3718      	adds	r7, #24
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	e000ed00 	.word	0xe000ed00
 800a814:	410fc271 	.word	0x410fc271
 800a818:	410fc270 	.word	0x410fc270
 800a81c:	e000e400 	.word	0xe000e400
 800a820:	2400458c 	.word	0x2400458c
 800a824:	24004590 	.word	0x24004590
 800a828:	e000ed20 	.word	0xe000ed20
 800a82c:	24000018 	.word	0x24000018
 800a830:	e000ef34 	.word	0xe000ef34

0800a834 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
	__asm volatile
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	607b      	str	r3, [r7, #4]
}
 800a84c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a84e:	4b0f      	ldr	r3, [pc, #60]	; (800a88c <vPortEnterCritical+0x58>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3301      	adds	r3, #1
 800a854:	4a0d      	ldr	r2, [pc, #52]	; (800a88c <vPortEnterCritical+0x58>)
 800a856:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a858:	4b0c      	ldr	r3, [pc, #48]	; (800a88c <vPortEnterCritical+0x58>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d10f      	bne.n	800a880 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a860:	4b0b      	ldr	r3, [pc, #44]	; (800a890 <vPortEnterCritical+0x5c>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	b2db      	uxtb	r3, r3
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00a      	beq.n	800a880 <vPortEnterCritical+0x4c>
	__asm volatile
 800a86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86e:	f383 8811 	msr	BASEPRI, r3
 800a872:	f3bf 8f6f 	isb	sy
 800a876:	f3bf 8f4f 	dsb	sy
 800a87a:	603b      	str	r3, [r7, #0]
}
 800a87c:	bf00      	nop
 800a87e:	e7fe      	b.n	800a87e <vPortEnterCritical+0x4a>
	}
}
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr
 800a88c:	24000018 	.word	0x24000018
 800a890:	e000ed04 	.word	0xe000ed04

0800a894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a89a:	4b12      	ldr	r3, [pc, #72]	; (800a8e4 <vPortExitCritical+0x50>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10a      	bne.n	800a8b8 <vPortExitCritical+0x24>
	__asm volatile
 800a8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	607b      	str	r3, [r7, #4]
}
 800a8b4:	bf00      	nop
 800a8b6:	e7fe      	b.n	800a8b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a8b8:	4b0a      	ldr	r3, [pc, #40]	; (800a8e4 <vPortExitCritical+0x50>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	4a09      	ldr	r2, [pc, #36]	; (800a8e4 <vPortExitCritical+0x50>)
 800a8c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a8c2:	4b08      	ldr	r3, [pc, #32]	; (800a8e4 <vPortExitCritical+0x50>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d105      	bne.n	800a8d6 <vPortExitCritical+0x42>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a8d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a8d6:	bf00      	nop
 800a8d8:	370c      	adds	r7, #12
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	24000018 	.word	0x24000018
	...

0800a8f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a8f0:	f3ef 8009 	mrs	r0, PSP
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	4b15      	ldr	r3, [pc, #84]	; (800a950 <pxCurrentTCBConst>)
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	f01e 0f10 	tst.w	lr, #16
 800a900:	bf08      	it	eq
 800a902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90a:	6010      	str	r0, [r2, #0]
 800a90c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a910:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a914:	f380 8811 	msr	BASEPRI, r0
 800a918:	f3bf 8f4f 	dsb	sy
 800a91c:	f3bf 8f6f 	isb	sy
 800a920:	f001 fb74 	bl	800c00c <vTaskSwitchContext>
 800a924:	f04f 0000 	mov.w	r0, #0
 800a928:	f380 8811 	msr	BASEPRI, r0
 800a92c:	bc09      	pop	{r0, r3}
 800a92e:	6819      	ldr	r1, [r3, #0]
 800a930:	6808      	ldr	r0, [r1, #0]
 800a932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a936:	f01e 0f10 	tst.w	lr, #16
 800a93a:	bf08      	it	eq
 800a93c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a940:	f380 8809 	msr	PSP, r0
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	f3af 8000 	nop.w

0800a950 <pxCurrentTCBConst>:
 800a950:	24004594 	.word	0x24004594
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a954:	bf00      	nop
 800a956:	bf00      	nop

0800a958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
	__asm volatile
 800a95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	607b      	str	r3, [r7, #4]
}
 800a970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a972:	f001 fa93 	bl	800be9c <xTaskIncrementTick>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d003      	beq.n	800a984 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a97c:	4b06      	ldr	r3, [pc, #24]	; (800a998 <xPortSysTickHandler+0x40>)
 800a97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a982:	601a      	str	r2, [r3, #0]
 800a984:	2300      	movs	r3, #0
 800a986:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	f383 8811 	msr	BASEPRI, r3
}
 800a98e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a990:	bf00      	nop
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	e000ed04 	.word	0xe000ed04

0800a99c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a99c:	b480      	push	{r7}
 800a99e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a9a0:	4b0b      	ldr	r3, [pc, #44]	; (800a9d0 <vPortSetupTimerInterrupt+0x34>)
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a9a6:	4b0b      	ldr	r3, [pc, #44]	; (800a9d4 <vPortSetupTimerInterrupt+0x38>)
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a9ac:	4b0a      	ldr	r3, [pc, #40]	; (800a9d8 <vPortSetupTimerInterrupt+0x3c>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a0a      	ldr	r2, [pc, #40]	; (800a9dc <vPortSetupTimerInterrupt+0x40>)
 800a9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9b6:	099b      	lsrs	r3, r3, #6
 800a9b8:	4a09      	ldr	r2, [pc, #36]	; (800a9e0 <vPortSetupTimerInterrupt+0x44>)
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a9be:	4b04      	ldr	r3, [pc, #16]	; (800a9d0 <vPortSetupTimerInterrupt+0x34>)
 800a9c0:	2207      	movs	r2, #7
 800a9c2:	601a      	str	r2, [r3, #0]
}
 800a9c4:	bf00      	nop
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	e000e010 	.word	0xe000e010
 800a9d4:	e000e018 	.word	0xe000e018
 800a9d8:	24000000 	.word	0x24000000
 800a9dc:	10624dd3 	.word	0x10624dd3
 800a9e0:	e000e014 	.word	0xe000e014

0800a9e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a9e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a9f4 <vPortEnableVFP+0x10>
 800a9e8:	6801      	ldr	r1, [r0, #0]
 800a9ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a9ee:	6001      	str	r1, [r0, #0]
 800a9f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a9f2:	bf00      	nop
 800a9f4:	e000ed88 	.word	0xe000ed88

0800a9f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a9fe:	f3ef 8305 	mrs	r3, IPSR
 800aa02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2b0f      	cmp	r3, #15
 800aa08:	d914      	bls.n	800aa34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa0a:	4a17      	ldr	r2, [pc, #92]	; (800aa68 <vPortValidateInterruptPriority+0x70>)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	4413      	add	r3, r2
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa14:	4b15      	ldr	r3, [pc, #84]	; (800aa6c <vPortValidateInterruptPriority+0x74>)
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	7afa      	ldrb	r2, [r7, #11]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d20a      	bcs.n	800aa34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa22:	f383 8811 	msr	BASEPRI, r3
 800aa26:	f3bf 8f6f 	isb	sy
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	607b      	str	r3, [r7, #4]
}
 800aa30:	bf00      	nop
 800aa32:	e7fe      	b.n	800aa32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa34:	4b0e      	ldr	r3, [pc, #56]	; (800aa70 <vPortValidateInterruptPriority+0x78>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa3c:	4b0d      	ldr	r3, [pc, #52]	; (800aa74 <vPortValidateInterruptPriority+0x7c>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d90a      	bls.n	800aa5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aa44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa48:	f383 8811 	msr	BASEPRI, r3
 800aa4c:	f3bf 8f6f 	isb	sy
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	603b      	str	r3, [r7, #0]
}
 800aa56:	bf00      	nop
 800aa58:	e7fe      	b.n	800aa58 <vPortValidateInterruptPriority+0x60>
	}
 800aa5a:	bf00      	nop
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	e000e3f0 	.word	0xe000e3f0
 800aa6c:	2400458c 	.word	0x2400458c
 800aa70:	e000ed0c 	.word	0xe000ed0c
 800aa74:	24004590 	.word	0x24004590

0800aa78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10a      	bne.n	800aaa2 <xQueueGenericReset+0x2a>
	__asm volatile
 800aa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa90:	f383 8811 	msr	BASEPRI, r3
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	60bb      	str	r3, [r7, #8]
}
 800aa9e:	bf00      	nop
 800aaa0:	e7fe      	b.n	800aaa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aaa2:	f7ff fec7 	bl	800a834 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaae:	68f9      	ldr	r1, [r7, #12]
 800aab0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aab2:	fb01 f303 	mul.w	r3, r1, r3
 800aab6:	441a      	add	r2, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad2:	3b01      	subs	r3, #1
 800aad4:	68f9      	ldr	r1, [r7, #12]
 800aad6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aad8:	fb01 f303 	mul.w	r3, r1, r3
 800aadc:	441a      	add	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	22ff      	movs	r2, #255	; 0xff
 800aae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	22ff      	movs	r2, #255	; 0xff
 800aaee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d114      	bne.n	800ab22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	691b      	ldr	r3, [r3, #16]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d01a      	beq.n	800ab36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	3310      	adds	r3, #16
 800ab04:	4618      	mov	r0, r3
 800ab06:	f001 fb01 	bl	800c10c <xTaskRemoveFromEventList>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d012      	beq.n	800ab36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab10:	4b0c      	ldr	r3, [pc, #48]	; (800ab44 <xQueueGenericReset+0xcc>)
 800ab12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab16:	601a      	str	r2, [r3, #0]
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	f3bf 8f6f 	isb	sy
 800ab20:	e009      	b.n	800ab36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	3310      	adds	r3, #16
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7ff fca0 	bl	800a46c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	3324      	adds	r3, #36	; 0x24
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7ff fc9b 	bl	800a46c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab36:	f7ff fead 	bl	800a894 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab3a:	2301      	movs	r3, #1
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	e000ed04 	.word	0xe000ed04

0800ab48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b08e      	sub	sp, #56	; 0x38
 800ab4c:	af02      	add	r7, sp, #8
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
 800ab54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10a      	bne.n	800ab72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ab5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab60:	f383 8811 	msr	BASEPRI, r3
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	f3bf 8f4f 	dsb	sy
 800ab6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab6e:	bf00      	nop
 800ab70:	e7fe      	b.n	800ab70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10a      	bne.n	800ab8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ab78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7c:	f383 8811 	msr	BASEPRI, r3
 800ab80:	f3bf 8f6f 	isb	sy
 800ab84:	f3bf 8f4f 	dsb	sy
 800ab88:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab8a:	bf00      	nop
 800ab8c:	e7fe      	b.n	800ab8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <xQueueGenericCreateStatic+0x52>
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d001      	beq.n	800ab9e <xQueueGenericCreateStatic+0x56>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e000      	b.n	800aba0 <xQueueGenericCreateStatic+0x58>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d10a      	bne.n	800abba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800aba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba8:	f383 8811 	msr	BASEPRI, r3
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	623b      	str	r3, [r7, #32]
}
 800abb6:	bf00      	nop
 800abb8:	e7fe      	b.n	800abb8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d102      	bne.n	800abc6 <xQueueGenericCreateStatic+0x7e>
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d101      	bne.n	800abca <xQueueGenericCreateStatic+0x82>
 800abc6:	2301      	movs	r3, #1
 800abc8:	e000      	b.n	800abcc <xQueueGenericCreateStatic+0x84>
 800abca:	2300      	movs	r3, #0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d10a      	bne.n	800abe6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800abd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	61fb      	str	r3, [r7, #28]
}
 800abe2:	bf00      	nop
 800abe4:	e7fe      	b.n	800abe4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800abe6:	2348      	movs	r3, #72	; 0x48
 800abe8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	2b48      	cmp	r3, #72	; 0x48
 800abee:	d00a      	beq.n	800ac06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800abf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf4:	f383 8811 	msr	BASEPRI, r3
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	61bb      	str	r3, [r7, #24]
}
 800ac02:	bf00      	nop
 800ac04:	e7fe      	b.n	800ac04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ac0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00d      	beq.n	800ac2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac14:	2201      	movs	r2, #1
 800ac16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ac1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac20:	9300      	str	r3, [sp, #0]
 800ac22:	4613      	mov	r3, r2
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	68b9      	ldr	r1, [r7, #8]
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f000 f83f 	bl	800acac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3730      	adds	r7, #48	; 0x30
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b08a      	sub	sp, #40	; 0x28
 800ac3c:	af02      	add	r7, sp, #8
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	4613      	mov	r3, r2
 800ac44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d10a      	bne.n	800ac62 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ac4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac50:	f383 8811 	msr	BASEPRI, r3
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	f3bf 8f4f 	dsb	sy
 800ac5c:	613b      	str	r3, [r7, #16]
}
 800ac5e:	bf00      	nop
 800ac60:	e7fe      	b.n	800ac60 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	fb02 f303 	mul.w	r3, r2, r3
 800ac6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	3348      	adds	r3, #72	; 0x48
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7ff fa11 	bl	800a098 <pvPortMalloc>
 800ac76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d011      	beq.n	800aca2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	3348      	adds	r3, #72	; 0x48
 800ac86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac90:	79fa      	ldrb	r2, [r7, #7]
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	9300      	str	r3, [sp, #0]
 800ac96:	4613      	mov	r3, r2
 800ac98:	697a      	ldr	r2, [r7, #20]
 800ac9a:	68b9      	ldr	r1, [r7, #8]
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f000 f805 	bl	800acac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aca2:	69bb      	ldr	r3, [r7, #24]
	}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3720      	adds	r7, #32
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
 800acb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d103      	bne.n	800acc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	69ba      	ldr	r2, [r7, #24]
 800acc4:	601a      	str	r2, [r3, #0]
 800acc6:	e002      	b.n	800acce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	68ba      	ldr	r2, [r7, #8]
 800acd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800acda:	2101      	movs	r1, #1
 800acdc:	69b8      	ldr	r0, [r7, #24]
 800acde:	f7ff fecb 	bl	800aa78 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ace2:	bf00      	nop
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800acea:	b580      	push	{r7, lr}
 800acec:	b082      	sub	sp, #8
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00e      	beq.n	800ad16 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2200      	movs	r2, #0
 800ad08:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	2100      	movs	r1, #0
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f837 	bl	800ad84 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ad16:	bf00      	nop
 800ad18:	3708      	adds	r7, #8
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b086      	sub	sp, #24
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	4603      	mov	r3, r0
 800ad26:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	617b      	str	r3, [r7, #20]
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ad30:	79fb      	ldrb	r3, [r7, #7]
 800ad32:	461a      	mov	r2, r3
 800ad34:	6939      	ldr	r1, [r7, #16]
 800ad36:	6978      	ldr	r0, [r7, #20]
 800ad38:	f7ff ff7e 	bl	800ac38 <xQueueGenericCreate>
 800ad3c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f7ff ffd3 	bl	800acea <prvInitialiseMutex>

		return xNewQueue;
 800ad44:	68fb      	ldr	r3, [r7, #12]
	}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3718      	adds	r7, #24
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b088      	sub	sp, #32
 800ad52:	af02      	add	r7, sp, #8
 800ad54:	4603      	mov	r3, r0
 800ad56:	6039      	str	r1, [r7, #0]
 800ad58:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	617b      	str	r3, [r7, #20]
 800ad5e:	2300      	movs	r3, #0
 800ad60:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ad62:	79fb      	ldrb	r3, [r7, #7]
 800ad64:	9300      	str	r3, [sp, #0]
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	6939      	ldr	r1, [r7, #16]
 800ad6c:	6978      	ldr	r0, [r7, #20]
 800ad6e:	f7ff feeb 	bl	800ab48 <xQueueGenericCreateStatic>
 800ad72:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f7ff ffb8 	bl	800acea <prvInitialiseMutex>

		return xNewQueue;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
	}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3718      	adds	r7, #24
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b08e      	sub	sp, #56	; 0x38
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	607a      	str	r2, [r7, #4]
 800ad90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad92:	2300      	movs	r3, #0
 800ad94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10a      	bne.n	800adb6 <xQueueGenericSend+0x32>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d103      	bne.n	800adc4 <xQueueGenericSend+0x40>
 800adbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d101      	bne.n	800adc8 <xQueueGenericSend+0x44>
 800adc4:	2301      	movs	r3, #1
 800adc6:	e000      	b.n	800adca <xQueueGenericSend+0x46>
 800adc8:	2300      	movs	r3, #0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d10a      	bne.n	800ade4 <xQueueGenericSend+0x60>
	__asm volatile
 800adce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ade0:	bf00      	nop
 800ade2:	e7fe      	b.n	800ade2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d103      	bne.n	800adf2 <xQueueGenericSend+0x6e>
 800adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d101      	bne.n	800adf6 <xQueueGenericSend+0x72>
 800adf2:	2301      	movs	r3, #1
 800adf4:	e000      	b.n	800adf8 <xQueueGenericSend+0x74>
 800adf6:	2300      	movs	r3, #0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10a      	bne.n	800ae12 <xQueueGenericSend+0x8e>
	__asm volatile
 800adfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae00:	f383 8811 	msr	BASEPRI, r3
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	623b      	str	r3, [r7, #32]
}
 800ae0e:	bf00      	nop
 800ae10:	e7fe      	b.n	800ae10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae12:	f001 fb37 	bl	800c484 <xTaskGetSchedulerState>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d102      	bne.n	800ae22 <xQueueGenericSend+0x9e>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d101      	bne.n	800ae26 <xQueueGenericSend+0xa2>
 800ae22:	2301      	movs	r3, #1
 800ae24:	e000      	b.n	800ae28 <xQueueGenericSend+0xa4>
 800ae26:	2300      	movs	r3, #0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10a      	bne.n	800ae42 <xQueueGenericSend+0xbe>
	__asm volatile
 800ae2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae30:	f383 8811 	msr	BASEPRI, r3
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	61fb      	str	r3, [r7, #28]
}
 800ae3e:	bf00      	nop
 800ae40:	e7fe      	b.n	800ae40 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae42:	f7ff fcf7 	bl	800a834 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d302      	bcc.n	800ae58 <xQueueGenericSend+0xd4>
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	2b02      	cmp	r3, #2
 800ae56:	d129      	bne.n	800aeac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae58:	683a      	ldr	r2, [r7, #0]
 800ae5a:	68b9      	ldr	r1, [r7, #8]
 800ae5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae5e:	f000 fc3b 	bl	800b6d8 <prvCopyDataToQueue>
 800ae62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d010      	beq.n	800ae8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6e:	3324      	adds	r3, #36	; 0x24
 800ae70:	4618      	mov	r0, r3
 800ae72:	f001 f94b 	bl	800c10c <xTaskRemoveFromEventList>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d013      	beq.n	800aea4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae7c:	4b3f      	ldr	r3, [pc, #252]	; (800af7c <xQueueGenericSend+0x1f8>)
 800ae7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae82:	601a      	str	r2, [r3, #0]
 800ae84:	f3bf 8f4f 	dsb	sy
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	e00a      	b.n	800aea4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d007      	beq.n	800aea4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae94:	4b39      	ldr	r3, [pc, #228]	; (800af7c <xQueueGenericSend+0x1f8>)
 800ae96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae9a:	601a      	str	r2, [r3, #0]
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aea4:	f7ff fcf6 	bl	800a894 <vPortExitCritical>
				return pdPASS;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e063      	b.n	800af74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d103      	bne.n	800aeba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aeb2:	f7ff fcef 	bl	800a894 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	e05c      	b.n	800af74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aeba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d106      	bne.n	800aece <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aec0:	f107 0314 	add.w	r3, r7, #20
 800aec4:	4618      	mov	r0, r3
 800aec6:	f001 f983 	bl	800c1d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aeca:	2301      	movs	r3, #1
 800aecc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aece:	f7ff fce1 	bl	800a894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aed2:	f000 ff39 	bl	800bd48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aed6:	f7ff fcad 	bl	800a834 <vPortEnterCritical>
 800aeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aedc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aee0:	b25b      	sxtb	r3, r3
 800aee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee6:	d103      	bne.n	800aef0 <xQueueGenericSend+0x16c>
 800aee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeea:	2200      	movs	r2, #0
 800aeec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aef6:	b25b      	sxtb	r3, r3
 800aef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aefc:	d103      	bne.n	800af06 <xQueueGenericSend+0x182>
 800aefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af00:	2200      	movs	r2, #0
 800af02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af06:	f7ff fcc5 	bl	800a894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af0a:	1d3a      	adds	r2, r7, #4
 800af0c:	f107 0314 	add.w	r3, r7, #20
 800af10:	4611      	mov	r1, r2
 800af12:	4618      	mov	r0, r3
 800af14:	f001 f972 	bl	800c1fc <xTaskCheckForTimeOut>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d124      	bne.n	800af68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af20:	f000 fcd2 	bl	800b8c8 <prvIsQueueFull>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d018      	beq.n	800af5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2c:	3310      	adds	r3, #16
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	4611      	mov	r1, r2
 800af32:	4618      	mov	r0, r3
 800af34:	f001 f8c6 	bl	800c0c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af3a:	f000 fc5d 	bl	800b7f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af3e:	f000 ff11 	bl	800bd64 <xTaskResumeAll>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	f47f af7c 	bne.w	800ae42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af4a:	4b0c      	ldr	r3, [pc, #48]	; (800af7c <xQueueGenericSend+0x1f8>)
 800af4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	f3bf 8f4f 	dsb	sy
 800af56:	f3bf 8f6f 	isb	sy
 800af5a:	e772      	b.n	800ae42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af5e:	f000 fc4b 	bl	800b7f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af62:	f000 feff 	bl	800bd64 <xTaskResumeAll>
 800af66:	e76c      	b.n	800ae42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af6a:	f000 fc45 	bl	800b7f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af6e:	f000 fef9 	bl	800bd64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af74:	4618      	mov	r0, r3
 800af76:	3738      	adds	r7, #56	; 0x38
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	e000ed04 	.word	0xe000ed04

0800af80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b090      	sub	sp, #64	; 0x40
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	607a      	str	r2, [r7, #4]
 800af8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800af92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10a      	bne.n	800afae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800afaa:	bf00      	nop
 800afac:	e7fe      	b.n	800afac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d103      	bne.n	800afbc <xQueueGenericSendFromISR+0x3c>
 800afb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d101      	bne.n	800afc0 <xQueueGenericSendFromISR+0x40>
 800afbc:	2301      	movs	r3, #1
 800afbe:	e000      	b.n	800afc2 <xQueueGenericSendFromISR+0x42>
 800afc0:	2300      	movs	r3, #0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10a      	bne.n	800afdc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800afc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afca:	f383 8811 	msr	BASEPRI, r3
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afd8:	bf00      	nop
 800afda:	e7fe      	b.n	800afda <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	2b02      	cmp	r3, #2
 800afe0:	d103      	bne.n	800afea <xQueueGenericSendFromISR+0x6a>
 800afe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d101      	bne.n	800afee <xQueueGenericSendFromISR+0x6e>
 800afea:	2301      	movs	r3, #1
 800afec:	e000      	b.n	800aff0 <xQueueGenericSendFromISR+0x70>
 800afee:	2300      	movs	r3, #0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10a      	bne.n	800b00a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff8:	f383 8811 	msr	BASEPRI, r3
 800affc:	f3bf 8f6f 	isb	sy
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	623b      	str	r3, [r7, #32]
}
 800b006:	bf00      	nop
 800b008:	e7fe      	b.n	800b008 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b00a:	f7ff fcf5 	bl	800a9f8 <vPortValidateInterruptPriority>
	__asm volatile
 800b00e:	f3ef 8211 	mrs	r2, BASEPRI
 800b012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b016:	f383 8811 	msr	BASEPRI, r3
 800b01a:	f3bf 8f6f 	isb	sy
 800b01e:	f3bf 8f4f 	dsb	sy
 800b022:	61fa      	str	r2, [r7, #28]
 800b024:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b026:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b028:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b032:	429a      	cmp	r2, r3
 800b034:	d302      	bcc.n	800b03c <xQueueGenericSendFromISR+0xbc>
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2b02      	cmp	r3, #2
 800b03a:	d12f      	bne.n	800b09c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b04a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b04c:	683a      	ldr	r2, [r7, #0]
 800b04e:	68b9      	ldr	r1, [r7, #8]
 800b050:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b052:	f000 fb41 	bl	800b6d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b056:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b05e:	d112      	bne.n	800b086 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b064:	2b00      	cmp	r3, #0
 800b066:	d016      	beq.n	800b096 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06a:	3324      	adds	r3, #36	; 0x24
 800b06c:	4618      	mov	r0, r3
 800b06e:	f001 f84d 	bl	800c10c <xTaskRemoveFromEventList>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00e      	beq.n	800b096 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d00b      	beq.n	800b096 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2201      	movs	r2, #1
 800b082:	601a      	str	r2, [r3, #0]
 800b084:	e007      	b.n	800b096 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b086:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b08a:	3301      	adds	r3, #1
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	b25a      	sxtb	r2, r3
 800b090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b096:	2301      	movs	r3, #1
 800b098:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b09a:	e001      	b.n	800b0a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b09c:	2300      	movs	r3, #0
 800b09e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a2:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	f383 8811 	msr	BASEPRI, r3
}
 800b0aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3740      	adds	r7, #64	; 0x40
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b08e      	sub	sp, #56	; 0x38
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d10a      	bne.n	800b0e0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ce:	f383 8811 	msr	BASEPRI, r3
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	623b      	str	r3, [r7, #32]
}
 800b0dc:	bf00      	nop
 800b0de:	e7fe      	b.n	800b0de <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00a      	beq.n	800b0fe <xQueueGiveFromISR+0x48>
	__asm volatile
 800b0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ec:	f383 8811 	msr	BASEPRI, r3
 800b0f0:	f3bf 8f6f 	isb	sy
 800b0f4:	f3bf 8f4f 	dsb	sy
 800b0f8:	61fb      	str	r3, [r7, #28]
}
 800b0fa:	bf00      	nop
 800b0fc:	e7fe      	b.n	800b0fc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d103      	bne.n	800b10e <xQueueGiveFromISR+0x58>
 800b106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d101      	bne.n	800b112 <xQueueGiveFromISR+0x5c>
 800b10e:	2301      	movs	r3, #1
 800b110:	e000      	b.n	800b114 <xQueueGiveFromISR+0x5e>
 800b112:	2300      	movs	r3, #0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d10a      	bne.n	800b12e <xQueueGiveFromISR+0x78>
	__asm volatile
 800b118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11c:	f383 8811 	msr	BASEPRI, r3
 800b120:	f3bf 8f6f 	isb	sy
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	61bb      	str	r3, [r7, #24]
}
 800b12a:	bf00      	nop
 800b12c:	e7fe      	b.n	800b12c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b12e:	f7ff fc63 	bl	800a9f8 <vPortValidateInterruptPriority>
	__asm volatile
 800b132:	f3ef 8211 	mrs	r2, BASEPRI
 800b136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13a:	f383 8811 	msr	BASEPRI, r3
 800b13e:	f3bf 8f6f 	isb	sy
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	617a      	str	r2, [r7, #20]
 800b148:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b14a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b14c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b152:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d22b      	bcs.n	800b1b6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16a:	1c5a      	adds	r2, r3, #1
 800b16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b170:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b178:	d112      	bne.n	800b1a0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d016      	beq.n	800b1b0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b184:	3324      	adds	r3, #36	; 0x24
 800b186:	4618      	mov	r0, r3
 800b188:	f000 ffc0 	bl	800c10c <xTaskRemoveFromEventList>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00e      	beq.n	800b1b0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d00b      	beq.n	800b1b0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	2201      	movs	r2, #1
 800b19c:	601a      	str	r2, [r3, #0]
 800b19e:	e007      	b.n	800b1b0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	b25a      	sxtb	r2, r3
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	637b      	str	r3, [r7, #52]	; 0x34
 800b1b4:	e001      	b.n	800b1ba <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	637b      	str	r3, [r7, #52]	; 0x34
 800b1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f383 8811 	msr	BASEPRI, r3
}
 800b1c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3738      	adds	r7, #56	; 0x38
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b08c      	sub	sp, #48	; 0x30
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10a      	bne.n	800b200 <xQueueReceive+0x30>
	__asm volatile
 800b1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ee:	f383 8811 	msr	BASEPRI, r3
 800b1f2:	f3bf 8f6f 	isb	sy
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	623b      	str	r3, [r7, #32]
}
 800b1fc:	bf00      	nop
 800b1fe:	e7fe      	b.n	800b1fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d103      	bne.n	800b20e <xQueueReceive+0x3e>
 800b206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d101      	bne.n	800b212 <xQueueReceive+0x42>
 800b20e:	2301      	movs	r3, #1
 800b210:	e000      	b.n	800b214 <xQueueReceive+0x44>
 800b212:	2300      	movs	r3, #0
 800b214:	2b00      	cmp	r3, #0
 800b216:	d10a      	bne.n	800b22e <xQueueReceive+0x5e>
	__asm volatile
 800b218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21c:	f383 8811 	msr	BASEPRI, r3
 800b220:	f3bf 8f6f 	isb	sy
 800b224:	f3bf 8f4f 	dsb	sy
 800b228:	61fb      	str	r3, [r7, #28]
}
 800b22a:	bf00      	nop
 800b22c:	e7fe      	b.n	800b22c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b22e:	f001 f929 	bl	800c484 <xTaskGetSchedulerState>
 800b232:	4603      	mov	r3, r0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d102      	bne.n	800b23e <xQueueReceive+0x6e>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d101      	bne.n	800b242 <xQueueReceive+0x72>
 800b23e:	2301      	movs	r3, #1
 800b240:	e000      	b.n	800b244 <xQueueReceive+0x74>
 800b242:	2300      	movs	r3, #0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d10a      	bne.n	800b25e <xQueueReceive+0x8e>
	__asm volatile
 800b248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	61bb      	str	r3, [r7, #24]
}
 800b25a:	bf00      	nop
 800b25c:	e7fe      	b.n	800b25c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b25e:	f7ff fae9 	bl	800a834 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b266:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d01f      	beq.n	800b2ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b26e:	68b9      	ldr	r1, [r7, #8]
 800b270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b272:	f000 fa9b 	bl	800b7ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	1e5a      	subs	r2, r3, #1
 800b27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b280:	691b      	ldr	r3, [r3, #16]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00f      	beq.n	800b2a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b288:	3310      	adds	r3, #16
 800b28a:	4618      	mov	r0, r3
 800b28c:	f000 ff3e 	bl	800c10c <xTaskRemoveFromEventList>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d007      	beq.n	800b2a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b296:	4b3d      	ldr	r3, [pc, #244]	; (800b38c <xQueueReceive+0x1bc>)
 800b298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b29c:	601a      	str	r2, [r3, #0]
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b2a6:	f7ff faf5 	bl	800a894 <vPortExitCritical>
				return pdPASS;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e069      	b.n	800b382 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d103      	bne.n	800b2bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b2b4:	f7ff faee 	bl	800a894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	e062      	b.n	800b382 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d106      	bne.n	800b2d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b2c2:	f107 0310 	add.w	r3, r7, #16
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 ff82 	bl	800c1d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b2d0:	f7ff fae0 	bl	800a894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b2d4:	f000 fd38 	bl	800bd48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b2d8:	f7ff faac 	bl	800a834 <vPortEnterCritical>
 800b2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2e2:	b25b      	sxtb	r3, r3
 800b2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e8:	d103      	bne.n	800b2f2 <xQueueReceive+0x122>
 800b2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2f8:	b25b      	sxtb	r3, r3
 800b2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fe:	d103      	bne.n	800b308 <xQueueReceive+0x138>
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	2200      	movs	r2, #0
 800b304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b308:	f7ff fac4 	bl	800a894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b30c:	1d3a      	adds	r2, r7, #4
 800b30e:	f107 0310 	add.w	r3, r7, #16
 800b312:	4611      	mov	r1, r2
 800b314:	4618      	mov	r0, r3
 800b316:	f000 ff71 	bl	800c1fc <xTaskCheckForTimeOut>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d123      	bne.n	800b368 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b322:	f000 fabb 	bl	800b89c <prvIsQueueEmpty>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d017      	beq.n	800b35c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32e:	3324      	adds	r3, #36	; 0x24
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	4611      	mov	r1, r2
 800b334:	4618      	mov	r0, r3
 800b336:	f000 fec5 	bl	800c0c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b33a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b33c:	f000 fa5c 	bl	800b7f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b340:	f000 fd10 	bl	800bd64 <xTaskResumeAll>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d189      	bne.n	800b25e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b34a:	4b10      	ldr	r3, [pc, #64]	; (800b38c <xQueueReceive+0x1bc>)
 800b34c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b350:	601a      	str	r2, [r3, #0]
 800b352:	f3bf 8f4f 	dsb	sy
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	e780      	b.n	800b25e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b35c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b35e:	f000 fa4b 	bl	800b7f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b362:	f000 fcff 	bl	800bd64 <xTaskResumeAll>
 800b366:	e77a      	b.n	800b25e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b36a:	f000 fa45 	bl	800b7f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b36e:	f000 fcf9 	bl	800bd64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b374:	f000 fa92 	bl	800b89c <prvIsQueueEmpty>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f43f af6f 	beq.w	800b25e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b380:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b382:	4618      	mov	r0, r3
 800b384:	3730      	adds	r7, #48	; 0x30
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	e000ed04 	.word	0xe000ed04

0800b390 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b08e      	sub	sp, #56	; 0x38
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b39a:	2300      	movs	r3, #0
 800b39c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d10a      	bne.n	800b3c2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b0:	f383 8811 	msr	BASEPRI, r3
 800b3b4:	f3bf 8f6f 	isb	sy
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	623b      	str	r3, [r7, #32]
}
 800b3be:	bf00      	nop
 800b3c0:	e7fe      	b.n	800b3c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d00a      	beq.n	800b3e0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	61fb      	str	r3, [r7, #28]
}
 800b3dc:	bf00      	nop
 800b3de:	e7fe      	b.n	800b3de <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b3e0:	f001 f850 	bl	800c484 <xTaskGetSchedulerState>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d102      	bne.n	800b3f0 <xQueueSemaphoreTake+0x60>
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d101      	bne.n	800b3f4 <xQueueSemaphoreTake+0x64>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e000      	b.n	800b3f6 <xQueueSemaphoreTake+0x66>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d10a      	bne.n	800b410 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fe:	f383 8811 	msr	BASEPRI, r3
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	f3bf 8f4f 	dsb	sy
 800b40a:	61bb      	str	r3, [r7, #24]
}
 800b40c:	bf00      	nop
 800b40e:	e7fe      	b.n	800b40e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b410:	f7ff fa10 	bl	800a834 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b418:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d024      	beq.n	800b46a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b422:	1e5a      	subs	r2, r3, #1
 800b424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b426:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d104      	bne.n	800b43a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b430:	f001 f9d0 	bl	800c7d4 <pvTaskIncrementMutexHeldCount>
 800b434:	4602      	mov	r2, r0
 800b436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b438:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00f      	beq.n	800b462 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b444:	3310      	adds	r3, #16
 800b446:	4618      	mov	r0, r3
 800b448:	f000 fe60 	bl	800c10c <xTaskRemoveFromEventList>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d007      	beq.n	800b462 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b452:	4b54      	ldr	r3, [pc, #336]	; (800b5a4 <xQueueSemaphoreTake+0x214>)
 800b454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b458:	601a      	str	r2, [r3, #0]
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b462:	f7ff fa17 	bl	800a894 <vPortExitCritical>
				return pdPASS;
 800b466:	2301      	movs	r3, #1
 800b468:	e097      	b.n	800b59a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d111      	bne.n	800b494 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b472:	2b00      	cmp	r3, #0
 800b474:	d00a      	beq.n	800b48c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47a:	f383 8811 	msr	BASEPRI, r3
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	f3bf 8f4f 	dsb	sy
 800b486:	617b      	str	r3, [r7, #20]
}
 800b488:	bf00      	nop
 800b48a:	e7fe      	b.n	800b48a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b48c:	f7ff fa02 	bl	800a894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b490:	2300      	movs	r3, #0
 800b492:	e082      	b.n	800b59a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b496:	2b00      	cmp	r3, #0
 800b498:	d106      	bne.n	800b4a8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b49a:	f107 030c 	add.w	r3, r7, #12
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f000 fe96 	bl	800c1d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b4a8:	f7ff f9f4 	bl	800a894 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b4ac:	f000 fc4c 	bl	800bd48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b4b0:	f7ff f9c0 	bl	800a834 <vPortEnterCritical>
 800b4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4ba:	b25b      	sxtb	r3, r3
 800b4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c0:	d103      	bne.n	800b4ca <xQueueSemaphoreTake+0x13a>
 800b4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4d0:	b25b      	sxtb	r3, r3
 800b4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4d6:	d103      	bne.n	800b4e0 <xQueueSemaphoreTake+0x150>
 800b4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4e0:	f7ff f9d8 	bl	800a894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b4e4:	463a      	mov	r2, r7
 800b4e6:	f107 030c 	add.w	r3, r7, #12
 800b4ea:	4611      	mov	r1, r2
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f000 fe85 	bl	800c1fc <xTaskCheckForTimeOut>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d132      	bne.n	800b55e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b4f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4fa:	f000 f9cf 	bl	800b89c <prvIsQueueEmpty>
 800b4fe:	4603      	mov	r3, r0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d026      	beq.n	800b552 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d109      	bne.n	800b520 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b50c:	f7ff f992 	bl	800a834 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	4618      	mov	r0, r3
 800b516:	f000 ffd3 	bl	800c4c0 <xTaskPriorityInherit>
 800b51a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b51c:	f7ff f9ba 	bl	800a894 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b522:	3324      	adds	r3, #36	; 0x24
 800b524:	683a      	ldr	r2, [r7, #0]
 800b526:	4611      	mov	r1, r2
 800b528:	4618      	mov	r0, r3
 800b52a:	f000 fdcb 	bl	800c0c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b52e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b530:	f000 f962 	bl	800b7f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b534:	f000 fc16 	bl	800bd64 <xTaskResumeAll>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f47f af68 	bne.w	800b410 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b540:	4b18      	ldr	r3, [pc, #96]	; (800b5a4 <xQueueSemaphoreTake+0x214>)
 800b542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b546:	601a      	str	r2, [r3, #0]
 800b548:	f3bf 8f4f 	dsb	sy
 800b54c:	f3bf 8f6f 	isb	sy
 800b550:	e75e      	b.n	800b410 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b554:	f000 f950 	bl	800b7f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b558:	f000 fc04 	bl	800bd64 <xTaskResumeAll>
 800b55c:	e758      	b.n	800b410 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b55e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b560:	f000 f94a 	bl	800b7f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b564:	f000 fbfe 	bl	800bd64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b568:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b56a:	f000 f997 	bl	800b89c <prvIsQueueEmpty>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	f43f af4d 	beq.w	800b410 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00d      	beq.n	800b598 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b57c:	f7ff f95a 	bl	800a834 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b580:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b582:	f000 f891 	bl	800b6a8 <prvGetDisinheritPriorityAfterTimeout>
 800b586:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b58e:	4618      	mov	r0, r3
 800b590:	f001 f892 	bl	800c6b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b594:	f7ff f97e 	bl	800a894 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b598:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3738      	adds	r7, #56	; 0x38
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	e000ed04 	.word	0xe000ed04

0800b5a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b08e      	sub	sp, #56	; 0x38
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10a      	bne.n	800b5d4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	623b      	str	r3, [r7, #32]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d103      	bne.n	800b5e2 <xQueueReceiveFromISR+0x3a>
 800b5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d101      	bne.n	800b5e6 <xQueueReceiveFromISR+0x3e>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e000      	b.n	800b5e8 <xQueueReceiveFromISR+0x40>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d10a      	bne.n	800b602 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f0:	f383 8811 	msr	BASEPRI, r3
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	61fb      	str	r3, [r7, #28]
}
 800b5fe:	bf00      	nop
 800b600:	e7fe      	b.n	800b600 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b602:	f7ff f9f9 	bl	800a9f8 <vPortValidateInterruptPriority>
	__asm volatile
 800b606:	f3ef 8211 	mrs	r2, BASEPRI
 800b60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60e:	f383 8811 	msr	BASEPRI, r3
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	61ba      	str	r2, [r7, #24]
 800b61c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b61e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b620:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b626:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d02f      	beq.n	800b68e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b630:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b638:	68b9      	ldr	r1, [r7, #8]
 800b63a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b63c:	f000 f8b6 	bl	800b7ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b642:	1e5a      	subs	r2, r3, #1
 800b644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b646:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b648:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b650:	d112      	bne.n	800b678 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d016      	beq.n	800b688 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65c:	3310      	adds	r3, #16
 800b65e:	4618      	mov	r0, r3
 800b660:	f000 fd54 	bl	800c10c <xTaskRemoveFromEventList>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00e      	beq.n	800b688 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00b      	beq.n	800b688 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2201      	movs	r2, #1
 800b674:	601a      	str	r2, [r3, #0]
 800b676:	e007      	b.n	800b688 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b67c:	3301      	adds	r3, #1
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	b25a      	sxtb	r2, r3
 800b682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b688:	2301      	movs	r3, #1
 800b68a:	637b      	str	r3, [r7, #52]	; 0x34
 800b68c:	e001      	b.n	800b692 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b68e:	2300      	movs	r3, #0
 800b690:	637b      	str	r3, [r7, #52]	; 0x34
 800b692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b694:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	f383 8811 	msr	BASEPRI, r3
}
 800b69c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3738      	adds	r7, #56	; 0x38
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d006      	beq.n	800b6c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f1c3 0307 	rsb	r3, r3, #7
 800b6c2:	60fb      	str	r3, [r7, #12]
 800b6c4:	e001      	b.n	800b6ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
	}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3714      	adds	r7, #20
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b086      	sub	sp, #24
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d10d      	bne.n	800b712 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d14d      	bne.n	800b79a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	4618      	mov	r0, r3
 800b704:	f000 ff52 	bl	800c5ac <xTaskPriorityDisinherit>
 800b708:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2200      	movs	r2, #0
 800b70e:	609a      	str	r2, [r3, #8]
 800b710:	e043      	b.n	800b79a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d119      	bne.n	800b74c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6858      	ldr	r0, [r3, #4]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b720:	461a      	mov	r2, r3
 800b722:	68b9      	ldr	r1, [r7, #8]
 800b724:	f001 f8fa 	bl	800c91c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	685a      	ldr	r2, [r3, #4]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b730:	441a      	add	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	685a      	ldr	r2, [r3, #4]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d32b      	bcc.n	800b79a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	605a      	str	r2, [r3, #4]
 800b74a:	e026      	b.n	800b79a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	68d8      	ldr	r0, [r3, #12]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b754:	461a      	mov	r2, r3
 800b756:	68b9      	ldr	r1, [r7, #8]
 800b758:	f001 f8e0 	bl	800c91c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	68da      	ldr	r2, [r3, #12]
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b764:	425b      	negs	r3, r3
 800b766:	441a      	add	r2, r3
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	68da      	ldr	r2, [r3, #12]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	429a      	cmp	r2, r3
 800b776:	d207      	bcs.n	800b788 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	689a      	ldr	r2, [r3, #8]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b780:	425b      	negs	r3, r3
 800b782:	441a      	add	r2, r3
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b02      	cmp	r3, #2
 800b78c:	d105      	bne.n	800b79a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d002      	beq.n	800b79a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	3b01      	subs	r3, #1
 800b798:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	1c5a      	adds	r2, r3, #1
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b7a2:	697b      	ldr	r3, [r7, #20]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3718      	adds	r7, #24
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d018      	beq.n	800b7f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	68da      	ldr	r2, [r3, #12]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7c6:	441a      	add	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	68da      	ldr	r2, [r3, #12]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d303      	bcc.n	800b7e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	68d9      	ldr	r1, [r3, #12]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	6838      	ldr	r0, [r7, #0]
 800b7ec:	f001 f896 	bl	800c91c <memcpy>
	}
}
 800b7f0:	bf00      	nop
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b800:	f7ff f818 	bl	800a834 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b80a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b80c:	e011      	b.n	800b832 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b812:	2b00      	cmp	r3, #0
 800b814:	d012      	beq.n	800b83c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	3324      	adds	r3, #36	; 0x24
 800b81a:	4618      	mov	r0, r3
 800b81c:	f000 fc76 	bl	800c10c <xTaskRemoveFromEventList>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d001      	beq.n	800b82a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b826:	f000 fd4b 	bl	800c2c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b82a:	7bfb      	ldrb	r3, [r7, #15]
 800b82c:	3b01      	subs	r3, #1
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b836:	2b00      	cmp	r3, #0
 800b838:	dce9      	bgt.n	800b80e <prvUnlockQueue+0x16>
 800b83a:	e000      	b.n	800b83e <prvUnlockQueue+0x46>
					break;
 800b83c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	22ff      	movs	r2, #255	; 0xff
 800b842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b846:	f7ff f825 	bl	800a894 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b84a:	f7fe fff3 	bl	800a834 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b854:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b856:	e011      	b.n	800b87c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	691b      	ldr	r3, [r3, #16]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d012      	beq.n	800b886 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	3310      	adds	r3, #16
 800b864:	4618      	mov	r0, r3
 800b866:	f000 fc51 	bl	800c10c <xTaskRemoveFromEventList>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d001      	beq.n	800b874 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b870:	f000 fd26 	bl	800c2c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b874:	7bbb      	ldrb	r3, [r7, #14]
 800b876:	3b01      	subs	r3, #1
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b87c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b880:	2b00      	cmp	r3, #0
 800b882:	dce9      	bgt.n	800b858 <prvUnlockQueue+0x60>
 800b884:	e000      	b.n	800b888 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b886:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	22ff      	movs	r2, #255	; 0xff
 800b88c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b890:	f7ff f800 	bl	800a894 <vPortExitCritical>
}
 800b894:	bf00      	nop
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b8a4:	f7fe ffc6 	bl	800a834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d102      	bne.n	800b8b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	60fb      	str	r3, [r7, #12]
 800b8b4:	e001      	b.n	800b8ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b8ba:	f7fe ffeb 	bl	800a894 <vPortExitCritical>

	return xReturn;
 800b8be:	68fb      	ldr	r3, [r7, #12]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b8d0:	f7fe ffb0 	bl	800a834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d102      	bne.n	800b8e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	60fb      	str	r3, [r7, #12]
 800b8e4:	e001      	b.n	800b8ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b8ea:	f7fe ffd3 	bl	800a894 <vPortExitCritical>

	return xReturn;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3710      	adds	r7, #16
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b08e      	sub	sp, #56	; 0x38
 800b8fc:	af04      	add	r7, sp, #16
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
 800b904:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d10a      	bne.n	800b922 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b910:	f383 8811 	msr	BASEPRI, r3
 800b914:	f3bf 8f6f 	isb	sy
 800b918:	f3bf 8f4f 	dsb	sy
 800b91c:	623b      	str	r3, [r7, #32]
}
 800b91e:	bf00      	nop
 800b920:	e7fe      	b.n	800b920 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b924:	2b00      	cmp	r3, #0
 800b926:	d10a      	bne.n	800b93e <xTaskCreateStatic+0x46>
	__asm volatile
 800b928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92c:	f383 8811 	msr	BASEPRI, r3
 800b930:	f3bf 8f6f 	isb	sy
 800b934:	f3bf 8f4f 	dsb	sy
 800b938:	61fb      	str	r3, [r7, #28]
}
 800b93a:	bf00      	nop
 800b93c:	e7fe      	b.n	800b93c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b93e:	2354      	movs	r3, #84	; 0x54
 800b940:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	2b54      	cmp	r3, #84	; 0x54
 800b946:	d00a      	beq.n	800b95e <xTaskCreateStatic+0x66>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94c:	f383 8811 	msr	BASEPRI, r3
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	61bb      	str	r3, [r7, #24]
}
 800b95a:	bf00      	nop
 800b95c:	e7fe      	b.n	800b95c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b95e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b962:	2b00      	cmp	r3, #0
 800b964:	d01e      	beq.n	800b9a4 <xTaskCreateStatic+0xac>
 800b966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d01b      	beq.n	800b9a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b974:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b978:	2202      	movs	r2, #2
 800b97a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b97e:	2300      	movs	r3, #0
 800b980:	9303      	str	r3, [sp, #12]
 800b982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b984:	9302      	str	r3, [sp, #8]
 800b986:	f107 0314 	add.w	r3, r7, #20
 800b98a:	9301      	str	r3, [sp, #4]
 800b98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	68b9      	ldr	r1, [r7, #8]
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f000 f850 	bl	800ba3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b99c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b99e:	f000 f8d5 	bl	800bb4c <prvAddNewTaskToReadyList>
 800b9a2:	e001      	b.n	800b9a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b9a8:	697b      	ldr	r3, [r7, #20]
	}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3728      	adds	r7, #40	; 0x28
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b08c      	sub	sp, #48	; 0x30
 800b9b6:	af04      	add	r7, sp, #16
 800b9b8:	60f8      	str	r0, [r7, #12]
 800b9ba:	60b9      	str	r1, [r7, #8]
 800b9bc:	603b      	str	r3, [r7, #0]
 800b9be:	4613      	mov	r3, r2
 800b9c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b9c2:	88fb      	ldrh	r3, [r7, #6]
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7fe fb66 	bl	800a098 <pvPortMalloc>
 800b9cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00e      	beq.n	800b9f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b9d4:	2054      	movs	r0, #84	; 0x54
 800b9d6:	f7fe fb5f 	bl	800a098 <pvPortMalloc>
 800b9da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	697a      	ldr	r2, [r7, #20]
 800b9e6:	631a      	str	r2, [r3, #48]	; 0x30
 800b9e8:	e005      	b.n	800b9f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b9ea:	6978      	ldr	r0, [r7, #20]
 800b9ec:	f7fe fc20 	bl	800a230 <vPortFree>
 800b9f0:	e001      	b.n	800b9f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d017      	beq.n	800ba2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ba04:	88fa      	ldrh	r2, [r7, #6]
 800ba06:	2300      	movs	r3, #0
 800ba08:	9303      	str	r3, [sp, #12]
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	9302      	str	r3, [sp, #8]
 800ba0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba10:	9301      	str	r3, [sp, #4]
 800ba12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba14:	9300      	str	r3, [sp, #0]
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	68b9      	ldr	r1, [r7, #8]
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f000 f80e 	bl	800ba3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba20:	69f8      	ldr	r0, [r7, #28]
 800ba22:	f000 f893 	bl	800bb4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ba26:	2301      	movs	r3, #1
 800ba28:	61bb      	str	r3, [r7, #24]
 800ba2a:	e002      	b.n	800ba32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ba2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ba32:	69bb      	ldr	r3, [r7, #24]
	}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3720      	adds	r7, #32
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b088      	sub	sp, #32
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
 800ba48:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba4e:	6879      	ldr	r1, [r7, #4]
 800ba50:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ba54:	440b      	add	r3, r1
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	4413      	add	r3, r2
 800ba5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	f023 0307 	bic.w	r3, r3, #7
 800ba62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	f003 0307 	and.w	r3, r3, #7
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00a      	beq.n	800ba84 <prvInitialiseNewTask+0x48>
	__asm volatile
 800ba6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba72:	f383 8811 	msr	BASEPRI, r3
 800ba76:	f3bf 8f6f 	isb	sy
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	617b      	str	r3, [r7, #20]
}
 800ba80:	bf00      	nop
 800ba82:	e7fe      	b.n	800ba82 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d01f      	beq.n	800baca <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	61fb      	str	r3, [r7, #28]
 800ba8e:	e012      	b.n	800bab6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	4413      	add	r3, r2
 800ba96:	7819      	ldrb	r1, [r3, #0]
 800ba98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba9a:	69fb      	ldr	r3, [r7, #28]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	3334      	adds	r3, #52	; 0x34
 800baa0:	460a      	mov	r2, r1
 800baa2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800baa4:	68ba      	ldr	r2, [r7, #8]
 800baa6:	69fb      	ldr	r3, [r7, #28]
 800baa8:	4413      	add	r3, r2
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d006      	beq.n	800babe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	3301      	adds	r3, #1
 800bab4:	61fb      	str	r3, [r7, #28]
 800bab6:	69fb      	ldr	r3, [r7, #28]
 800bab8:	2b0f      	cmp	r3, #15
 800baba:	d9e9      	bls.n	800ba90 <prvInitialiseNewTask+0x54>
 800babc:	e000      	b.n	800bac0 <prvInitialiseNewTask+0x84>
			{
				break;
 800babe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac2:	2200      	movs	r2, #0
 800bac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bac8:	e003      	b.n	800bad2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800baca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bacc:	2200      	movs	r2, #0
 800bace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad4:	2b06      	cmp	r3, #6
 800bad6:	d901      	bls.n	800badc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bad8:	2306      	movs	r3, #6
 800bada:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800badc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bae0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bae6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baea:	2200      	movs	r2, #0
 800baec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800baee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf0:	3304      	adds	r3, #4
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7fe fcda 	bl	800a4ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800baf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafa:	3318      	adds	r3, #24
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7fe fcd5 	bl	800a4ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0a:	f1c3 0207 	rsb	r2, r3, #7
 800bb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb20:	2200      	movs	r2, #0
 800bb22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb26:	683a      	ldr	r2, [r7, #0]
 800bb28:	68f9      	ldr	r1, [r7, #12]
 800bb2a:	69b8      	ldr	r0, [r7, #24]
 800bb2c:	f7fe fd52 	bl	800a5d4 <pxPortInitialiseStack>
 800bb30:	4602      	mov	r2, r0
 800bb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb42:	bf00      	nop
 800bb44:	3720      	adds	r7, #32
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
	...

0800bb4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bb54:	f7fe fe6e 	bl	800a834 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bb58:	4b2a      	ldr	r3, [pc, #168]	; (800bc04 <prvAddNewTaskToReadyList+0xb8>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	4a29      	ldr	r2, [pc, #164]	; (800bc04 <prvAddNewTaskToReadyList+0xb8>)
 800bb60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bb62:	4b29      	ldr	r3, [pc, #164]	; (800bc08 <prvAddNewTaskToReadyList+0xbc>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d109      	bne.n	800bb7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bb6a:	4a27      	ldr	r2, [pc, #156]	; (800bc08 <prvAddNewTaskToReadyList+0xbc>)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bb70:	4b24      	ldr	r3, [pc, #144]	; (800bc04 <prvAddNewTaskToReadyList+0xb8>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d110      	bne.n	800bb9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bb78:	f000 fbc6 	bl	800c308 <prvInitialiseTaskLists>
 800bb7c:	e00d      	b.n	800bb9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bb7e:	4b23      	ldr	r3, [pc, #140]	; (800bc0c <prvAddNewTaskToReadyList+0xc0>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d109      	bne.n	800bb9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bb86:	4b20      	ldr	r3, [pc, #128]	; (800bc08 <prvAddNewTaskToReadyList+0xbc>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d802      	bhi.n	800bb9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb94:	4a1c      	ldr	r2, [pc, #112]	; (800bc08 <prvAddNewTaskToReadyList+0xbc>)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb9a:	4b1d      	ldr	r3, [pc, #116]	; (800bc10 <prvAddNewTaskToReadyList+0xc4>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	4a1b      	ldr	r2, [pc, #108]	; (800bc10 <prvAddNewTaskToReadyList+0xc4>)
 800bba2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba8:	2201      	movs	r2, #1
 800bbaa:	409a      	lsls	r2, r3
 800bbac:	4b19      	ldr	r3, [pc, #100]	; (800bc14 <prvAddNewTaskToReadyList+0xc8>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	4a18      	ldr	r2, [pc, #96]	; (800bc14 <prvAddNewTaskToReadyList+0xc8>)
 800bbb4:	6013      	str	r3, [r2, #0]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbba:	4613      	mov	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	4413      	add	r3, r2
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	4a15      	ldr	r2, [pc, #84]	; (800bc18 <prvAddNewTaskToReadyList+0xcc>)
 800bbc4:	441a      	add	r2, r3
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	3304      	adds	r3, #4
 800bbca:	4619      	mov	r1, r3
 800bbcc:	4610      	mov	r0, r2
 800bbce:	f7fe fc7a 	bl	800a4c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bbd2:	f7fe fe5f 	bl	800a894 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bbd6:	4b0d      	ldr	r3, [pc, #52]	; (800bc0c <prvAddNewTaskToReadyList+0xc0>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00e      	beq.n	800bbfc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bbde:	4b0a      	ldr	r3, [pc, #40]	; (800bc08 <prvAddNewTaskToReadyList+0xbc>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d207      	bcs.n	800bbfc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bbec:	4b0b      	ldr	r3, [pc, #44]	; (800bc1c <prvAddNewTaskToReadyList+0xd0>)
 800bbee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbf2:	601a      	str	r2, [r3, #0]
 800bbf4:	f3bf 8f4f 	dsb	sy
 800bbf8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbfc:	bf00      	nop
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	24004694 	.word	0x24004694
 800bc08:	24004594 	.word	0x24004594
 800bc0c:	240046a0 	.word	0x240046a0
 800bc10:	240046b0 	.word	0x240046b0
 800bc14:	2400469c 	.word	0x2400469c
 800bc18:	24004598 	.word	0x24004598
 800bc1c:	e000ed04 	.word	0xe000ed04

0800bc20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d017      	beq.n	800bc62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bc32:	4b13      	ldr	r3, [pc, #76]	; (800bc80 <vTaskDelay+0x60>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00a      	beq.n	800bc50 <vTaskDelay+0x30>
	__asm volatile
 800bc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3e:	f383 8811 	msr	BASEPRI, r3
 800bc42:	f3bf 8f6f 	isb	sy
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	60bb      	str	r3, [r7, #8]
}
 800bc4c:	bf00      	nop
 800bc4e:	e7fe      	b.n	800bc4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bc50:	f000 f87a 	bl	800bd48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bc54:	2100      	movs	r1, #0
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fdd0 	bl	800c7fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bc5c:	f000 f882 	bl	800bd64 <xTaskResumeAll>
 800bc60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d107      	bne.n	800bc78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bc68:	4b06      	ldr	r3, [pc, #24]	; (800bc84 <vTaskDelay+0x64>)
 800bc6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc6e:	601a      	str	r2, [r3, #0]
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc78:	bf00      	nop
 800bc7a:	3710      	adds	r7, #16
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	240046bc 	.word	0x240046bc
 800bc84:	e000ed04 	.word	0xe000ed04

0800bc88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b08a      	sub	sp, #40	; 0x28
 800bc8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bc92:	2300      	movs	r3, #0
 800bc94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc96:	463a      	mov	r2, r7
 800bc98:	1d39      	adds	r1, r7, #4
 800bc9a:	f107 0308 	add.w	r3, r7, #8
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7f5 fe86 	bl	80019b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bca4:	6839      	ldr	r1, [r7, #0]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	68ba      	ldr	r2, [r7, #8]
 800bcaa:	9202      	str	r2, [sp, #8]
 800bcac:	9301      	str	r3, [sp, #4]
 800bcae:	2300      	movs	r3, #0
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	460a      	mov	r2, r1
 800bcb6:	491e      	ldr	r1, [pc, #120]	; (800bd30 <vTaskStartScheduler+0xa8>)
 800bcb8:	481e      	ldr	r0, [pc, #120]	; (800bd34 <vTaskStartScheduler+0xac>)
 800bcba:	f7ff fe1d 	bl	800b8f8 <xTaskCreateStatic>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	4a1d      	ldr	r2, [pc, #116]	; (800bd38 <vTaskStartScheduler+0xb0>)
 800bcc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bcc4:	4b1c      	ldr	r3, [pc, #112]	; (800bd38 <vTaskStartScheduler+0xb0>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bccc:	2301      	movs	r3, #1
 800bcce:	617b      	str	r3, [r7, #20]
 800bcd0:	e001      	b.n	800bcd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d116      	bne.n	800bd0a <vTaskStartScheduler+0x82>
	__asm volatile
 800bcdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce0:	f383 8811 	msr	BASEPRI, r3
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	613b      	str	r3, [r7, #16]
}
 800bcee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bcf0:	4b12      	ldr	r3, [pc, #72]	; (800bd3c <vTaskStartScheduler+0xb4>)
 800bcf2:	f04f 32ff 	mov.w	r2, #4294967295
 800bcf6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bcf8:	4b11      	ldr	r3, [pc, #68]	; (800bd40 <vTaskStartScheduler+0xb8>)
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bcfe:	4b11      	ldr	r3, [pc, #68]	; (800bd44 <vTaskStartScheduler+0xbc>)
 800bd00:	2200      	movs	r2, #0
 800bd02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bd04:	f7fe fcf4 	bl	800a6f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bd08:	e00e      	b.n	800bd28 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd10:	d10a      	bne.n	800bd28 <vTaskStartScheduler+0xa0>
	__asm volatile
 800bd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd16:	f383 8811 	msr	BASEPRI, r3
 800bd1a:	f3bf 8f6f 	isb	sy
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	60fb      	str	r3, [r7, #12]
}
 800bd24:	bf00      	nop
 800bd26:	e7fe      	b.n	800bd26 <vTaskStartScheduler+0x9e>
}
 800bd28:	bf00      	nop
 800bd2a:	3718      	adds	r7, #24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	0800fe90 	.word	0x0800fe90
 800bd34:	0800c2d9 	.word	0x0800c2d9
 800bd38:	240046b8 	.word	0x240046b8
 800bd3c:	240046b4 	.word	0x240046b4
 800bd40:	240046a0 	.word	0x240046a0
 800bd44:	24004698 	.word	0x24004698

0800bd48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bd48:	b480      	push	{r7}
 800bd4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bd4c:	4b04      	ldr	r3, [pc, #16]	; (800bd60 <vTaskSuspendAll+0x18>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	3301      	adds	r3, #1
 800bd52:	4a03      	ldr	r2, [pc, #12]	; (800bd60 <vTaskSuspendAll+0x18>)
 800bd54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bd56:	bf00      	nop
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	240046bc 	.word	0x240046bc

0800bd64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bd72:	4b41      	ldr	r3, [pc, #260]	; (800be78 <xTaskResumeAll+0x114>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10a      	bne.n	800bd90 <xTaskResumeAll+0x2c>
	__asm volatile
 800bd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	603b      	str	r3, [r7, #0]
}
 800bd8c:	bf00      	nop
 800bd8e:	e7fe      	b.n	800bd8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bd90:	f7fe fd50 	bl	800a834 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bd94:	4b38      	ldr	r3, [pc, #224]	; (800be78 <xTaskResumeAll+0x114>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	4a37      	ldr	r2, [pc, #220]	; (800be78 <xTaskResumeAll+0x114>)
 800bd9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd9e:	4b36      	ldr	r3, [pc, #216]	; (800be78 <xTaskResumeAll+0x114>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d161      	bne.n	800be6a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bda6:	4b35      	ldr	r3, [pc, #212]	; (800be7c <xTaskResumeAll+0x118>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d05d      	beq.n	800be6a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bdae:	e02e      	b.n	800be0e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdb0:	4b33      	ldr	r3, [pc, #204]	; (800be80 <xTaskResumeAll+0x11c>)
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	3318      	adds	r3, #24
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7fe fbdf 	bl	800a580 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	3304      	adds	r3, #4
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7fe fbda 	bl	800a580 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	409a      	lsls	r2, r3
 800bdd4:	4b2b      	ldr	r3, [pc, #172]	; (800be84 <xTaskResumeAll+0x120>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	4a2a      	ldr	r2, [pc, #168]	; (800be84 <xTaskResumeAll+0x120>)
 800bddc:	6013      	str	r3, [r2, #0]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde2:	4613      	mov	r3, r2
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	4413      	add	r3, r2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	4a27      	ldr	r2, [pc, #156]	; (800be88 <xTaskResumeAll+0x124>)
 800bdec:	441a      	add	r2, r3
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	f7fe fb66 	bl	800a4c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdfe:	4b23      	ldr	r3, [pc, #140]	; (800be8c <xTaskResumeAll+0x128>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be04:	429a      	cmp	r2, r3
 800be06:	d302      	bcc.n	800be0e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800be08:	4b21      	ldr	r3, [pc, #132]	; (800be90 <xTaskResumeAll+0x12c>)
 800be0a:	2201      	movs	r2, #1
 800be0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be0e:	4b1c      	ldr	r3, [pc, #112]	; (800be80 <xTaskResumeAll+0x11c>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d1cc      	bne.n	800bdb0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d001      	beq.n	800be20 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800be1c:	f000 fb12 	bl	800c444 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800be20:	4b1c      	ldr	r3, [pc, #112]	; (800be94 <xTaskResumeAll+0x130>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d010      	beq.n	800be4e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800be2c:	f000 f836 	bl	800be9c <xTaskIncrementTick>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d002      	beq.n	800be3c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800be36:	4b16      	ldr	r3, [pc, #88]	; (800be90 <xTaskResumeAll+0x12c>)
 800be38:	2201      	movs	r2, #1
 800be3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	3b01      	subs	r3, #1
 800be40:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1f1      	bne.n	800be2c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800be48:	4b12      	ldr	r3, [pc, #72]	; (800be94 <xTaskResumeAll+0x130>)
 800be4a:	2200      	movs	r2, #0
 800be4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800be4e:	4b10      	ldr	r3, [pc, #64]	; (800be90 <xTaskResumeAll+0x12c>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d009      	beq.n	800be6a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800be56:	2301      	movs	r3, #1
 800be58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800be5a:	4b0f      	ldr	r3, [pc, #60]	; (800be98 <xTaskResumeAll+0x134>)
 800be5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be60:	601a      	str	r2, [r3, #0]
 800be62:	f3bf 8f4f 	dsb	sy
 800be66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be6a:	f7fe fd13 	bl	800a894 <vPortExitCritical>

	return xAlreadyYielded;
 800be6e:	68bb      	ldr	r3, [r7, #8]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3710      	adds	r7, #16
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	240046bc 	.word	0x240046bc
 800be7c:	24004694 	.word	0x24004694
 800be80:	24004654 	.word	0x24004654
 800be84:	2400469c 	.word	0x2400469c
 800be88:	24004598 	.word	0x24004598
 800be8c:	24004594 	.word	0x24004594
 800be90:	240046a8 	.word	0x240046a8
 800be94:	240046a4 	.word	0x240046a4
 800be98:	e000ed04 	.word	0xe000ed04

0800be9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b086      	sub	sp, #24
 800bea0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bea2:	2300      	movs	r3, #0
 800bea4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bea6:	4b4e      	ldr	r3, [pc, #312]	; (800bfe0 <xTaskIncrementTick+0x144>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f040 808e 	bne.w	800bfcc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800beb0:	4b4c      	ldr	r3, [pc, #304]	; (800bfe4 <xTaskIncrementTick+0x148>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	3301      	adds	r3, #1
 800beb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800beb8:	4a4a      	ldr	r2, [pc, #296]	; (800bfe4 <xTaskIncrementTick+0x148>)
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d120      	bne.n	800bf06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bec4:	4b48      	ldr	r3, [pc, #288]	; (800bfe8 <xTaskIncrementTick+0x14c>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00a      	beq.n	800bee4 <xTaskIncrementTick+0x48>
	__asm volatile
 800bece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	603b      	str	r3, [r7, #0]
}
 800bee0:	bf00      	nop
 800bee2:	e7fe      	b.n	800bee2 <xTaskIncrementTick+0x46>
 800bee4:	4b40      	ldr	r3, [pc, #256]	; (800bfe8 <xTaskIncrementTick+0x14c>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	60fb      	str	r3, [r7, #12]
 800beea:	4b40      	ldr	r3, [pc, #256]	; (800bfec <xTaskIncrementTick+0x150>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4a3e      	ldr	r2, [pc, #248]	; (800bfe8 <xTaskIncrementTick+0x14c>)
 800bef0:	6013      	str	r3, [r2, #0]
 800bef2:	4a3e      	ldr	r2, [pc, #248]	; (800bfec <xTaskIncrementTick+0x150>)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	6013      	str	r3, [r2, #0]
 800bef8:	4b3d      	ldr	r3, [pc, #244]	; (800bff0 <xTaskIncrementTick+0x154>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	3301      	adds	r3, #1
 800befe:	4a3c      	ldr	r2, [pc, #240]	; (800bff0 <xTaskIncrementTick+0x154>)
 800bf00:	6013      	str	r3, [r2, #0]
 800bf02:	f000 fa9f 	bl	800c444 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bf06:	4b3b      	ldr	r3, [pc, #236]	; (800bff4 <xTaskIncrementTick+0x158>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	693a      	ldr	r2, [r7, #16]
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d348      	bcc.n	800bfa2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf10:	4b35      	ldr	r3, [pc, #212]	; (800bfe8 <xTaskIncrementTick+0x14c>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d104      	bne.n	800bf24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf1a:	4b36      	ldr	r3, [pc, #216]	; (800bff4 <xTaskIncrementTick+0x158>)
 800bf1c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf20:	601a      	str	r2, [r3, #0]
					break;
 800bf22:	e03e      	b.n	800bfa2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf24:	4b30      	ldr	r3, [pc, #192]	; (800bfe8 <xTaskIncrementTick+0x14c>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf34:	693a      	ldr	r2, [r7, #16]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d203      	bcs.n	800bf44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bf3c:	4a2d      	ldr	r2, [pc, #180]	; (800bff4 <xTaskIncrementTick+0x158>)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bf42:	e02e      	b.n	800bfa2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	3304      	adds	r3, #4
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7fe fb19 	bl	800a580 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d004      	beq.n	800bf60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	3318      	adds	r3, #24
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fe fb10 	bl	800a580 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf64:	2201      	movs	r2, #1
 800bf66:	409a      	lsls	r2, r3
 800bf68:	4b23      	ldr	r3, [pc, #140]	; (800bff8 <xTaskIncrementTick+0x15c>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	4a22      	ldr	r2, [pc, #136]	; (800bff8 <xTaskIncrementTick+0x15c>)
 800bf70:	6013      	str	r3, [r2, #0]
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf76:	4613      	mov	r3, r2
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	4413      	add	r3, r2
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	4a1f      	ldr	r2, [pc, #124]	; (800bffc <xTaskIncrementTick+0x160>)
 800bf80:	441a      	add	r2, r3
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	3304      	adds	r3, #4
 800bf86:	4619      	mov	r1, r3
 800bf88:	4610      	mov	r0, r2
 800bf8a:	f7fe fa9c 	bl	800a4c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf92:	4b1b      	ldr	r3, [pc, #108]	; (800c000 <xTaskIncrementTick+0x164>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d3b9      	bcc.n	800bf10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfa0:	e7b6      	b.n	800bf10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bfa2:	4b17      	ldr	r3, [pc, #92]	; (800c000 <xTaskIncrementTick+0x164>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfa8:	4914      	ldr	r1, [pc, #80]	; (800bffc <xTaskIncrementTick+0x160>)
 800bfaa:	4613      	mov	r3, r2
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	4413      	add	r3, r2
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	440b      	add	r3, r1
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d901      	bls.n	800bfbe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bfbe:	4b11      	ldr	r3, [pc, #68]	; (800c004 <xTaskIncrementTick+0x168>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d007      	beq.n	800bfd6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	617b      	str	r3, [r7, #20]
 800bfca:	e004      	b.n	800bfd6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bfcc:	4b0e      	ldr	r3, [pc, #56]	; (800c008 <xTaskIncrementTick+0x16c>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	4a0d      	ldr	r2, [pc, #52]	; (800c008 <xTaskIncrementTick+0x16c>)
 800bfd4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bfd6:	697b      	ldr	r3, [r7, #20]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3718      	adds	r7, #24
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	240046bc 	.word	0x240046bc
 800bfe4:	24004698 	.word	0x24004698
 800bfe8:	2400464c 	.word	0x2400464c
 800bfec:	24004650 	.word	0x24004650
 800bff0:	240046ac 	.word	0x240046ac
 800bff4:	240046b4 	.word	0x240046b4
 800bff8:	2400469c 	.word	0x2400469c
 800bffc:	24004598 	.word	0x24004598
 800c000:	24004594 	.word	0x24004594
 800c004:	240046a8 	.word	0x240046a8
 800c008:	240046a4 	.word	0x240046a4

0800c00c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c00c:	b480      	push	{r7}
 800c00e:	b087      	sub	sp, #28
 800c010:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c012:	4b27      	ldr	r3, [pc, #156]	; (800c0b0 <vTaskSwitchContext+0xa4>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d003      	beq.n	800c022 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c01a:	4b26      	ldr	r3, [pc, #152]	; (800c0b4 <vTaskSwitchContext+0xa8>)
 800c01c:	2201      	movs	r2, #1
 800c01e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c020:	e03f      	b.n	800c0a2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c022:	4b24      	ldr	r3, [pc, #144]	; (800c0b4 <vTaskSwitchContext+0xa8>)
 800c024:	2200      	movs	r2, #0
 800c026:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c028:	4b23      	ldr	r3, [pc, #140]	; (800c0b8 <vTaskSwitchContext+0xac>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	fab3 f383 	clz	r3, r3
 800c034:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c036:	7afb      	ldrb	r3, [r7, #11]
 800c038:	f1c3 031f 	rsb	r3, r3, #31
 800c03c:	617b      	str	r3, [r7, #20]
 800c03e:	491f      	ldr	r1, [pc, #124]	; (800c0bc <vTaskSwitchContext+0xb0>)
 800c040:	697a      	ldr	r2, [r7, #20]
 800c042:	4613      	mov	r3, r2
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	4413      	add	r3, r2
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	440b      	add	r3, r1
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d10a      	bne.n	800c068 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c056:	f383 8811 	msr	BASEPRI, r3
 800c05a:	f3bf 8f6f 	isb	sy
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	607b      	str	r3, [r7, #4]
}
 800c064:	bf00      	nop
 800c066:	e7fe      	b.n	800c066 <vTaskSwitchContext+0x5a>
 800c068:	697a      	ldr	r2, [r7, #20]
 800c06a:	4613      	mov	r3, r2
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	4413      	add	r3, r2
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	4a12      	ldr	r2, [pc, #72]	; (800c0bc <vTaskSwitchContext+0xb0>)
 800c074:	4413      	add	r3, r2
 800c076:	613b      	str	r3, [r7, #16]
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	685a      	ldr	r2, [r3, #4]
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	605a      	str	r2, [r3, #4]
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	685a      	ldr	r2, [r3, #4]
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	3308      	adds	r3, #8
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d104      	bne.n	800c098 <vTaskSwitchContext+0x8c>
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	685a      	ldr	r2, [r3, #4]
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	605a      	str	r2, [r3, #4]
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	68db      	ldr	r3, [r3, #12]
 800c09e:	4a08      	ldr	r2, [pc, #32]	; (800c0c0 <vTaskSwitchContext+0xb4>)
 800c0a0:	6013      	str	r3, [r2, #0]
}
 800c0a2:	bf00      	nop
 800c0a4:	371c      	adds	r7, #28
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	240046bc 	.word	0x240046bc
 800c0b4:	240046a8 	.word	0x240046a8
 800c0b8:	2400469c 	.word	0x2400469c
 800c0bc:	24004598 	.word	0x24004598
 800c0c0:	24004594 	.word	0x24004594

0800c0c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d10a      	bne.n	800c0ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d8:	f383 8811 	msr	BASEPRI, r3
 800c0dc:	f3bf 8f6f 	isb	sy
 800c0e0:	f3bf 8f4f 	dsb	sy
 800c0e4:	60fb      	str	r3, [r7, #12]
}
 800c0e6:	bf00      	nop
 800c0e8:	e7fe      	b.n	800c0e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0ea:	4b07      	ldr	r3, [pc, #28]	; (800c108 <vTaskPlaceOnEventList+0x44>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	3318      	adds	r3, #24
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7fe fa0b 	bl	800a50e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c0f8:	2101      	movs	r1, #1
 800c0fa:	6838      	ldr	r0, [r7, #0]
 800c0fc:	f000 fb7e 	bl	800c7fc <prvAddCurrentTaskToDelayedList>
}
 800c100:	bf00      	nop
 800c102:	3710      	adds	r7, #16
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	24004594 	.word	0x24004594

0800c10c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b086      	sub	sp, #24
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	68db      	ldr	r3, [r3, #12]
 800c11a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10a      	bne.n	800c138 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	f383 8811 	msr	BASEPRI, r3
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	60fb      	str	r3, [r7, #12]
}
 800c134:	bf00      	nop
 800c136:	e7fe      	b.n	800c136 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	3318      	adds	r3, #24
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7fe fa1f 	bl	800a580 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c142:	4b1d      	ldr	r3, [pc, #116]	; (800c1b8 <xTaskRemoveFromEventList+0xac>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d11c      	bne.n	800c184 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	3304      	adds	r3, #4
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fe fa16 	bl	800a580 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c158:	2201      	movs	r2, #1
 800c15a:	409a      	lsls	r2, r3
 800c15c:	4b17      	ldr	r3, [pc, #92]	; (800c1bc <xTaskRemoveFromEventList+0xb0>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4313      	orrs	r3, r2
 800c162:	4a16      	ldr	r2, [pc, #88]	; (800c1bc <xTaskRemoveFromEventList+0xb0>)
 800c164:	6013      	str	r3, [r2, #0]
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c16a:	4613      	mov	r3, r2
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	4413      	add	r3, r2
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	4a13      	ldr	r2, [pc, #76]	; (800c1c0 <xTaskRemoveFromEventList+0xb4>)
 800c174:	441a      	add	r2, r3
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	3304      	adds	r3, #4
 800c17a:	4619      	mov	r1, r3
 800c17c:	4610      	mov	r0, r2
 800c17e:	f7fe f9a2 	bl	800a4c6 <vListInsertEnd>
 800c182:	e005      	b.n	800c190 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	3318      	adds	r3, #24
 800c188:	4619      	mov	r1, r3
 800c18a:	480e      	ldr	r0, [pc, #56]	; (800c1c4 <xTaskRemoveFromEventList+0xb8>)
 800c18c:	f7fe f99b 	bl	800a4c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c194:	4b0c      	ldr	r3, [pc, #48]	; (800c1c8 <xTaskRemoveFromEventList+0xbc>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d905      	bls.n	800c1aa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c1a2:	4b0a      	ldr	r3, [pc, #40]	; (800c1cc <xTaskRemoveFromEventList+0xc0>)
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	601a      	str	r2, [r3, #0]
 800c1a8:	e001      	b.n	800c1ae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c1ae:	697b      	ldr	r3, [r7, #20]
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3718      	adds	r7, #24
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	240046bc 	.word	0x240046bc
 800c1bc:	2400469c 	.word	0x2400469c
 800c1c0:	24004598 	.word	0x24004598
 800c1c4:	24004654 	.word	0x24004654
 800c1c8:	24004594 	.word	0x24004594
 800c1cc:	240046a8 	.word	0x240046a8

0800c1d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c1d8:	4b06      	ldr	r3, [pc, #24]	; (800c1f4 <vTaskInternalSetTimeOutState+0x24>)
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c1e0:	4b05      	ldr	r3, [pc, #20]	; (800c1f8 <vTaskInternalSetTimeOutState+0x28>)
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	605a      	str	r2, [r3, #4]
}
 800c1e8:	bf00      	nop
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr
 800c1f4:	240046ac 	.word	0x240046ac
 800c1f8:	24004698 	.word	0x24004698

0800c1fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b088      	sub	sp, #32
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10a      	bne.n	800c222 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c210:	f383 8811 	msr	BASEPRI, r3
 800c214:	f3bf 8f6f 	isb	sy
 800c218:	f3bf 8f4f 	dsb	sy
 800c21c:	613b      	str	r3, [r7, #16]
}
 800c21e:	bf00      	nop
 800c220:	e7fe      	b.n	800c220 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10a      	bne.n	800c23e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22c:	f383 8811 	msr	BASEPRI, r3
 800c230:	f3bf 8f6f 	isb	sy
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	60fb      	str	r3, [r7, #12]
}
 800c23a:	bf00      	nop
 800c23c:	e7fe      	b.n	800c23c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c23e:	f7fe faf9 	bl	800a834 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c242:	4b1d      	ldr	r3, [pc, #116]	; (800c2b8 <xTaskCheckForTimeOut+0xbc>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	69ba      	ldr	r2, [r7, #24]
 800c24e:	1ad3      	subs	r3, r2, r3
 800c250:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c25a:	d102      	bne.n	800c262 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c25c:	2300      	movs	r3, #0
 800c25e:	61fb      	str	r3, [r7, #28]
 800c260:	e023      	b.n	800c2aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	4b15      	ldr	r3, [pc, #84]	; (800c2bc <xTaskCheckForTimeOut+0xc0>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d007      	beq.n	800c27e <xTaskCheckForTimeOut+0x82>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	69ba      	ldr	r2, [r7, #24]
 800c274:	429a      	cmp	r2, r3
 800c276:	d302      	bcc.n	800c27e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c278:	2301      	movs	r3, #1
 800c27a:	61fb      	str	r3, [r7, #28]
 800c27c:	e015      	b.n	800c2aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	697a      	ldr	r2, [r7, #20]
 800c284:	429a      	cmp	r2, r3
 800c286:	d20b      	bcs.n	800c2a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	1ad2      	subs	r2, r2, r3
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7ff ff9b 	bl	800c1d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c29a:	2300      	movs	r3, #0
 800c29c:	61fb      	str	r3, [r7, #28]
 800c29e:	e004      	b.n	800c2aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c2aa:	f7fe faf3 	bl	800a894 <vPortExitCritical>

	return xReturn;
 800c2ae:	69fb      	ldr	r3, [r7, #28]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3720      	adds	r7, #32
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	24004698 	.word	0x24004698
 800c2bc:	240046ac 	.word	0x240046ac

0800c2c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c2c4:	4b03      	ldr	r3, [pc, #12]	; (800c2d4 <vTaskMissedYield+0x14>)
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	601a      	str	r2, [r3, #0]
}
 800c2ca:	bf00      	nop
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr
 800c2d4:	240046a8 	.word	0x240046a8

0800c2d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c2e0:	f000 f852 	bl	800c388 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c2e4:	4b06      	ldr	r3, [pc, #24]	; (800c300 <prvIdleTask+0x28>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d9f9      	bls.n	800c2e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c2ec:	4b05      	ldr	r3, [pc, #20]	; (800c304 <prvIdleTask+0x2c>)
 800c2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2f2:	601a      	str	r2, [r3, #0]
 800c2f4:	f3bf 8f4f 	dsb	sy
 800c2f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c2fc:	e7f0      	b.n	800c2e0 <prvIdleTask+0x8>
 800c2fe:	bf00      	nop
 800c300:	24004598 	.word	0x24004598
 800c304:	e000ed04 	.word	0xe000ed04

0800c308 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c30e:	2300      	movs	r3, #0
 800c310:	607b      	str	r3, [r7, #4]
 800c312:	e00c      	b.n	800c32e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	4613      	mov	r3, r2
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	4413      	add	r3, r2
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	4a12      	ldr	r2, [pc, #72]	; (800c368 <prvInitialiseTaskLists+0x60>)
 800c320:	4413      	add	r3, r2
 800c322:	4618      	mov	r0, r3
 800c324:	f7fe f8a2 	bl	800a46c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	3301      	adds	r3, #1
 800c32c:	607b      	str	r3, [r7, #4]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2b06      	cmp	r3, #6
 800c332:	d9ef      	bls.n	800c314 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c334:	480d      	ldr	r0, [pc, #52]	; (800c36c <prvInitialiseTaskLists+0x64>)
 800c336:	f7fe f899 	bl	800a46c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c33a:	480d      	ldr	r0, [pc, #52]	; (800c370 <prvInitialiseTaskLists+0x68>)
 800c33c:	f7fe f896 	bl	800a46c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c340:	480c      	ldr	r0, [pc, #48]	; (800c374 <prvInitialiseTaskLists+0x6c>)
 800c342:	f7fe f893 	bl	800a46c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c346:	480c      	ldr	r0, [pc, #48]	; (800c378 <prvInitialiseTaskLists+0x70>)
 800c348:	f7fe f890 	bl	800a46c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c34c:	480b      	ldr	r0, [pc, #44]	; (800c37c <prvInitialiseTaskLists+0x74>)
 800c34e:	f7fe f88d 	bl	800a46c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c352:	4b0b      	ldr	r3, [pc, #44]	; (800c380 <prvInitialiseTaskLists+0x78>)
 800c354:	4a05      	ldr	r2, [pc, #20]	; (800c36c <prvInitialiseTaskLists+0x64>)
 800c356:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c358:	4b0a      	ldr	r3, [pc, #40]	; (800c384 <prvInitialiseTaskLists+0x7c>)
 800c35a:	4a05      	ldr	r2, [pc, #20]	; (800c370 <prvInitialiseTaskLists+0x68>)
 800c35c:	601a      	str	r2, [r3, #0]
}
 800c35e:	bf00      	nop
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	24004598 	.word	0x24004598
 800c36c:	24004624 	.word	0x24004624
 800c370:	24004638 	.word	0x24004638
 800c374:	24004654 	.word	0x24004654
 800c378:	24004668 	.word	0x24004668
 800c37c:	24004680 	.word	0x24004680
 800c380:	2400464c 	.word	0x2400464c
 800c384:	24004650 	.word	0x24004650

0800c388 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */

		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c38e:	e019      	b.n	800c3c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c390:	f7fe fa50 	bl	800a834 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c394:	4b10      	ldr	r3, [pc, #64]	; (800c3d8 <prvCheckTasksWaitingTermination+0x50>)
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	3304      	adds	r3, #4
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7fe f8ed 	bl	800a580 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c3a6:	4b0d      	ldr	r3, [pc, #52]	; (800c3dc <prvCheckTasksWaitingTermination+0x54>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	4a0b      	ldr	r2, [pc, #44]	; (800c3dc <prvCheckTasksWaitingTermination+0x54>)
 800c3ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c3b0:	4b0b      	ldr	r3, [pc, #44]	; (800c3e0 <prvCheckTasksWaitingTermination+0x58>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	4a0a      	ldr	r2, [pc, #40]	; (800c3e0 <prvCheckTasksWaitingTermination+0x58>)
 800c3b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c3ba:	f7fe fa6b 	bl	800a894 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 f810 	bl	800c3e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3c4:	4b06      	ldr	r3, [pc, #24]	; (800c3e0 <prvCheckTasksWaitingTermination+0x58>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d1e1      	bne.n	800c390 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c3cc:	bf00      	nop
 800c3ce:	bf00      	nop
 800c3d0:	3708      	adds	r7, #8
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	24004668 	.word	0x24004668
 800c3dc:	24004694 	.word	0x24004694
 800c3e0:	2400467c 	.word	0x2400467c

0800c3e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d108      	bne.n	800c408 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fd ff18 	bl	800a230 <vPortFree>
				vPortFree( pxTCB );
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f7fd ff15 	bl	800a230 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c406:	e018      	b.n	800c43a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d103      	bne.n	800c41a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f7fd ff0c 	bl	800a230 <vPortFree>
	}
 800c418:	e00f      	b.n	800c43a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c420:	2b02      	cmp	r3, #2
 800c422:	d00a      	beq.n	800c43a <prvDeleteTCB+0x56>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	60fb      	str	r3, [r7, #12]
}
 800c436:	bf00      	nop
 800c438:	e7fe      	b.n	800c438 <prvDeleteTCB+0x54>
	}
 800c43a:	bf00      	nop
 800c43c:	3710      	adds	r7, #16
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
	...

0800c444 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c44a:	4b0c      	ldr	r3, [pc, #48]	; (800c47c <prvResetNextTaskUnblockTime+0x38>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d104      	bne.n	800c45e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c454:	4b0a      	ldr	r3, [pc, #40]	; (800c480 <prvResetNextTaskUnblockTime+0x3c>)
 800c456:	f04f 32ff 	mov.w	r2, #4294967295
 800c45a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c45c:	e008      	b.n	800c470 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c45e:	4b07      	ldr	r3, [pc, #28]	; (800c47c <prvResetNextTaskUnblockTime+0x38>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	4a04      	ldr	r2, [pc, #16]	; (800c480 <prvResetNextTaskUnblockTime+0x3c>)
 800c46e:	6013      	str	r3, [r2, #0]
}
 800c470:	bf00      	nop
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr
 800c47c:	2400464c 	.word	0x2400464c
 800c480:	240046b4 	.word	0x240046b4

0800c484 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c48a:	4b0b      	ldr	r3, [pc, #44]	; (800c4b8 <xTaskGetSchedulerState+0x34>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d102      	bne.n	800c498 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c492:	2301      	movs	r3, #1
 800c494:	607b      	str	r3, [r7, #4]
 800c496:	e008      	b.n	800c4aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c498:	4b08      	ldr	r3, [pc, #32]	; (800c4bc <xTaskGetSchedulerState+0x38>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d102      	bne.n	800c4a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c4a0:	2302      	movs	r3, #2
 800c4a2:	607b      	str	r3, [r7, #4]
 800c4a4:	e001      	b.n	800c4aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c4aa:	687b      	ldr	r3, [r7, #4]
	}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	370c      	adds	r7, #12
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr
 800c4b8:	240046a0 	.word	0x240046a0
 800c4bc:	240046bc 	.word	0x240046bc

0800c4c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d05e      	beq.n	800c594 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4da:	4b31      	ldr	r3, [pc, #196]	; (800c5a0 <xTaskPriorityInherit+0xe0>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d24e      	bcs.n	800c582 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	db06      	blt.n	800c4fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4ec:	4b2c      	ldr	r3, [pc, #176]	; (800c5a0 <xTaskPriorityInherit+0xe0>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f2:	f1c3 0207 	rsb	r2, r3, #7
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	6959      	ldr	r1, [r3, #20]
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c502:	4613      	mov	r3, r2
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4413      	add	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4a26      	ldr	r2, [pc, #152]	; (800c5a4 <xTaskPriorityInherit+0xe4>)
 800c50c:	4413      	add	r3, r2
 800c50e:	4299      	cmp	r1, r3
 800c510:	d12f      	bne.n	800c572 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	3304      	adds	r3, #4
 800c516:	4618      	mov	r0, r3
 800c518:	f7fe f832 	bl	800a580 <uxListRemove>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10a      	bne.n	800c538 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c526:	2201      	movs	r2, #1
 800c528:	fa02 f303 	lsl.w	r3, r2, r3
 800c52c:	43da      	mvns	r2, r3
 800c52e:	4b1e      	ldr	r3, [pc, #120]	; (800c5a8 <xTaskPriorityInherit+0xe8>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4013      	ands	r3, r2
 800c534:	4a1c      	ldr	r2, [pc, #112]	; (800c5a8 <xTaskPriorityInherit+0xe8>)
 800c536:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c538:	4b19      	ldr	r3, [pc, #100]	; (800c5a0 <xTaskPriorityInherit+0xe0>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c546:	2201      	movs	r2, #1
 800c548:	409a      	lsls	r2, r3
 800c54a:	4b17      	ldr	r3, [pc, #92]	; (800c5a8 <xTaskPriorityInherit+0xe8>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4313      	orrs	r3, r2
 800c550:	4a15      	ldr	r2, [pc, #84]	; (800c5a8 <xTaskPriorityInherit+0xe8>)
 800c552:	6013      	str	r3, [r2, #0]
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c558:	4613      	mov	r3, r2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	4413      	add	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4a10      	ldr	r2, [pc, #64]	; (800c5a4 <xTaskPriorityInherit+0xe4>)
 800c562:	441a      	add	r2, r3
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	3304      	adds	r3, #4
 800c568:	4619      	mov	r1, r3
 800c56a:	4610      	mov	r0, r2
 800c56c:	f7fd ffab 	bl	800a4c6 <vListInsertEnd>
 800c570:	e004      	b.n	800c57c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c572:	4b0b      	ldr	r3, [pc, #44]	; (800c5a0 <xTaskPriorityInherit+0xe0>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c57c:	2301      	movs	r3, #1
 800c57e:	60fb      	str	r3, [r7, #12]
 800c580:	e008      	b.n	800c594 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c586:	4b06      	ldr	r3, [pc, #24]	; (800c5a0 <xTaskPriorityInherit+0xe0>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d201      	bcs.n	800c594 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c590:	2301      	movs	r3, #1
 800c592:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c594:	68fb      	ldr	r3, [r7, #12]
	}
 800c596:	4618      	mov	r0, r3
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	24004594 	.word	0x24004594
 800c5a4:	24004598 	.word	0x24004598
 800c5a8:	2400469c 	.word	0x2400469c

0800c5ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b086      	sub	sp, #24
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d06e      	beq.n	800c6a0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c5c2:	4b3a      	ldr	r3, [pc, #232]	; (800c6ac <xTaskPriorityDisinherit+0x100>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	693a      	ldr	r2, [r7, #16]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d00a      	beq.n	800c5e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d0:	f383 8811 	msr	BASEPRI, r3
 800c5d4:	f3bf 8f6f 	isb	sy
 800c5d8:	f3bf 8f4f 	dsb	sy
 800c5dc:	60fb      	str	r3, [r7, #12]
}
 800c5de:	bf00      	nop
 800c5e0:	e7fe      	b.n	800c5e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d10a      	bne.n	800c600 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ee:	f383 8811 	msr	BASEPRI, r3
 800c5f2:	f3bf 8f6f 	isb	sy
 800c5f6:	f3bf 8f4f 	dsb	sy
 800c5fa:	60bb      	str	r3, [r7, #8]
}
 800c5fc:	bf00      	nop
 800c5fe:	e7fe      	b.n	800c5fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c604:	1e5a      	subs	r2, r3, #1
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c612:	429a      	cmp	r2, r3
 800c614:	d044      	beq.n	800c6a0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d140      	bne.n	800c6a0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	3304      	adds	r3, #4
 800c622:	4618      	mov	r0, r3
 800c624:	f7fd ffac 	bl	800a580 <uxListRemove>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d115      	bne.n	800c65a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c632:	491f      	ldr	r1, [pc, #124]	; (800c6b0 <xTaskPriorityDisinherit+0x104>)
 800c634:	4613      	mov	r3, r2
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	4413      	add	r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	440b      	add	r3, r1
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d10a      	bne.n	800c65a <xTaskPriorityDisinherit+0xae>
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c648:	2201      	movs	r2, #1
 800c64a:	fa02 f303 	lsl.w	r3, r2, r3
 800c64e:	43da      	mvns	r2, r3
 800c650:	4b18      	ldr	r3, [pc, #96]	; (800c6b4 <xTaskPriorityDisinherit+0x108>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4013      	ands	r3, r2
 800c656:	4a17      	ldr	r2, [pc, #92]	; (800c6b4 <xTaskPriorityDisinherit+0x108>)
 800c658:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c666:	f1c3 0207 	rsb	r2, r3, #7
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c672:	2201      	movs	r2, #1
 800c674:	409a      	lsls	r2, r3
 800c676:	4b0f      	ldr	r3, [pc, #60]	; (800c6b4 <xTaskPriorityDisinherit+0x108>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4313      	orrs	r3, r2
 800c67c:	4a0d      	ldr	r2, [pc, #52]	; (800c6b4 <xTaskPriorityDisinherit+0x108>)
 800c67e:	6013      	str	r3, [r2, #0]
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c684:	4613      	mov	r3, r2
 800c686:	009b      	lsls	r3, r3, #2
 800c688:	4413      	add	r3, r2
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	4a08      	ldr	r2, [pc, #32]	; (800c6b0 <xTaskPriorityDisinherit+0x104>)
 800c68e:	441a      	add	r2, r3
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	3304      	adds	r3, #4
 800c694:	4619      	mov	r1, r3
 800c696:	4610      	mov	r0, r2
 800c698:	f7fd ff15 	bl	800a4c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c69c:	2301      	movs	r3, #1
 800c69e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c6a0:	697b      	ldr	r3, [r7, #20]
	}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3718      	adds	r7, #24
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	24004594 	.word	0x24004594
 800c6b0:	24004598 	.word	0x24004598
 800c6b4:	2400469c 	.word	0x2400469c

0800c6b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b088      	sub	sp, #32
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d077      	beq.n	800c7c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10a      	bne.n	800c6ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6dc:	f383 8811 	msr	BASEPRI, r3
 800c6e0:	f3bf 8f6f 	isb	sy
 800c6e4:	f3bf 8f4f 	dsb	sy
 800c6e8:	60fb      	str	r3, [r7, #12]
}
 800c6ea:	bf00      	nop
 800c6ec:	e7fe      	b.n	800c6ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d902      	bls.n	800c6fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	61fb      	str	r3, [r7, #28]
 800c6fc:	e002      	b.n	800c704 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c702:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c704:	69bb      	ldr	r3, [r7, #24]
 800c706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c708:	69fa      	ldr	r2, [r7, #28]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d058      	beq.n	800c7c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c70e:	69bb      	ldr	r3, [r7, #24]
 800c710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c712:	697a      	ldr	r2, [r7, #20]
 800c714:	429a      	cmp	r2, r3
 800c716:	d153      	bne.n	800c7c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c718:	4b2b      	ldr	r3, [pc, #172]	; (800c7c8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	69ba      	ldr	r2, [r7, #24]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d10a      	bne.n	800c738 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	60bb      	str	r3, [r7, #8]
}
 800c734:	bf00      	nop
 800c736:	e7fe      	b.n	800c736 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c73c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	69fa      	ldr	r2, [r7, #28]
 800c742:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	699b      	ldr	r3, [r3, #24]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	db04      	blt.n	800c756 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	f1c3 0207 	rsb	r2, r3, #7
 800c752:	69bb      	ldr	r3, [r7, #24]
 800c754:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	6959      	ldr	r1, [r3, #20]
 800c75a:	693a      	ldr	r2, [r7, #16]
 800c75c:	4613      	mov	r3, r2
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	4413      	add	r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	4a19      	ldr	r2, [pc, #100]	; (800c7cc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c766:	4413      	add	r3, r2
 800c768:	4299      	cmp	r1, r3
 800c76a:	d129      	bne.n	800c7c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c76c:	69bb      	ldr	r3, [r7, #24]
 800c76e:	3304      	adds	r3, #4
 800c770:	4618      	mov	r0, r3
 800c772:	f7fd ff05 	bl	800a580 <uxListRemove>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d10a      	bne.n	800c792 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c780:	2201      	movs	r2, #1
 800c782:	fa02 f303 	lsl.w	r3, r2, r3
 800c786:	43da      	mvns	r2, r3
 800c788:	4b11      	ldr	r3, [pc, #68]	; (800c7d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4013      	ands	r3, r2
 800c78e:	4a10      	ldr	r2, [pc, #64]	; (800c7d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c790:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c796:	2201      	movs	r2, #1
 800c798:	409a      	lsls	r2, r3
 800c79a:	4b0d      	ldr	r3, [pc, #52]	; (800c7d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	4a0b      	ldr	r2, [pc, #44]	; (800c7d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c7a2:	6013      	str	r3, [r2, #0]
 800c7a4:	69bb      	ldr	r3, [r7, #24]
 800c7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4413      	add	r3, r2
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	4a06      	ldr	r2, [pc, #24]	; (800c7cc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c7b2:	441a      	add	r2, r3
 800c7b4:	69bb      	ldr	r3, [r7, #24]
 800c7b6:	3304      	adds	r3, #4
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	4610      	mov	r0, r2
 800c7bc:	f7fd fe83 	bl	800a4c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c7c0:	bf00      	nop
 800c7c2:	3720      	adds	r7, #32
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	24004594 	.word	0x24004594
 800c7cc:	24004598 	.word	0x24004598
 800c7d0:	2400469c 	.word	0x2400469c

0800c7d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c7d4:	b480      	push	{r7}
 800c7d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c7d8:	4b07      	ldr	r3, [pc, #28]	; (800c7f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d004      	beq.n	800c7ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c7e0:	4b05      	ldr	r3, [pc, #20]	; (800c7f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c7e6:	3201      	adds	r2, #1
 800c7e8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c7ea:	4b03      	ldr	r3, [pc, #12]	; (800c7f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
	}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr
 800c7f8:	24004594 	.word	0x24004594

0800c7fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b084      	sub	sp, #16
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c806:	4b29      	ldr	r3, [pc, #164]	; (800c8ac <prvAddCurrentTaskToDelayedList+0xb0>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c80c:	4b28      	ldr	r3, [pc, #160]	; (800c8b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	3304      	adds	r3, #4
 800c812:	4618      	mov	r0, r3
 800c814:	f7fd feb4 	bl	800a580 <uxListRemove>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10b      	bne.n	800c836 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c81e:	4b24      	ldr	r3, [pc, #144]	; (800c8b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c824:	2201      	movs	r2, #1
 800c826:	fa02 f303 	lsl.w	r3, r2, r3
 800c82a:	43da      	mvns	r2, r3
 800c82c:	4b21      	ldr	r3, [pc, #132]	; (800c8b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4013      	ands	r3, r2
 800c832:	4a20      	ldr	r2, [pc, #128]	; (800c8b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c834:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c83c:	d10a      	bne.n	800c854 <prvAddCurrentTaskToDelayedList+0x58>
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d007      	beq.n	800c854 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c844:	4b1a      	ldr	r3, [pc, #104]	; (800c8b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	3304      	adds	r3, #4
 800c84a:	4619      	mov	r1, r3
 800c84c:	481a      	ldr	r0, [pc, #104]	; (800c8b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c84e:	f7fd fe3a 	bl	800a4c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c852:	e026      	b.n	800c8a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c854:	68fa      	ldr	r2, [r7, #12]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	4413      	add	r3, r2
 800c85a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c85c:	4b14      	ldr	r3, [pc, #80]	; (800c8b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c864:	68ba      	ldr	r2, [r7, #8]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d209      	bcs.n	800c880 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c86c:	4b13      	ldr	r3, [pc, #76]	; (800c8bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	4b0f      	ldr	r3, [pc, #60]	; (800c8b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	3304      	adds	r3, #4
 800c876:	4619      	mov	r1, r3
 800c878:	4610      	mov	r0, r2
 800c87a:	f7fd fe48 	bl	800a50e <vListInsert>
}
 800c87e:	e010      	b.n	800c8a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c880:	4b0f      	ldr	r3, [pc, #60]	; (800c8c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	4b0a      	ldr	r3, [pc, #40]	; (800c8b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	3304      	adds	r3, #4
 800c88a:	4619      	mov	r1, r3
 800c88c:	4610      	mov	r0, r2
 800c88e:	f7fd fe3e 	bl	800a50e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c892:	4b0c      	ldr	r3, [pc, #48]	; (800c8c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d202      	bcs.n	800c8a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c89c:	4a09      	ldr	r2, [pc, #36]	; (800c8c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	6013      	str	r3, [r2, #0]
}
 800c8a2:	bf00      	nop
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	24004698 	.word	0x24004698
 800c8b0:	24004594 	.word	0x24004594
 800c8b4:	2400469c 	.word	0x2400469c
 800c8b8:	24004680 	.word	0x24004680
 800c8bc:	24004650 	.word	0x24004650
 800c8c0:	2400464c 	.word	0x2400464c
 800c8c4:	240046b4 	.word	0x240046b4

0800c8c8 <__errno>:
 800c8c8:	4b01      	ldr	r3, [pc, #4]	; (800c8d0 <__errno+0x8>)
 800c8ca:	6818      	ldr	r0, [r3, #0]
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	2400001c 	.word	0x2400001c

0800c8d4 <__libc_init_array>:
 800c8d4:	b570      	push	{r4, r5, r6, lr}
 800c8d6:	4d0d      	ldr	r5, [pc, #52]	; (800c90c <__libc_init_array+0x38>)
 800c8d8:	4c0d      	ldr	r4, [pc, #52]	; (800c910 <__libc_init_array+0x3c>)
 800c8da:	1b64      	subs	r4, r4, r5
 800c8dc:	10a4      	asrs	r4, r4, #2
 800c8de:	2600      	movs	r6, #0
 800c8e0:	42a6      	cmp	r6, r4
 800c8e2:	d109      	bne.n	800c8f8 <__libc_init_array+0x24>
 800c8e4:	4d0b      	ldr	r5, [pc, #44]	; (800c914 <__libc_init_array+0x40>)
 800c8e6:	4c0c      	ldr	r4, [pc, #48]	; (800c918 <__libc_init_array+0x44>)
 800c8e8:	f002 ff1c 	bl	800f724 <_init>
 800c8ec:	1b64      	subs	r4, r4, r5
 800c8ee:	10a4      	asrs	r4, r4, #2
 800c8f0:	2600      	movs	r6, #0
 800c8f2:	42a6      	cmp	r6, r4
 800c8f4:	d105      	bne.n	800c902 <__libc_init_array+0x2e>
 800c8f6:	bd70      	pop	{r4, r5, r6, pc}
 800c8f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8fc:	4798      	blx	r3
 800c8fe:	3601      	adds	r6, #1
 800c900:	e7ee      	b.n	800c8e0 <__libc_init_array+0xc>
 800c902:	f855 3b04 	ldr.w	r3, [r5], #4
 800c906:	4798      	blx	r3
 800c908:	3601      	adds	r6, #1
 800c90a:	e7f2      	b.n	800c8f2 <__libc_init_array+0x1e>
 800c90c:	080102d4 	.word	0x080102d4
 800c910:	080102d4 	.word	0x080102d4
 800c914:	080102d4 	.word	0x080102d4
 800c918:	080102d8 	.word	0x080102d8

0800c91c <memcpy>:
 800c91c:	440a      	add	r2, r1
 800c91e:	4291      	cmp	r1, r2
 800c920:	f100 33ff 	add.w	r3, r0, #4294967295
 800c924:	d100      	bne.n	800c928 <memcpy+0xc>
 800c926:	4770      	bx	lr
 800c928:	b510      	push	{r4, lr}
 800c92a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c92e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c932:	4291      	cmp	r1, r2
 800c934:	d1f9      	bne.n	800c92a <memcpy+0xe>
 800c936:	bd10      	pop	{r4, pc}

0800c938 <memset>:
 800c938:	4402      	add	r2, r0
 800c93a:	4603      	mov	r3, r0
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d100      	bne.n	800c942 <memset+0xa>
 800c940:	4770      	bx	lr
 800c942:	f803 1b01 	strb.w	r1, [r3], #1
 800c946:	e7f9      	b.n	800c93c <memset+0x4>

0800c948 <__cvt>:
 800c948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c94a:	ed2d 8b02 	vpush	{d8}
 800c94e:	eeb0 8b40 	vmov.f64	d8, d0
 800c952:	b085      	sub	sp, #20
 800c954:	4617      	mov	r7, r2
 800c956:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c958:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c95a:	ee18 2a90 	vmov	r2, s17
 800c95e:	f025 0520 	bic.w	r5, r5, #32
 800c962:	2a00      	cmp	r2, #0
 800c964:	bfb6      	itet	lt
 800c966:	222d      	movlt	r2, #45	; 0x2d
 800c968:	2200      	movge	r2, #0
 800c96a:	eeb1 8b40 	vneglt.f64	d8, d0
 800c96e:	2d46      	cmp	r5, #70	; 0x46
 800c970:	460c      	mov	r4, r1
 800c972:	701a      	strb	r2, [r3, #0]
 800c974:	d004      	beq.n	800c980 <__cvt+0x38>
 800c976:	2d45      	cmp	r5, #69	; 0x45
 800c978:	d100      	bne.n	800c97c <__cvt+0x34>
 800c97a:	3401      	adds	r4, #1
 800c97c:	2102      	movs	r1, #2
 800c97e:	e000      	b.n	800c982 <__cvt+0x3a>
 800c980:	2103      	movs	r1, #3
 800c982:	ab03      	add	r3, sp, #12
 800c984:	9301      	str	r3, [sp, #4]
 800c986:	ab02      	add	r3, sp, #8
 800c988:	9300      	str	r3, [sp, #0]
 800c98a:	4622      	mov	r2, r4
 800c98c:	4633      	mov	r3, r6
 800c98e:	eeb0 0b48 	vmov.f64	d0, d8
 800c992:	f000 fe49 	bl	800d628 <_dtoa_r>
 800c996:	2d47      	cmp	r5, #71	; 0x47
 800c998:	d101      	bne.n	800c99e <__cvt+0x56>
 800c99a:	07fb      	lsls	r3, r7, #31
 800c99c:	d51a      	bpl.n	800c9d4 <__cvt+0x8c>
 800c99e:	2d46      	cmp	r5, #70	; 0x46
 800c9a0:	eb00 0204 	add.w	r2, r0, r4
 800c9a4:	d10c      	bne.n	800c9c0 <__cvt+0x78>
 800c9a6:	7803      	ldrb	r3, [r0, #0]
 800c9a8:	2b30      	cmp	r3, #48	; 0x30
 800c9aa:	d107      	bne.n	800c9bc <__cvt+0x74>
 800c9ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9b4:	bf1c      	itt	ne
 800c9b6:	f1c4 0401 	rsbne	r4, r4, #1
 800c9ba:	6034      	strne	r4, [r6, #0]
 800c9bc:	6833      	ldr	r3, [r6, #0]
 800c9be:	441a      	add	r2, r3
 800c9c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9c8:	bf08      	it	eq
 800c9ca:	9203      	streq	r2, [sp, #12]
 800c9cc:	2130      	movs	r1, #48	; 0x30
 800c9ce:	9b03      	ldr	r3, [sp, #12]
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d307      	bcc.n	800c9e4 <__cvt+0x9c>
 800c9d4:	9b03      	ldr	r3, [sp, #12]
 800c9d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9d8:	1a1b      	subs	r3, r3, r0
 800c9da:	6013      	str	r3, [r2, #0]
 800c9dc:	b005      	add	sp, #20
 800c9de:	ecbd 8b02 	vpop	{d8}
 800c9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9e4:	1c5c      	adds	r4, r3, #1
 800c9e6:	9403      	str	r4, [sp, #12]
 800c9e8:	7019      	strb	r1, [r3, #0]
 800c9ea:	e7f0      	b.n	800c9ce <__cvt+0x86>

0800c9ec <__exponent>:
 800c9ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2900      	cmp	r1, #0
 800c9f2:	bfb8      	it	lt
 800c9f4:	4249      	neglt	r1, r1
 800c9f6:	f803 2b02 	strb.w	r2, [r3], #2
 800c9fa:	bfb4      	ite	lt
 800c9fc:	222d      	movlt	r2, #45	; 0x2d
 800c9fe:	222b      	movge	r2, #43	; 0x2b
 800ca00:	2909      	cmp	r1, #9
 800ca02:	7042      	strb	r2, [r0, #1]
 800ca04:	dd2a      	ble.n	800ca5c <__exponent+0x70>
 800ca06:	f10d 0407 	add.w	r4, sp, #7
 800ca0a:	46a4      	mov	ip, r4
 800ca0c:	270a      	movs	r7, #10
 800ca0e:	46a6      	mov	lr, r4
 800ca10:	460a      	mov	r2, r1
 800ca12:	fb91 f6f7 	sdiv	r6, r1, r7
 800ca16:	fb07 1516 	mls	r5, r7, r6, r1
 800ca1a:	3530      	adds	r5, #48	; 0x30
 800ca1c:	2a63      	cmp	r2, #99	; 0x63
 800ca1e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ca22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ca26:	4631      	mov	r1, r6
 800ca28:	dcf1      	bgt.n	800ca0e <__exponent+0x22>
 800ca2a:	3130      	adds	r1, #48	; 0x30
 800ca2c:	f1ae 0502 	sub.w	r5, lr, #2
 800ca30:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ca34:	1c44      	adds	r4, r0, #1
 800ca36:	4629      	mov	r1, r5
 800ca38:	4561      	cmp	r1, ip
 800ca3a:	d30a      	bcc.n	800ca52 <__exponent+0x66>
 800ca3c:	f10d 0209 	add.w	r2, sp, #9
 800ca40:	eba2 020e 	sub.w	r2, r2, lr
 800ca44:	4565      	cmp	r5, ip
 800ca46:	bf88      	it	hi
 800ca48:	2200      	movhi	r2, #0
 800ca4a:	4413      	add	r3, r2
 800ca4c:	1a18      	subs	r0, r3, r0
 800ca4e:	b003      	add	sp, #12
 800ca50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca56:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ca5a:	e7ed      	b.n	800ca38 <__exponent+0x4c>
 800ca5c:	2330      	movs	r3, #48	; 0x30
 800ca5e:	3130      	adds	r1, #48	; 0x30
 800ca60:	7083      	strb	r3, [r0, #2]
 800ca62:	70c1      	strb	r1, [r0, #3]
 800ca64:	1d03      	adds	r3, r0, #4
 800ca66:	e7f1      	b.n	800ca4c <__exponent+0x60>

0800ca68 <_printf_float>:
 800ca68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6c:	b08b      	sub	sp, #44	; 0x2c
 800ca6e:	460c      	mov	r4, r1
 800ca70:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ca74:	4616      	mov	r6, r2
 800ca76:	461f      	mov	r7, r3
 800ca78:	4605      	mov	r5, r0
 800ca7a:	f001 fcfb 	bl	800e474 <_localeconv_r>
 800ca7e:	f8d0 b000 	ldr.w	fp, [r0]
 800ca82:	4658      	mov	r0, fp
 800ca84:	f7f3 fc2c 	bl	80002e0 <strlen>
 800ca88:	2300      	movs	r3, #0
 800ca8a:	9308      	str	r3, [sp, #32]
 800ca8c:	f8d8 3000 	ldr.w	r3, [r8]
 800ca90:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ca94:	6822      	ldr	r2, [r4, #0]
 800ca96:	3307      	adds	r3, #7
 800ca98:	f023 0307 	bic.w	r3, r3, #7
 800ca9c:	f103 0108 	add.w	r1, r3, #8
 800caa0:	f8c8 1000 	str.w	r1, [r8]
 800caa4:	4682      	mov	sl, r0
 800caa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800caaa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800caae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800cd10 <_printf_float+0x2a8>
 800cab2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800cab6:	eeb0 6bc0 	vabs.f64	d6, d0
 800caba:	eeb4 6b47 	vcmp.f64	d6, d7
 800cabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac2:	dd24      	ble.n	800cb0e <_printf_float+0xa6>
 800cac4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cacc:	d502      	bpl.n	800cad4 <_printf_float+0x6c>
 800cace:	232d      	movs	r3, #45	; 0x2d
 800cad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cad4:	4b90      	ldr	r3, [pc, #576]	; (800cd18 <_printf_float+0x2b0>)
 800cad6:	4891      	ldr	r0, [pc, #580]	; (800cd1c <_printf_float+0x2b4>)
 800cad8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cadc:	bf94      	ite	ls
 800cade:	4698      	movls	r8, r3
 800cae0:	4680      	movhi	r8, r0
 800cae2:	2303      	movs	r3, #3
 800cae4:	6123      	str	r3, [r4, #16]
 800cae6:	f022 0204 	bic.w	r2, r2, #4
 800caea:	2300      	movs	r3, #0
 800caec:	6022      	str	r2, [r4, #0]
 800caee:	9304      	str	r3, [sp, #16]
 800caf0:	9700      	str	r7, [sp, #0]
 800caf2:	4633      	mov	r3, r6
 800caf4:	aa09      	add	r2, sp, #36	; 0x24
 800caf6:	4621      	mov	r1, r4
 800caf8:	4628      	mov	r0, r5
 800cafa:	f000 f9d3 	bl	800cea4 <_printf_common>
 800cafe:	3001      	adds	r0, #1
 800cb00:	f040 808a 	bne.w	800cc18 <_printf_float+0x1b0>
 800cb04:	f04f 30ff 	mov.w	r0, #4294967295
 800cb08:	b00b      	add	sp, #44	; 0x2c
 800cb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0e:	eeb4 0b40 	vcmp.f64	d0, d0
 800cb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb16:	d709      	bvc.n	800cb2c <_printf_float+0xc4>
 800cb18:	ee10 3a90 	vmov	r3, s1
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	bfbc      	itt	lt
 800cb20:	232d      	movlt	r3, #45	; 0x2d
 800cb22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cb26:	487e      	ldr	r0, [pc, #504]	; (800cd20 <_printf_float+0x2b8>)
 800cb28:	4b7e      	ldr	r3, [pc, #504]	; (800cd24 <_printf_float+0x2bc>)
 800cb2a:	e7d5      	b.n	800cad8 <_printf_float+0x70>
 800cb2c:	6863      	ldr	r3, [r4, #4]
 800cb2e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800cb32:	9104      	str	r1, [sp, #16]
 800cb34:	1c59      	adds	r1, r3, #1
 800cb36:	d13c      	bne.n	800cbb2 <_printf_float+0x14a>
 800cb38:	2306      	movs	r3, #6
 800cb3a:	6063      	str	r3, [r4, #4]
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	9303      	str	r3, [sp, #12]
 800cb40:	ab08      	add	r3, sp, #32
 800cb42:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800cb46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb4a:	ab07      	add	r3, sp, #28
 800cb4c:	6861      	ldr	r1, [r4, #4]
 800cb4e:	9300      	str	r3, [sp, #0]
 800cb50:	6022      	str	r2, [r4, #0]
 800cb52:	f10d 031b 	add.w	r3, sp, #27
 800cb56:	4628      	mov	r0, r5
 800cb58:	f7ff fef6 	bl	800c948 <__cvt>
 800cb5c:	9b04      	ldr	r3, [sp, #16]
 800cb5e:	9907      	ldr	r1, [sp, #28]
 800cb60:	2b47      	cmp	r3, #71	; 0x47
 800cb62:	4680      	mov	r8, r0
 800cb64:	d108      	bne.n	800cb78 <_printf_float+0x110>
 800cb66:	1cc8      	adds	r0, r1, #3
 800cb68:	db02      	blt.n	800cb70 <_printf_float+0x108>
 800cb6a:	6863      	ldr	r3, [r4, #4]
 800cb6c:	4299      	cmp	r1, r3
 800cb6e:	dd41      	ble.n	800cbf4 <_printf_float+0x18c>
 800cb70:	f1a9 0902 	sub.w	r9, r9, #2
 800cb74:	fa5f f989 	uxtb.w	r9, r9
 800cb78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cb7c:	d820      	bhi.n	800cbc0 <_printf_float+0x158>
 800cb7e:	3901      	subs	r1, #1
 800cb80:	464a      	mov	r2, r9
 800cb82:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cb86:	9107      	str	r1, [sp, #28]
 800cb88:	f7ff ff30 	bl	800c9ec <__exponent>
 800cb8c:	9a08      	ldr	r2, [sp, #32]
 800cb8e:	9004      	str	r0, [sp, #16]
 800cb90:	1813      	adds	r3, r2, r0
 800cb92:	2a01      	cmp	r2, #1
 800cb94:	6123      	str	r3, [r4, #16]
 800cb96:	dc02      	bgt.n	800cb9e <_printf_float+0x136>
 800cb98:	6822      	ldr	r2, [r4, #0]
 800cb9a:	07d2      	lsls	r2, r2, #31
 800cb9c:	d501      	bpl.n	800cba2 <_printf_float+0x13a>
 800cb9e:	3301      	adds	r3, #1
 800cba0:	6123      	str	r3, [r4, #16]
 800cba2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d0a2      	beq.n	800caf0 <_printf_float+0x88>
 800cbaa:	232d      	movs	r3, #45	; 0x2d
 800cbac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbb0:	e79e      	b.n	800caf0 <_printf_float+0x88>
 800cbb2:	9904      	ldr	r1, [sp, #16]
 800cbb4:	2947      	cmp	r1, #71	; 0x47
 800cbb6:	d1c1      	bne.n	800cb3c <_printf_float+0xd4>
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d1bf      	bne.n	800cb3c <_printf_float+0xd4>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e7bc      	b.n	800cb3a <_printf_float+0xd2>
 800cbc0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cbc4:	d118      	bne.n	800cbf8 <_printf_float+0x190>
 800cbc6:	2900      	cmp	r1, #0
 800cbc8:	6863      	ldr	r3, [r4, #4]
 800cbca:	dd0b      	ble.n	800cbe4 <_printf_float+0x17c>
 800cbcc:	6121      	str	r1, [r4, #16]
 800cbce:	b913      	cbnz	r3, 800cbd6 <_printf_float+0x16e>
 800cbd0:	6822      	ldr	r2, [r4, #0]
 800cbd2:	07d0      	lsls	r0, r2, #31
 800cbd4:	d502      	bpl.n	800cbdc <_printf_float+0x174>
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	440b      	add	r3, r1
 800cbda:	6123      	str	r3, [r4, #16]
 800cbdc:	2300      	movs	r3, #0
 800cbde:	65a1      	str	r1, [r4, #88]	; 0x58
 800cbe0:	9304      	str	r3, [sp, #16]
 800cbe2:	e7de      	b.n	800cba2 <_printf_float+0x13a>
 800cbe4:	b913      	cbnz	r3, 800cbec <_printf_float+0x184>
 800cbe6:	6822      	ldr	r2, [r4, #0]
 800cbe8:	07d2      	lsls	r2, r2, #31
 800cbea:	d501      	bpl.n	800cbf0 <_printf_float+0x188>
 800cbec:	3302      	adds	r3, #2
 800cbee:	e7f4      	b.n	800cbda <_printf_float+0x172>
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	e7f2      	b.n	800cbda <_printf_float+0x172>
 800cbf4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cbf8:	9b08      	ldr	r3, [sp, #32]
 800cbfa:	4299      	cmp	r1, r3
 800cbfc:	db05      	blt.n	800cc0a <_printf_float+0x1a2>
 800cbfe:	6823      	ldr	r3, [r4, #0]
 800cc00:	6121      	str	r1, [r4, #16]
 800cc02:	07d8      	lsls	r0, r3, #31
 800cc04:	d5ea      	bpl.n	800cbdc <_printf_float+0x174>
 800cc06:	1c4b      	adds	r3, r1, #1
 800cc08:	e7e7      	b.n	800cbda <_printf_float+0x172>
 800cc0a:	2900      	cmp	r1, #0
 800cc0c:	bfd4      	ite	le
 800cc0e:	f1c1 0202 	rsble	r2, r1, #2
 800cc12:	2201      	movgt	r2, #1
 800cc14:	4413      	add	r3, r2
 800cc16:	e7e0      	b.n	800cbda <_printf_float+0x172>
 800cc18:	6823      	ldr	r3, [r4, #0]
 800cc1a:	055a      	lsls	r2, r3, #21
 800cc1c:	d407      	bmi.n	800cc2e <_printf_float+0x1c6>
 800cc1e:	6923      	ldr	r3, [r4, #16]
 800cc20:	4642      	mov	r2, r8
 800cc22:	4631      	mov	r1, r6
 800cc24:	4628      	mov	r0, r5
 800cc26:	47b8      	blx	r7
 800cc28:	3001      	adds	r0, #1
 800cc2a:	d12a      	bne.n	800cc82 <_printf_float+0x21a>
 800cc2c:	e76a      	b.n	800cb04 <_printf_float+0x9c>
 800cc2e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cc32:	f240 80e2 	bls.w	800cdfa <_printf_float+0x392>
 800cc36:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cc3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc42:	d133      	bne.n	800ccac <_printf_float+0x244>
 800cc44:	4a38      	ldr	r2, [pc, #224]	; (800cd28 <_printf_float+0x2c0>)
 800cc46:	2301      	movs	r3, #1
 800cc48:	4631      	mov	r1, r6
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	47b8      	blx	r7
 800cc4e:	3001      	adds	r0, #1
 800cc50:	f43f af58 	beq.w	800cb04 <_printf_float+0x9c>
 800cc54:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	db02      	blt.n	800cc62 <_printf_float+0x1fa>
 800cc5c:	6823      	ldr	r3, [r4, #0]
 800cc5e:	07d8      	lsls	r0, r3, #31
 800cc60:	d50f      	bpl.n	800cc82 <_printf_float+0x21a>
 800cc62:	4653      	mov	r3, sl
 800cc64:	465a      	mov	r2, fp
 800cc66:	4631      	mov	r1, r6
 800cc68:	4628      	mov	r0, r5
 800cc6a:	47b8      	blx	r7
 800cc6c:	3001      	adds	r0, #1
 800cc6e:	f43f af49 	beq.w	800cb04 <_printf_float+0x9c>
 800cc72:	f04f 0800 	mov.w	r8, #0
 800cc76:	f104 091a 	add.w	r9, r4, #26
 800cc7a:	9b08      	ldr	r3, [sp, #32]
 800cc7c:	3b01      	subs	r3, #1
 800cc7e:	4543      	cmp	r3, r8
 800cc80:	dc09      	bgt.n	800cc96 <_printf_float+0x22e>
 800cc82:	6823      	ldr	r3, [r4, #0]
 800cc84:	079b      	lsls	r3, r3, #30
 800cc86:	f100 8108 	bmi.w	800ce9a <_printf_float+0x432>
 800cc8a:	68e0      	ldr	r0, [r4, #12]
 800cc8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc8e:	4298      	cmp	r0, r3
 800cc90:	bfb8      	it	lt
 800cc92:	4618      	movlt	r0, r3
 800cc94:	e738      	b.n	800cb08 <_printf_float+0xa0>
 800cc96:	2301      	movs	r3, #1
 800cc98:	464a      	mov	r2, r9
 800cc9a:	4631      	mov	r1, r6
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	47b8      	blx	r7
 800cca0:	3001      	adds	r0, #1
 800cca2:	f43f af2f 	beq.w	800cb04 <_printf_float+0x9c>
 800cca6:	f108 0801 	add.w	r8, r8, #1
 800ccaa:	e7e6      	b.n	800cc7a <_printf_float+0x212>
 800ccac:	9b07      	ldr	r3, [sp, #28]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	dc3c      	bgt.n	800cd2c <_printf_float+0x2c4>
 800ccb2:	4a1d      	ldr	r2, [pc, #116]	; (800cd28 <_printf_float+0x2c0>)
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	4631      	mov	r1, r6
 800ccb8:	4628      	mov	r0, r5
 800ccba:	47b8      	blx	r7
 800ccbc:	3001      	adds	r0, #1
 800ccbe:	f43f af21 	beq.w	800cb04 <_printf_float+0x9c>
 800ccc2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	d102      	bne.n	800ccd0 <_printf_float+0x268>
 800ccca:	6823      	ldr	r3, [r4, #0]
 800cccc:	07d9      	lsls	r1, r3, #31
 800ccce:	d5d8      	bpl.n	800cc82 <_printf_float+0x21a>
 800ccd0:	4653      	mov	r3, sl
 800ccd2:	465a      	mov	r2, fp
 800ccd4:	4631      	mov	r1, r6
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	47b8      	blx	r7
 800ccda:	3001      	adds	r0, #1
 800ccdc:	f43f af12 	beq.w	800cb04 <_printf_float+0x9c>
 800cce0:	f04f 0900 	mov.w	r9, #0
 800cce4:	f104 0a1a 	add.w	sl, r4, #26
 800cce8:	9b07      	ldr	r3, [sp, #28]
 800ccea:	425b      	negs	r3, r3
 800ccec:	454b      	cmp	r3, r9
 800ccee:	dc01      	bgt.n	800ccf4 <_printf_float+0x28c>
 800ccf0:	9b08      	ldr	r3, [sp, #32]
 800ccf2:	e795      	b.n	800cc20 <_printf_float+0x1b8>
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	4652      	mov	r2, sl
 800ccf8:	4631      	mov	r1, r6
 800ccfa:	4628      	mov	r0, r5
 800ccfc:	47b8      	blx	r7
 800ccfe:	3001      	adds	r0, #1
 800cd00:	f43f af00 	beq.w	800cb04 <_printf_float+0x9c>
 800cd04:	f109 0901 	add.w	r9, r9, #1
 800cd08:	e7ee      	b.n	800cce8 <_printf_float+0x280>
 800cd0a:	bf00      	nop
 800cd0c:	f3af 8000 	nop.w
 800cd10:	ffffffff 	.word	0xffffffff
 800cd14:	7fefffff 	.word	0x7fefffff
 800cd18:	0800fef4 	.word	0x0800fef4
 800cd1c:	0800fef8 	.word	0x0800fef8
 800cd20:	0800ff00 	.word	0x0800ff00
 800cd24:	0800fefc 	.word	0x0800fefc
 800cd28:	0800ff04 	.word	0x0800ff04
 800cd2c:	9a08      	ldr	r2, [sp, #32]
 800cd2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd30:	429a      	cmp	r2, r3
 800cd32:	bfa8      	it	ge
 800cd34:	461a      	movge	r2, r3
 800cd36:	2a00      	cmp	r2, #0
 800cd38:	4691      	mov	r9, r2
 800cd3a:	dc38      	bgt.n	800cdae <_printf_float+0x346>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	9305      	str	r3, [sp, #20]
 800cd40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd44:	f104 021a 	add.w	r2, r4, #26
 800cd48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd4a:	9905      	ldr	r1, [sp, #20]
 800cd4c:	9304      	str	r3, [sp, #16]
 800cd4e:	eba3 0309 	sub.w	r3, r3, r9
 800cd52:	428b      	cmp	r3, r1
 800cd54:	dc33      	bgt.n	800cdbe <_printf_float+0x356>
 800cd56:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	db3c      	blt.n	800cdd8 <_printf_float+0x370>
 800cd5e:	6823      	ldr	r3, [r4, #0]
 800cd60:	07da      	lsls	r2, r3, #31
 800cd62:	d439      	bmi.n	800cdd8 <_printf_float+0x370>
 800cd64:	9b08      	ldr	r3, [sp, #32]
 800cd66:	9a04      	ldr	r2, [sp, #16]
 800cd68:	9907      	ldr	r1, [sp, #28]
 800cd6a:	1a9a      	subs	r2, r3, r2
 800cd6c:	eba3 0901 	sub.w	r9, r3, r1
 800cd70:	4591      	cmp	r9, r2
 800cd72:	bfa8      	it	ge
 800cd74:	4691      	movge	r9, r2
 800cd76:	f1b9 0f00 	cmp.w	r9, #0
 800cd7a:	dc35      	bgt.n	800cde8 <_printf_float+0x380>
 800cd7c:	f04f 0800 	mov.w	r8, #0
 800cd80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd84:	f104 0a1a 	add.w	sl, r4, #26
 800cd88:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cd8c:	1a9b      	subs	r3, r3, r2
 800cd8e:	eba3 0309 	sub.w	r3, r3, r9
 800cd92:	4543      	cmp	r3, r8
 800cd94:	f77f af75 	ble.w	800cc82 <_printf_float+0x21a>
 800cd98:	2301      	movs	r3, #1
 800cd9a:	4652      	mov	r2, sl
 800cd9c:	4631      	mov	r1, r6
 800cd9e:	4628      	mov	r0, r5
 800cda0:	47b8      	blx	r7
 800cda2:	3001      	adds	r0, #1
 800cda4:	f43f aeae 	beq.w	800cb04 <_printf_float+0x9c>
 800cda8:	f108 0801 	add.w	r8, r8, #1
 800cdac:	e7ec      	b.n	800cd88 <_printf_float+0x320>
 800cdae:	4613      	mov	r3, r2
 800cdb0:	4631      	mov	r1, r6
 800cdb2:	4642      	mov	r2, r8
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	47b8      	blx	r7
 800cdb8:	3001      	adds	r0, #1
 800cdba:	d1bf      	bne.n	800cd3c <_printf_float+0x2d4>
 800cdbc:	e6a2      	b.n	800cb04 <_printf_float+0x9c>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	4631      	mov	r1, r6
 800cdc2:	4628      	mov	r0, r5
 800cdc4:	9204      	str	r2, [sp, #16]
 800cdc6:	47b8      	blx	r7
 800cdc8:	3001      	adds	r0, #1
 800cdca:	f43f ae9b 	beq.w	800cb04 <_printf_float+0x9c>
 800cdce:	9b05      	ldr	r3, [sp, #20]
 800cdd0:	9a04      	ldr	r2, [sp, #16]
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	9305      	str	r3, [sp, #20]
 800cdd6:	e7b7      	b.n	800cd48 <_printf_float+0x2e0>
 800cdd8:	4653      	mov	r3, sl
 800cdda:	465a      	mov	r2, fp
 800cddc:	4631      	mov	r1, r6
 800cdde:	4628      	mov	r0, r5
 800cde0:	47b8      	blx	r7
 800cde2:	3001      	adds	r0, #1
 800cde4:	d1be      	bne.n	800cd64 <_printf_float+0x2fc>
 800cde6:	e68d      	b.n	800cb04 <_printf_float+0x9c>
 800cde8:	9a04      	ldr	r2, [sp, #16]
 800cdea:	464b      	mov	r3, r9
 800cdec:	4442      	add	r2, r8
 800cdee:	4631      	mov	r1, r6
 800cdf0:	4628      	mov	r0, r5
 800cdf2:	47b8      	blx	r7
 800cdf4:	3001      	adds	r0, #1
 800cdf6:	d1c1      	bne.n	800cd7c <_printf_float+0x314>
 800cdf8:	e684      	b.n	800cb04 <_printf_float+0x9c>
 800cdfa:	9a08      	ldr	r2, [sp, #32]
 800cdfc:	2a01      	cmp	r2, #1
 800cdfe:	dc01      	bgt.n	800ce04 <_printf_float+0x39c>
 800ce00:	07db      	lsls	r3, r3, #31
 800ce02:	d537      	bpl.n	800ce74 <_printf_float+0x40c>
 800ce04:	2301      	movs	r3, #1
 800ce06:	4642      	mov	r2, r8
 800ce08:	4631      	mov	r1, r6
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	47b8      	blx	r7
 800ce0e:	3001      	adds	r0, #1
 800ce10:	f43f ae78 	beq.w	800cb04 <_printf_float+0x9c>
 800ce14:	4653      	mov	r3, sl
 800ce16:	465a      	mov	r2, fp
 800ce18:	4631      	mov	r1, r6
 800ce1a:	4628      	mov	r0, r5
 800ce1c:	47b8      	blx	r7
 800ce1e:	3001      	adds	r0, #1
 800ce20:	f43f ae70 	beq.w	800cb04 <_printf_float+0x9c>
 800ce24:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ce28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ce2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce30:	d01b      	beq.n	800ce6a <_printf_float+0x402>
 800ce32:	9b08      	ldr	r3, [sp, #32]
 800ce34:	f108 0201 	add.w	r2, r8, #1
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	4631      	mov	r1, r6
 800ce3c:	4628      	mov	r0, r5
 800ce3e:	47b8      	blx	r7
 800ce40:	3001      	adds	r0, #1
 800ce42:	d10e      	bne.n	800ce62 <_printf_float+0x3fa>
 800ce44:	e65e      	b.n	800cb04 <_printf_float+0x9c>
 800ce46:	2301      	movs	r3, #1
 800ce48:	464a      	mov	r2, r9
 800ce4a:	4631      	mov	r1, r6
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	47b8      	blx	r7
 800ce50:	3001      	adds	r0, #1
 800ce52:	f43f ae57 	beq.w	800cb04 <_printf_float+0x9c>
 800ce56:	f108 0801 	add.w	r8, r8, #1
 800ce5a:	9b08      	ldr	r3, [sp, #32]
 800ce5c:	3b01      	subs	r3, #1
 800ce5e:	4543      	cmp	r3, r8
 800ce60:	dcf1      	bgt.n	800ce46 <_printf_float+0x3de>
 800ce62:	9b04      	ldr	r3, [sp, #16]
 800ce64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ce68:	e6db      	b.n	800cc22 <_printf_float+0x1ba>
 800ce6a:	f04f 0800 	mov.w	r8, #0
 800ce6e:	f104 091a 	add.w	r9, r4, #26
 800ce72:	e7f2      	b.n	800ce5a <_printf_float+0x3f2>
 800ce74:	2301      	movs	r3, #1
 800ce76:	4642      	mov	r2, r8
 800ce78:	e7df      	b.n	800ce3a <_printf_float+0x3d2>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	464a      	mov	r2, r9
 800ce7e:	4631      	mov	r1, r6
 800ce80:	4628      	mov	r0, r5
 800ce82:	47b8      	blx	r7
 800ce84:	3001      	adds	r0, #1
 800ce86:	f43f ae3d 	beq.w	800cb04 <_printf_float+0x9c>
 800ce8a:	f108 0801 	add.w	r8, r8, #1
 800ce8e:	68e3      	ldr	r3, [r4, #12]
 800ce90:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce92:	1a5b      	subs	r3, r3, r1
 800ce94:	4543      	cmp	r3, r8
 800ce96:	dcf0      	bgt.n	800ce7a <_printf_float+0x412>
 800ce98:	e6f7      	b.n	800cc8a <_printf_float+0x222>
 800ce9a:	f04f 0800 	mov.w	r8, #0
 800ce9e:	f104 0919 	add.w	r9, r4, #25
 800cea2:	e7f4      	b.n	800ce8e <_printf_float+0x426>

0800cea4 <_printf_common>:
 800cea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cea8:	4616      	mov	r6, r2
 800ceaa:	4699      	mov	r9, r3
 800ceac:	688a      	ldr	r2, [r1, #8]
 800ceae:	690b      	ldr	r3, [r1, #16]
 800ceb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	bfb8      	it	lt
 800ceb8:	4613      	movlt	r3, r2
 800ceba:	6033      	str	r3, [r6, #0]
 800cebc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cec0:	4607      	mov	r7, r0
 800cec2:	460c      	mov	r4, r1
 800cec4:	b10a      	cbz	r2, 800ceca <_printf_common+0x26>
 800cec6:	3301      	adds	r3, #1
 800cec8:	6033      	str	r3, [r6, #0]
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	0699      	lsls	r1, r3, #26
 800cece:	bf42      	ittt	mi
 800ced0:	6833      	ldrmi	r3, [r6, #0]
 800ced2:	3302      	addmi	r3, #2
 800ced4:	6033      	strmi	r3, [r6, #0]
 800ced6:	6825      	ldr	r5, [r4, #0]
 800ced8:	f015 0506 	ands.w	r5, r5, #6
 800cedc:	d106      	bne.n	800ceec <_printf_common+0x48>
 800cede:	f104 0a19 	add.w	sl, r4, #25
 800cee2:	68e3      	ldr	r3, [r4, #12]
 800cee4:	6832      	ldr	r2, [r6, #0]
 800cee6:	1a9b      	subs	r3, r3, r2
 800cee8:	42ab      	cmp	r3, r5
 800ceea:	dc26      	bgt.n	800cf3a <_printf_common+0x96>
 800ceec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cef0:	1e13      	subs	r3, r2, #0
 800cef2:	6822      	ldr	r2, [r4, #0]
 800cef4:	bf18      	it	ne
 800cef6:	2301      	movne	r3, #1
 800cef8:	0692      	lsls	r2, r2, #26
 800cefa:	d42b      	bmi.n	800cf54 <_printf_common+0xb0>
 800cefc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf00:	4649      	mov	r1, r9
 800cf02:	4638      	mov	r0, r7
 800cf04:	47c0      	blx	r8
 800cf06:	3001      	adds	r0, #1
 800cf08:	d01e      	beq.n	800cf48 <_printf_common+0xa4>
 800cf0a:	6823      	ldr	r3, [r4, #0]
 800cf0c:	68e5      	ldr	r5, [r4, #12]
 800cf0e:	6832      	ldr	r2, [r6, #0]
 800cf10:	f003 0306 	and.w	r3, r3, #6
 800cf14:	2b04      	cmp	r3, #4
 800cf16:	bf08      	it	eq
 800cf18:	1aad      	subeq	r5, r5, r2
 800cf1a:	68a3      	ldr	r3, [r4, #8]
 800cf1c:	6922      	ldr	r2, [r4, #16]
 800cf1e:	bf0c      	ite	eq
 800cf20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf24:	2500      	movne	r5, #0
 800cf26:	4293      	cmp	r3, r2
 800cf28:	bfc4      	itt	gt
 800cf2a:	1a9b      	subgt	r3, r3, r2
 800cf2c:	18ed      	addgt	r5, r5, r3
 800cf2e:	2600      	movs	r6, #0
 800cf30:	341a      	adds	r4, #26
 800cf32:	42b5      	cmp	r5, r6
 800cf34:	d11a      	bne.n	800cf6c <_printf_common+0xc8>
 800cf36:	2000      	movs	r0, #0
 800cf38:	e008      	b.n	800cf4c <_printf_common+0xa8>
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	4652      	mov	r2, sl
 800cf3e:	4649      	mov	r1, r9
 800cf40:	4638      	mov	r0, r7
 800cf42:	47c0      	blx	r8
 800cf44:	3001      	adds	r0, #1
 800cf46:	d103      	bne.n	800cf50 <_printf_common+0xac>
 800cf48:	f04f 30ff 	mov.w	r0, #4294967295
 800cf4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf50:	3501      	adds	r5, #1
 800cf52:	e7c6      	b.n	800cee2 <_printf_common+0x3e>
 800cf54:	18e1      	adds	r1, r4, r3
 800cf56:	1c5a      	adds	r2, r3, #1
 800cf58:	2030      	movs	r0, #48	; 0x30
 800cf5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf5e:	4422      	add	r2, r4
 800cf60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf68:	3302      	adds	r3, #2
 800cf6a:	e7c7      	b.n	800cefc <_printf_common+0x58>
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	4622      	mov	r2, r4
 800cf70:	4649      	mov	r1, r9
 800cf72:	4638      	mov	r0, r7
 800cf74:	47c0      	blx	r8
 800cf76:	3001      	adds	r0, #1
 800cf78:	d0e6      	beq.n	800cf48 <_printf_common+0xa4>
 800cf7a:	3601      	adds	r6, #1
 800cf7c:	e7d9      	b.n	800cf32 <_printf_common+0x8e>
	...

0800cf80 <_printf_i>:
 800cf80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf84:	7e0f      	ldrb	r7, [r1, #24]
 800cf86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cf88:	2f78      	cmp	r7, #120	; 0x78
 800cf8a:	4691      	mov	r9, r2
 800cf8c:	4680      	mov	r8, r0
 800cf8e:	460c      	mov	r4, r1
 800cf90:	469a      	mov	sl, r3
 800cf92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cf96:	d807      	bhi.n	800cfa8 <_printf_i+0x28>
 800cf98:	2f62      	cmp	r7, #98	; 0x62
 800cf9a:	d80a      	bhi.n	800cfb2 <_printf_i+0x32>
 800cf9c:	2f00      	cmp	r7, #0
 800cf9e:	f000 80d8 	beq.w	800d152 <_printf_i+0x1d2>
 800cfa2:	2f58      	cmp	r7, #88	; 0x58
 800cfa4:	f000 80a3 	beq.w	800d0ee <_printf_i+0x16e>
 800cfa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cfb0:	e03a      	b.n	800d028 <_printf_i+0xa8>
 800cfb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cfb6:	2b15      	cmp	r3, #21
 800cfb8:	d8f6      	bhi.n	800cfa8 <_printf_i+0x28>
 800cfba:	a101      	add	r1, pc, #4	; (adr r1, 800cfc0 <_printf_i+0x40>)
 800cfbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cfc0:	0800d019 	.word	0x0800d019
 800cfc4:	0800d02d 	.word	0x0800d02d
 800cfc8:	0800cfa9 	.word	0x0800cfa9
 800cfcc:	0800cfa9 	.word	0x0800cfa9
 800cfd0:	0800cfa9 	.word	0x0800cfa9
 800cfd4:	0800cfa9 	.word	0x0800cfa9
 800cfd8:	0800d02d 	.word	0x0800d02d
 800cfdc:	0800cfa9 	.word	0x0800cfa9
 800cfe0:	0800cfa9 	.word	0x0800cfa9
 800cfe4:	0800cfa9 	.word	0x0800cfa9
 800cfe8:	0800cfa9 	.word	0x0800cfa9
 800cfec:	0800d139 	.word	0x0800d139
 800cff0:	0800d05d 	.word	0x0800d05d
 800cff4:	0800d11b 	.word	0x0800d11b
 800cff8:	0800cfa9 	.word	0x0800cfa9
 800cffc:	0800cfa9 	.word	0x0800cfa9
 800d000:	0800d15b 	.word	0x0800d15b
 800d004:	0800cfa9 	.word	0x0800cfa9
 800d008:	0800d05d 	.word	0x0800d05d
 800d00c:	0800cfa9 	.word	0x0800cfa9
 800d010:	0800cfa9 	.word	0x0800cfa9
 800d014:	0800d123 	.word	0x0800d123
 800d018:	682b      	ldr	r3, [r5, #0]
 800d01a:	1d1a      	adds	r2, r3, #4
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	602a      	str	r2, [r5, #0]
 800d020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d028:	2301      	movs	r3, #1
 800d02a:	e0a3      	b.n	800d174 <_printf_i+0x1f4>
 800d02c:	6820      	ldr	r0, [r4, #0]
 800d02e:	6829      	ldr	r1, [r5, #0]
 800d030:	0606      	lsls	r6, r0, #24
 800d032:	f101 0304 	add.w	r3, r1, #4
 800d036:	d50a      	bpl.n	800d04e <_printf_i+0xce>
 800d038:	680e      	ldr	r6, [r1, #0]
 800d03a:	602b      	str	r3, [r5, #0]
 800d03c:	2e00      	cmp	r6, #0
 800d03e:	da03      	bge.n	800d048 <_printf_i+0xc8>
 800d040:	232d      	movs	r3, #45	; 0x2d
 800d042:	4276      	negs	r6, r6
 800d044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d048:	485e      	ldr	r0, [pc, #376]	; (800d1c4 <_printf_i+0x244>)
 800d04a:	230a      	movs	r3, #10
 800d04c:	e019      	b.n	800d082 <_printf_i+0x102>
 800d04e:	680e      	ldr	r6, [r1, #0]
 800d050:	602b      	str	r3, [r5, #0]
 800d052:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d056:	bf18      	it	ne
 800d058:	b236      	sxthne	r6, r6
 800d05a:	e7ef      	b.n	800d03c <_printf_i+0xbc>
 800d05c:	682b      	ldr	r3, [r5, #0]
 800d05e:	6820      	ldr	r0, [r4, #0]
 800d060:	1d19      	adds	r1, r3, #4
 800d062:	6029      	str	r1, [r5, #0]
 800d064:	0601      	lsls	r1, r0, #24
 800d066:	d501      	bpl.n	800d06c <_printf_i+0xec>
 800d068:	681e      	ldr	r6, [r3, #0]
 800d06a:	e002      	b.n	800d072 <_printf_i+0xf2>
 800d06c:	0646      	lsls	r6, r0, #25
 800d06e:	d5fb      	bpl.n	800d068 <_printf_i+0xe8>
 800d070:	881e      	ldrh	r6, [r3, #0]
 800d072:	4854      	ldr	r0, [pc, #336]	; (800d1c4 <_printf_i+0x244>)
 800d074:	2f6f      	cmp	r7, #111	; 0x6f
 800d076:	bf0c      	ite	eq
 800d078:	2308      	moveq	r3, #8
 800d07a:	230a      	movne	r3, #10
 800d07c:	2100      	movs	r1, #0
 800d07e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d082:	6865      	ldr	r5, [r4, #4]
 800d084:	60a5      	str	r5, [r4, #8]
 800d086:	2d00      	cmp	r5, #0
 800d088:	bfa2      	ittt	ge
 800d08a:	6821      	ldrge	r1, [r4, #0]
 800d08c:	f021 0104 	bicge.w	r1, r1, #4
 800d090:	6021      	strge	r1, [r4, #0]
 800d092:	b90e      	cbnz	r6, 800d098 <_printf_i+0x118>
 800d094:	2d00      	cmp	r5, #0
 800d096:	d04d      	beq.n	800d134 <_printf_i+0x1b4>
 800d098:	4615      	mov	r5, r2
 800d09a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d09e:	fb03 6711 	mls	r7, r3, r1, r6
 800d0a2:	5dc7      	ldrb	r7, [r0, r7]
 800d0a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d0a8:	4637      	mov	r7, r6
 800d0aa:	42bb      	cmp	r3, r7
 800d0ac:	460e      	mov	r6, r1
 800d0ae:	d9f4      	bls.n	800d09a <_printf_i+0x11a>
 800d0b0:	2b08      	cmp	r3, #8
 800d0b2:	d10b      	bne.n	800d0cc <_printf_i+0x14c>
 800d0b4:	6823      	ldr	r3, [r4, #0]
 800d0b6:	07de      	lsls	r6, r3, #31
 800d0b8:	d508      	bpl.n	800d0cc <_printf_i+0x14c>
 800d0ba:	6923      	ldr	r3, [r4, #16]
 800d0bc:	6861      	ldr	r1, [r4, #4]
 800d0be:	4299      	cmp	r1, r3
 800d0c0:	bfde      	ittt	le
 800d0c2:	2330      	movle	r3, #48	; 0x30
 800d0c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d0c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d0cc:	1b52      	subs	r2, r2, r5
 800d0ce:	6122      	str	r2, [r4, #16]
 800d0d0:	f8cd a000 	str.w	sl, [sp]
 800d0d4:	464b      	mov	r3, r9
 800d0d6:	aa03      	add	r2, sp, #12
 800d0d8:	4621      	mov	r1, r4
 800d0da:	4640      	mov	r0, r8
 800d0dc:	f7ff fee2 	bl	800cea4 <_printf_common>
 800d0e0:	3001      	adds	r0, #1
 800d0e2:	d14c      	bne.n	800d17e <_printf_i+0x1fe>
 800d0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e8:	b004      	add	sp, #16
 800d0ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ee:	4835      	ldr	r0, [pc, #212]	; (800d1c4 <_printf_i+0x244>)
 800d0f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d0f4:	6829      	ldr	r1, [r5, #0]
 800d0f6:	6823      	ldr	r3, [r4, #0]
 800d0f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d0fc:	6029      	str	r1, [r5, #0]
 800d0fe:	061d      	lsls	r5, r3, #24
 800d100:	d514      	bpl.n	800d12c <_printf_i+0x1ac>
 800d102:	07df      	lsls	r7, r3, #31
 800d104:	bf44      	itt	mi
 800d106:	f043 0320 	orrmi.w	r3, r3, #32
 800d10a:	6023      	strmi	r3, [r4, #0]
 800d10c:	b91e      	cbnz	r6, 800d116 <_printf_i+0x196>
 800d10e:	6823      	ldr	r3, [r4, #0]
 800d110:	f023 0320 	bic.w	r3, r3, #32
 800d114:	6023      	str	r3, [r4, #0]
 800d116:	2310      	movs	r3, #16
 800d118:	e7b0      	b.n	800d07c <_printf_i+0xfc>
 800d11a:	6823      	ldr	r3, [r4, #0]
 800d11c:	f043 0320 	orr.w	r3, r3, #32
 800d120:	6023      	str	r3, [r4, #0]
 800d122:	2378      	movs	r3, #120	; 0x78
 800d124:	4828      	ldr	r0, [pc, #160]	; (800d1c8 <_printf_i+0x248>)
 800d126:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d12a:	e7e3      	b.n	800d0f4 <_printf_i+0x174>
 800d12c:	0659      	lsls	r1, r3, #25
 800d12e:	bf48      	it	mi
 800d130:	b2b6      	uxthmi	r6, r6
 800d132:	e7e6      	b.n	800d102 <_printf_i+0x182>
 800d134:	4615      	mov	r5, r2
 800d136:	e7bb      	b.n	800d0b0 <_printf_i+0x130>
 800d138:	682b      	ldr	r3, [r5, #0]
 800d13a:	6826      	ldr	r6, [r4, #0]
 800d13c:	6961      	ldr	r1, [r4, #20]
 800d13e:	1d18      	adds	r0, r3, #4
 800d140:	6028      	str	r0, [r5, #0]
 800d142:	0635      	lsls	r5, r6, #24
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	d501      	bpl.n	800d14c <_printf_i+0x1cc>
 800d148:	6019      	str	r1, [r3, #0]
 800d14a:	e002      	b.n	800d152 <_printf_i+0x1d2>
 800d14c:	0670      	lsls	r0, r6, #25
 800d14e:	d5fb      	bpl.n	800d148 <_printf_i+0x1c8>
 800d150:	8019      	strh	r1, [r3, #0]
 800d152:	2300      	movs	r3, #0
 800d154:	6123      	str	r3, [r4, #16]
 800d156:	4615      	mov	r5, r2
 800d158:	e7ba      	b.n	800d0d0 <_printf_i+0x150>
 800d15a:	682b      	ldr	r3, [r5, #0]
 800d15c:	1d1a      	adds	r2, r3, #4
 800d15e:	602a      	str	r2, [r5, #0]
 800d160:	681d      	ldr	r5, [r3, #0]
 800d162:	6862      	ldr	r2, [r4, #4]
 800d164:	2100      	movs	r1, #0
 800d166:	4628      	mov	r0, r5
 800d168:	f7f3 f8c2 	bl	80002f0 <memchr>
 800d16c:	b108      	cbz	r0, 800d172 <_printf_i+0x1f2>
 800d16e:	1b40      	subs	r0, r0, r5
 800d170:	6060      	str	r0, [r4, #4]
 800d172:	6863      	ldr	r3, [r4, #4]
 800d174:	6123      	str	r3, [r4, #16]
 800d176:	2300      	movs	r3, #0
 800d178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d17c:	e7a8      	b.n	800d0d0 <_printf_i+0x150>
 800d17e:	6923      	ldr	r3, [r4, #16]
 800d180:	462a      	mov	r2, r5
 800d182:	4649      	mov	r1, r9
 800d184:	4640      	mov	r0, r8
 800d186:	47d0      	blx	sl
 800d188:	3001      	adds	r0, #1
 800d18a:	d0ab      	beq.n	800d0e4 <_printf_i+0x164>
 800d18c:	6823      	ldr	r3, [r4, #0]
 800d18e:	079b      	lsls	r3, r3, #30
 800d190:	d413      	bmi.n	800d1ba <_printf_i+0x23a>
 800d192:	68e0      	ldr	r0, [r4, #12]
 800d194:	9b03      	ldr	r3, [sp, #12]
 800d196:	4298      	cmp	r0, r3
 800d198:	bfb8      	it	lt
 800d19a:	4618      	movlt	r0, r3
 800d19c:	e7a4      	b.n	800d0e8 <_printf_i+0x168>
 800d19e:	2301      	movs	r3, #1
 800d1a0:	4632      	mov	r2, r6
 800d1a2:	4649      	mov	r1, r9
 800d1a4:	4640      	mov	r0, r8
 800d1a6:	47d0      	blx	sl
 800d1a8:	3001      	adds	r0, #1
 800d1aa:	d09b      	beq.n	800d0e4 <_printf_i+0x164>
 800d1ac:	3501      	adds	r5, #1
 800d1ae:	68e3      	ldr	r3, [r4, #12]
 800d1b0:	9903      	ldr	r1, [sp, #12]
 800d1b2:	1a5b      	subs	r3, r3, r1
 800d1b4:	42ab      	cmp	r3, r5
 800d1b6:	dcf2      	bgt.n	800d19e <_printf_i+0x21e>
 800d1b8:	e7eb      	b.n	800d192 <_printf_i+0x212>
 800d1ba:	2500      	movs	r5, #0
 800d1bc:	f104 0619 	add.w	r6, r4, #25
 800d1c0:	e7f5      	b.n	800d1ae <_printf_i+0x22e>
 800d1c2:	bf00      	nop
 800d1c4:	0800ff06 	.word	0x0800ff06
 800d1c8:	0800ff17 	.word	0x0800ff17

0800d1cc <iprintf>:
 800d1cc:	b40f      	push	{r0, r1, r2, r3}
 800d1ce:	4b0a      	ldr	r3, [pc, #40]	; (800d1f8 <iprintf+0x2c>)
 800d1d0:	b513      	push	{r0, r1, r4, lr}
 800d1d2:	681c      	ldr	r4, [r3, #0]
 800d1d4:	b124      	cbz	r4, 800d1e0 <iprintf+0x14>
 800d1d6:	69a3      	ldr	r3, [r4, #24]
 800d1d8:	b913      	cbnz	r3, 800d1e0 <iprintf+0x14>
 800d1da:	4620      	mov	r0, r4
 800d1dc:	f001 f8ac 	bl	800e338 <__sinit>
 800d1e0:	ab05      	add	r3, sp, #20
 800d1e2:	9a04      	ldr	r2, [sp, #16]
 800d1e4:	68a1      	ldr	r1, [r4, #8]
 800d1e6:	9301      	str	r3, [sp, #4]
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	f001 ffb7 	bl	800f15c <_vfiprintf_r>
 800d1ee:	b002      	add	sp, #8
 800d1f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1f4:	b004      	add	sp, #16
 800d1f6:	4770      	bx	lr
 800d1f8:	2400001c 	.word	0x2400001c

0800d1fc <_puts_r>:
 800d1fc:	b570      	push	{r4, r5, r6, lr}
 800d1fe:	460e      	mov	r6, r1
 800d200:	4605      	mov	r5, r0
 800d202:	b118      	cbz	r0, 800d20c <_puts_r+0x10>
 800d204:	6983      	ldr	r3, [r0, #24]
 800d206:	b90b      	cbnz	r3, 800d20c <_puts_r+0x10>
 800d208:	f001 f896 	bl	800e338 <__sinit>
 800d20c:	69ab      	ldr	r3, [r5, #24]
 800d20e:	68ac      	ldr	r4, [r5, #8]
 800d210:	b913      	cbnz	r3, 800d218 <_puts_r+0x1c>
 800d212:	4628      	mov	r0, r5
 800d214:	f001 f890 	bl	800e338 <__sinit>
 800d218:	4b2c      	ldr	r3, [pc, #176]	; (800d2cc <_puts_r+0xd0>)
 800d21a:	429c      	cmp	r4, r3
 800d21c:	d120      	bne.n	800d260 <_puts_r+0x64>
 800d21e:	686c      	ldr	r4, [r5, #4]
 800d220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d222:	07db      	lsls	r3, r3, #31
 800d224:	d405      	bmi.n	800d232 <_puts_r+0x36>
 800d226:	89a3      	ldrh	r3, [r4, #12]
 800d228:	0598      	lsls	r0, r3, #22
 800d22a:	d402      	bmi.n	800d232 <_puts_r+0x36>
 800d22c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d22e:	f001 f926 	bl	800e47e <__retarget_lock_acquire_recursive>
 800d232:	89a3      	ldrh	r3, [r4, #12]
 800d234:	0719      	lsls	r1, r3, #28
 800d236:	d51d      	bpl.n	800d274 <_puts_r+0x78>
 800d238:	6923      	ldr	r3, [r4, #16]
 800d23a:	b1db      	cbz	r3, 800d274 <_puts_r+0x78>
 800d23c:	3e01      	subs	r6, #1
 800d23e:	68a3      	ldr	r3, [r4, #8]
 800d240:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d244:	3b01      	subs	r3, #1
 800d246:	60a3      	str	r3, [r4, #8]
 800d248:	bb39      	cbnz	r1, 800d29a <_puts_r+0x9e>
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	da38      	bge.n	800d2c0 <_puts_r+0xc4>
 800d24e:	4622      	mov	r2, r4
 800d250:	210a      	movs	r1, #10
 800d252:	4628      	mov	r0, r5
 800d254:	f000 f89c 	bl	800d390 <__swbuf_r>
 800d258:	3001      	adds	r0, #1
 800d25a:	d011      	beq.n	800d280 <_puts_r+0x84>
 800d25c:	250a      	movs	r5, #10
 800d25e:	e011      	b.n	800d284 <_puts_r+0x88>
 800d260:	4b1b      	ldr	r3, [pc, #108]	; (800d2d0 <_puts_r+0xd4>)
 800d262:	429c      	cmp	r4, r3
 800d264:	d101      	bne.n	800d26a <_puts_r+0x6e>
 800d266:	68ac      	ldr	r4, [r5, #8]
 800d268:	e7da      	b.n	800d220 <_puts_r+0x24>
 800d26a:	4b1a      	ldr	r3, [pc, #104]	; (800d2d4 <_puts_r+0xd8>)
 800d26c:	429c      	cmp	r4, r3
 800d26e:	bf08      	it	eq
 800d270:	68ec      	ldreq	r4, [r5, #12]
 800d272:	e7d5      	b.n	800d220 <_puts_r+0x24>
 800d274:	4621      	mov	r1, r4
 800d276:	4628      	mov	r0, r5
 800d278:	f000 f8dc 	bl	800d434 <__swsetup_r>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	d0dd      	beq.n	800d23c <_puts_r+0x40>
 800d280:	f04f 35ff 	mov.w	r5, #4294967295
 800d284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d286:	07da      	lsls	r2, r3, #31
 800d288:	d405      	bmi.n	800d296 <_puts_r+0x9a>
 800d28a:	89a3      	ldrh	r3, [r4, #12]
 800d28c:	059b      	lsls	r3, r3, #22
 800d28e:	d402      	bmi.n	800d296 <_puts_r+0x9a>
 800d290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d292:	f001 f8f5 	bl	800e480 <__retarget_lock_release_recursive>
 800d296:	4628      	mov	r0, r5
 800d298:	bd70      	pop	{r4, r5, r6, pc}
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	da04      	bge.n	800d2a8 <_puts_r+0xac>
 800d29e:	69a2      	ldr	r2, [r4, #24]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	dc06      	bgt.n	800d2b2 <_puts_r+0xb6>
 800d2a4:	290a      	cmp	r1, #10
 800d2a6:	d004      	beq.n	800d2b2 <_puts_r+0xb6>
 800d2a8:	6823      	ldr	r3, [r4, #0]
 800d2aa:	1c5a      	adds	r2, r3, #1
 800d2ac:	6022      	str	r2, [r4, #0]
 800d2ae:	7019      	strb	r1, [r3, #0]
 800d2b0:	e7c5      	b.n	800d23e <_puts_r+0x42>
 800d2b2:	4622      	mov	r2, r4
 800d2b4:	4628      	mov	r0, r5
 800d2b6:	f000 f86b 	bl	800d390 <__swbuf_r>
 800d2ba:	3001      	adds	r0, #1
 800d2bc:	d1bf      	bne.n	800d23e <_puts_r+0x42>
 800d2be:	e7df      	b.n	800d280 <_puts_r+0x84>
 800d2c0:	6823      	ldr	r3, [r4, #0]
 800d2c2:	250a      	movs	r5, #10
 800d2c4:	1c5a      	adds	r2, r3, #1
 800d2c6:	6022      	str	r2, [r4, #0]
 800d2c8:	701d      	strb	r5, [r3, #0]
 800d2ca:	e7db      	b.n	800d284 <_puts_r+0x88>
 800d2cc:	0800ffd8 	.word	0x0800ffd8
 800d2d0:	0800fff8 	.word	0x0800fff8
 800d2d4:	0800ffb8 	.word	0x0800ffb8

0800d2d8 <puts>:
 800d2d8:	4b02      	ldr	r3, [pc, #8]	; (800d2e4 <puts+0xc>)
 800d2da:	4601      	mov	r1, r0
 800d2dc:	6818      	ldr	r0, [r3, #0]
 800d2de:	f7ff bf8d 	b.w	800d1fc <_puts_r>
 800d2e2:	bf00      	nop
 800d2e4:	2400001c 	.word	0x2400001c

0800d2e8 <sniprintf>:
 800d2e8:	b40c      	push	{r2, r3}
 800d2ea:	b530      	push	{r4, r5, lr}
 800d2ec:	4b17      	ldr	r3, [pc, #92]	; (800d34c <sniprintf+0x64>)
 800d2ee:	1e0c      	subs	r4, r1, #0
 800d2f0:	681d      	ldr	r5, [r3, #0]
 800d2f2:	b09d      	sub	sp, #116	; 0x74
 800d2f4:	da08      	bge.n	800d308 <sniprintf+0x20>
 800d2f6:	238b      	movs	r3, #139	; 0x8b
 800d2f8:	602b      	str	r3, [r5, #0]
 800d2fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d2fe:	b01d      	add	sp, #116	; 0x74
 800d300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d304:	b002      	add	sp, #8
 800d306:	4770      	bx	lr
 800d308:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d30c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d310:	bf14      	ite	ne
 800d312:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d316:	4623      	moveq	r3, r4
 800d318:	9304      	str	r3, [sp, #16]
 800d31a:	9307      	str	r3, [sp, #28]
 800d31c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d320:	9002      	str	r0, [sp, #8]
 800d322:	9006      	str	r0, [sp, #24]
 800d324:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d328:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d32a:	ab21      	add	r3, sp, #132	; 0x84
 800d32c:	a902      	add	r1, sp, #8
 800d32e:	4628      	mov	r0, r5
 800d330:	9301      	str	r3, [sp, #4]
 800d332:	f001 fde9 	bl	800ef08 <_svfiprintf_r>
 800d336:	1c43      	adds	r3, r0, #1
 800d338:	bfbc      	itt	lt
 800d33a:	238b      	movlt	r3, #139	; 0x8b
 800d33c:	602b      	strlt	r3, [r5, #0]
 800d33e:	2c00      	cmp	r4, #0
 800d340:	d0dd      	beq.n	800d2fe <sniprintf+0x16>
 800d342:	9b02      	ldr	r3, [sp, #8]
 800d344:	2200      	movs	r2, #0
 800d346:	701a      	strb	r2, [r3, #0]
 800d348:	e7d9      	b.n	800d2fe <sniprintf+0x16>
 800d34a:	bf00      	nop
 800d34c:	2400001c 	.word	0x2400001c

0800d350 <siprintf>:
 800d350:	b40e      	push	{r1, r2, r3}
 800d352:	b500      	push	{lr}
 800d354:	b09c      	sub	sp, #112	; 0x70
 800d356:	ab1d      	add	r3, sp, #116	; 0x74
 800d358:	9002      	str	r0, [sp, #8]
 800d35a:	9006      	str	r0, [sp, #24]
 800d35c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d360:	4809      	ldr	r0, [pc, #36]	; (800d388 <siprintf+0x38>)
 800d362:	9107      	str	r1, [sp, #28]
 800d364:	9104      	str	r1, [sp, #16]
 800d366:	4909      	ldr	r1, [pc, #36]	; (800d38c <siprintf+0x3c>)
 800d368:	f853 2b04 	ldr.w	r2, [r3], #4
 800d36c:	9105      	str	r1, [sp, #20]
 800d36e:	6800      	ldr	r0, [r0, #0]
 800d370:	9301      	str	r3, [sp, #4]
 800d372:	a902      	add	r1, sp, #8
 800d374:	f001 fdc8 	bl	800ef08 <_svfiprintf_r>
 800d378:	9b02      	ldr	r3, [sp, #8]
 800d37a:	2200      	movs	r2, #0
 800d37c:	701a      	strb	r2, [r3, #0]
 800d37e:	b01c      	add	sp, #112	; 0x70
 800d380:	f85d eb04 	ldr.w	lr, [sp], #4
 800d384:	b003      	add	sp, #12
 800d386:	4770      	bx	lr
 800d388:	2400001c 	.word	0x2400001c
 800d38c:	ffff0208 	.word	0xffff0208

0800d390 <__swbuf_r>:
 800d390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d392:	460e      	mov	r6, r1
 800d394:	4614      	mov	r4, r2
 800d396:	4605      	mov	r5, r0
 800d398:	b118      	cbz	r0, 800d3a2 <__swbuf_r+0x12>
 800d39a:	6983      	ldr	r3, [r0, #24]
 800d39c:	b90b      	cbnz	r3, 800d3a2 <__swbuf_r+0x12>
 800d39e:	f000 ffcb 	bl	800e338 <__sinit>
 800d3a2:	4b21      	ldr	r3, [pc, #132]	; (800d428 <__swbuf_r+0x98>)
 800d3a4:	429c      	cmp	r4, r3
 800d3a6:	d12b      	bne.n	800d400 <__swbuf_r+0x70>
 800d3a8:	686c      	ldr	r4, [r5, #4]
 800d3aa:	69a3      	ldr	r3, [r4, #24]
 800d3ac:	60a3      	str	r3, [r4, #8]
 800d3ae:	89a3      	ldrh	r3, [r4, #12]
 800d3b0:	071a      	lsls	r2, r3, #28
 800d3b2:	d52f      	bpl.n	800d414 <__swbuf_r+0x84>
 800d3b4:	6923      	ldr	r3, [r4, #16]
 800d3b6:	b36b      	cbz	r3, 800d414 <__swbuf_r+0x84>
 800d3b8:	6923      	ldr	r3, [r4, #16]
 800d3ba:	6820      	ldr	r0, [r4, #0]
 800d3bc:	1ac0      	subs	r0, r0, r3
 800d3be:	6963      	ldr	r3, [r4, #20]
 800d3c0:	b2f6      	uxtb	r6, r6
 800d3c2:	4283      	cmp	r3, r0
 800d3c4:	4637      	mov	r7, r6
 800d3c6:	dc04      	bgt.n	800d3d2 <__swbuf_r+0x42>
 800d3c8:	4621      	mov	r1, r4
 800d3ca:	4628      	mov	r0, r5
 800d3cc:	f000 ff20 	bl	800e210 <_fflush_r>
 800d3d0:	bb30      	cbnz	r0, 800d420 <__swbuf_r+0x90>
 800d3d2:	68a3      	ldr	r3, [r4, #8]
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	60a3      	str	r3, [r4, #8]
 800d3d8:	6823      	ldr	r3, [r4, #0]
 800d3da:	1c5a      	adds	r2, r3, #1
 800d3dc:	6022      	str	r2, [r4, #0]
 800d3de:	701e      	strb	r6, [r3, #0]
 800d3e0:	6963      	ldr	r3, [r4, #20]
 800d3e2:	3001      	adds	r0, #1
 800d3e4:	4283      	cmp	r3, r0
 800d3e6:	d004      	beq.n	800d3f2 <__swbuf_r+0x62>
 800d3e8:	89a3      	ldrh	r3, [r4, #12]
 800d3ea:	07db      	lsls	r3, r3, #31
 800d3ec:	d506      	bpl.n	800d3fc <__swbuf_r+0x6c>
 800d3ee:	2e0a      	cmp	r6, #10
 800d3f0:	d104      	bne.n	800d3fc <__swbuf_r+0x6c>
 800d3f2:	4621      	mov	r1, r4
 800d3f4:	4628      	mov	r0, r5
 800d3f6:	f000 ff0b 	bl	800e210 <_fflush_r>
 800d3fa:	b988      	cbnz	r0, 800d420 <__swbuf_r+0x90>
 800d3fc:	4638      	mov	r0, r7
 800d3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d400:	4b0a      	ldr	r3, [pc, #40]	; (800d42c <__swbuf_r+0x9c>)
 800d402:	429c      	cmp	r4, r3
 800d404:	d101      	bne.n	800d40a <__swbuf_r+0x7a>
 800d406:	68ac      	ldr	r4, [r5, #8]
 800d408:	e7cf      	b.n	800d3aa <__swbuf_r+0x1a>
 800d40a:	4b09      	ldr	r3, [pc, #36]	; (800d430 <__swbuf_r+0xa0>)
 800d40c:	429c      	cmp	r4, r3
 800d40e:	bf08      	it	eq
 800d410:	68ec      	ldreq	r4, [r5, #12]
 800d412:	e7ca      	b.n	800d3aa <__swbuf_r+0x1a>
 800d414:	4621      	mov	r1, r4
 800d416:	4628      	mov	r0, r5
 800d418:	f000 f80c 	bl	800d434 <__swsetup_r>
 800d41c:	2800      	cmp	r0, #0
 800d41e:	d0cb      	beq.n	800d3b8 <__swbuf_r+0x28>
 800d420:	f04f 37ff 	mov.w	r7, #4294967295
 800d424:	e7ea      	b.n	800d3fc <__swbuf_r+0x6c>
 800d426:	bf00      	nop
 800d428:	0800ffd8 	.word	0x0800ffd8
 800d42c:	0800fff8 	.word	0x0800fff8
 800d430:	0800ffb8 	.word	0x0800ffb8

0800d434 <__swsetup_r>:
 800d434:	4b32      	ldr	r3, [pc, #200]	; (800d500 <__swsetup_r+0xcc>)
 800d436:	b570      	push	{r4, r5, r6, lr}
 800d438:	681d      	ldr	r5, [r3, #0]
 800d43a:	4606      	mov	r6, r0
 800d43c:	460c      	mov	r4, r1
 800d43e:	b125      	cbz	r5, 800d44a <__swsetup_r+0x16>
 800d440:	69ab      	ldr	r3, [r5, #24]
 800d442:	b913      	cbnz	r3, 800d44a <__swsetup_r+0x16>
 800d444:	4628      	mov	r0, r5
 800d446:	f000 ff77 	bl	800e338 <__sinit>
 800d44a:	4b2e      	ldr	r3, [pc, #184]	; (800d504 <__swsetup_r+0xd0>)
 800d44c:	429c      	cmp	r4, r3
 800d44e:	d10f      	bne.n	800d470 <__swsetup_r+0x3c>
 800d450:	686c      	ldr	r4, [r5, #4]
 800d452:	89a3      	ldrh	r3, [r4, #12]
 800d454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d458:	0719      	lsls	r1, r3, #28
 800d45a:	d42c      	bmi.n	800d4b6 <__swsetup_r+0x82>
 800d45c:	06dd      	lsls	r5, r3, #27
 800d45e:	d411      	bmi.n	800d484 <__swsetup_r+0x50>
 800d460:	2309      	movs	r3, #9
 800d462:	6033      	str	r3, [r6, #0]
 800d464:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d468:	81a3      	strh	r3, [r4, #12]
 800d46a:	f04f 30ff 	mov.w	r0, #4294967295
 800d46e:	e03e      	b.n	800d4ee <__swsetup_r+0xba>
 800d470:	4b25      	ldr	r3, [pc, #148]	; (800d508 <__swsetup_r+0xd4>)
 800d472:	429c      	cmp	r4, r3
 800d474:	d101      	bne.n	800d47a <__swsetup_r+0x46>
 800d476:	68ac      	ldr	r4, [r5, #8]
 800d478:	e7eb      	b.n	800d452 <__swsetup_r+0x1e>
 800d47a:	4b24      	ldr	r3, [pc, #144]	; (800d50c <__swsetup_r+0xd8>)
 800d47c:	429c      	cmp	r4, r3
 800d47e:	bf08      	it	eq
 800d480:	68ec      	ldreq	r4, [r5, #12]
 800d482:	e7e6      	b.n	800d452 <__swsetup_r+0x1e>
 800d484:	0758      	lsls	r0, r3, #29
 800d486:	d512      	bpl.n	800d4ae <__swsetup_r+0x7a>
 800d488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d48a:	b141      	cbz	r1, 800d49e <__swsetup_r+0x6a>
 800d48c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d490:	4299      	cmp	r1, r3
 800d492:	d002      	beq.n	800d49a <__swsetup_r+0x66>
 800d494:	4630      	mov	r0, r6
 800d496:	f001 fbfb 	bl	800ec90 <_free_r>
 800d49a:	2300      	movs	r3, #0
 800d49c:	6363      	str	r3, [r4, #52]	; 0x34
 800d49e:	89a3      	ldrh	r3, [r4, #12]
 800d4a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d4a4:	81a3      	strh	r3, [r4, #12]
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	6063      	str	r3, [r4, #4]
 800d4aa:	6923      	ldr	r3, [r4, #16]
 800d4ac:	6023      	str	r3, [r4, #0]
 800d4ae:	89a3      	ldrh	r3, [r4, #12]
 800d4b0:	f043 0308 	orr.w	r3, r3, #8
 800d4b4:	81a3      	strh	r3, [r4, #12]
 800d4b6:	6923      	ldr	r3, [r4, #16]
 800d4b8:	b94b      	cbnz	r3, 800d4ce <__swsetup_r+0x9a>
 800d4ba:	89a3      	ldrh	r3, [r4, #12]
 800d4bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d4c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4c4:	d003      	beq.n	800d4ce <__swsetup_r+0x9a>
 800d4c6:	4621      	mov	r1, r4
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	f000 ffff 	bl	800e4cc <__smakebuf_r>
 800d4ce:	89a0      	ldrh	r0, [r4, #12]
 800d4d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4d4:	f010 0301 	ands.w	r3, r0, #1
 800d4d8:	d00a      	beq.n	800d4f0 <__swsetup_r+0xbc>
 800d4da:	2300      	movs	r3, #0
 800d4dc:	60a3      	str	r3, [r4, #8]
 800d4de:	6963      	ldr	r3, [r4, #20]
 800d4e0:	425b      	negs	r3, r3
 800d4e2:	61a3      	str	r3, [r4, #24]
 800d4e4:	6923      	ldr	r3, [r4, #16]
 800d4e6:	b943      	cbnz	r3, 800d4fa <__swsetup_r+0xc6>
 800d4e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4ec:	d1ba      	bne.n	800d464 <__swsetup_r+0x30>
 800d4ee:	bd70      	pop	{r4, r5, r6, pc}
 800d4f0:	0781      	lsls	r1, r0, #30
 800d4f2:	bf58      	it	pl
 800d4f4:	6963      	ldrpl	r3, [r4, #20]
 800d4f6:	60a3      	str	r3, [r4, #8]
 800d4f8:	e7f4      	b.n	800d4e4 <__swsetup_r+0xb0>
 800d4fa:	2000      	movs	r0, #0
 800d4fc:	e7f7      	b.n	800d4ee <__swsetup_r+0xba>
 800d4fe:	bf00      	nop
 800d500:	2400001c 	.word	0x2400001c
 800d504:	0800ffd8 	.word	0x0800ffd8
 800d508:	0800fff8 	.word	0x0800fff8
 800d50c:	0800ffb8 	.word	0x0800ffb8

0800d510 <quorem>:
 800d510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d514:	6903      	ldr	r3, [r0, #16]
 800d516:	690c      	ldr	r4, [r1, #16]
 800d518:	42a3      	cmp	r3, r4
 800d51a:	4607      	mov	r7, r0
 800d51c:	f2c0 8081 	blt.w	800d622 <quorem+0x112>
 800d520:	3c01      	subs	r4, #1
 800d522:	f101 0814 	add.w	r8, r1, #20
 800d526:	f100 0514 	add.w	r5, r0, #20
 800d52a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d52e:	9301      	str	r3, [sp, #4]
 800d530:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d534:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d538:	3301      	adds	r3, #1
 800d53a:	429a      	cmp	r2, r3
 800d53c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d540:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d544:	fbb2 f6f3 	udiv	r6, r2, r3
 800d548:	d331      	bcc.n	800d5ae <quorem+0x9e>
 800d54a:	f04f 0e00 	mov.w	lr, #0
 800d54e:	4640      	mov	r0, r8
 800d550:	46ac      	mov	ip, r5
 800d552:	46f2      	mov	sl, lr
 800d554:	f850 2b04 	ldr.w	r2, [r0], #4
 800d558:	b293      	uxth	r3, r2
 800d55a:	fb06 e303 	mla	r3, r6, r3, lr
 800d55e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d562:	b29b      	uxth	r3, r3
 800d564:	ebaa 0303 	sub.w	r3, sl, r3
 800d568:	f8dc a000 	ldr.w	sl, [ip]
 800d56c:	0c12      	lsrs	r2, r2, #16
 800d56e:	fa13 f38a 	uxtah	r3, r3, sl
 800d572:	fb06 e202 	mla	r2, r6, r2, lr
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	9b00      	ldr	r3, [sp, #0]
 800d57a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d57e:	b292      	uxth	r2, r2
 800d580:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d584:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d588:	f8bd 3000 	ldrh.w	r3, [sp]
 800d58c:	4581      	cmp	r9, r0
 800d58e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d592:	f84c 3b04 	str.w	r3, [ip], #4
 800d596:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d59a:	d2db      	bcs.n	800d554 <quorem+0x44>
 800d59c:	f855 300b 	ldr.w	r3, [r5, fp]
 800d5a0:	b92b      	cbnz	r3, 800d5ae <quorem+0x9e>
 800d5a2:	9b01      	ldr	r3, [sp, #4]
 800d5a4:	3b04      	subs	r3, #4
 800d5a6:	429d      	cmp	r5, r3
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	d32e      	bcc.n	800d60a <quorem+0xfa>
 800d5ac:	613c      	str	r4, [r7, #16]
 800d5ae:	4638      	mov	r0, r7
 800d5b0:	f001 fa56 	bl	800ea60 <__mcmp>
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	db24      	blt.n	800d602 <quorem+0xf2>
 800d5b8:	3601      	adds	r6, #1
 800d5ba:	4628      	mov	r0, r5
 800d5bc:	f04f 0c00 	mov.w	ip, #0
 800d5c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800d5c4:	f8d0 e000 	ldr.w	lr, [r0]
 800d5c8:	b293      	uxth	r3, r2
 800d5ca:	ebac 0303 	sub.w	r3, ip, r3
 800d5ce:	0c12      	lsrs	r2, r2, #16
 800d5d0:	fa13 f38e 	uxtah	r3, r3, lr
 800d5d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d5d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5e2:	45c1      	cmp	r9, r8
 800d5e4:	f840 3b04 	str.w	r3, [r0], #4
 800d5e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d5ec:	d2e8      	bcs.n	800d5c0 <quorem+0xb0>
 800d5ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d5f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5f6:	b922      	cbnz	r2, 800d602 <quorem+0xf2>
 800d5f8:	3b04      	subs	r3, #4
 800d5fa:	429d      	cmp	r5, r3
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	d30a      	bcc.n	800d616 <quorem+0x106>
 800d600:	613c      	str	r4, [r7, #16]
 800d602:	4630      	mov	r0, r6
 800d604:	b003      	add	sp, #12
 800d606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d60a:	6812      	ldr	r2, [r2, #0]
 800d60c:	3b04      	subs	r3, #4
 800d60e:	2a00      	cmp	r2, #0
 800d610:	d1cc      	bne.n	800d5ac <quorem+0x9c>
 800d612:	3c01      	subs	r4, #1
 800d614:	e7c7      	b.n	800d5a6 <quorem+0x96>
 800d616:	6812      	ldr	r2, [r2, #0]
 800d618:	3b04      	subs	r3, #4
 800d61a:	2a00      	cmp	r2, #0
 800d61c:	d1f0      	bne.n	800d600 <quorem+0xf0>
 800d61e:	3c01      	subs	r4, #1
 800d620:	e7eb      	b.n	800d5fa <quorem+0xea>
 800d622:	2000      	movs	r0, #0
 800d624:	e7ee      	b.n	800d604 <quorem+0xf4>
	...

0800d628 <_dtoa_r>:
 800d628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d62c:	ed2d 8b02 	vpush	{d8}
 800d630:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d632:	b091      	sub	sp, #68	; 0x44
 800d634:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d638:	ec59 8b10 	vmov	r8, r9, d0
 800d63c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800d63e:	9106      	str	r1, [sp, #24]
 800d640:	4606      	mov	r6, r0
 800d642:	9208      	str	r2, [sp, #32]
 800d644:	930c      	str	r3, [sp, #48]	; 0x30
 800d646:	b975      	cbnz	r5, 800d666 <_dtoa_r+0x3e>
 800d648:	2010      	movs	r0, #16
 800d64a:	f000 ff7f 	bl	800e54c <malloc>
 800d64e:	4602      	mov	r2, r0
 800d650:	6270      	str	r0, [r6, #36]	; 0x24
 800d652:	b920      	cbnz	r0, 800d65e <_dtoa_r+0x36>
 800d654:	4baa      	ldr	r3, [pc, #680]	; (800d900 <_dtoa_r+0x2d8>)
 800d656:	21ea      	movs	r1, #234	; 0xea
 800d658:	48aa      	ldr	r0, [pc, #680]	; (800d904 <_dtoa_r+0x2dc>)
 800d65a:	f001 ff15 	bl	800f488 <__assert_func>
 800d65e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d662:	6005      	str	r5, [r0, #0]
 800d664:	60c5      	str	r5, [r0, #12]
 800d666:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d668:	6819      	ldr	r1, [r3, #0]
 800d66a:	b151      	cbz	r1, 800d682 <_dtoa_r+0x5a>
 800d66c:	685a      	ldr	r2, [r3, #4]
 800d66e:	604a      	str	r2, [r1, #4]
 800d670:	2301      	movs	r3, #1
 800d672:	4093      	lsls	r3, r2
 800d674:	608b      	str	r3, [r1, #8]
 800d676:	4630      	mov	r0, r6
 800d678:	f000 ffb0 	bl	800e5dc <_Bfree>
 800d67c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d67e:	2200      	movs	r2, #0
 800d680:	601a      	str	r2, [r3, #0]
 800d682:	f1b9 0300 	subs.w	r3, r9, #0
 800d686:	bfbb      	ittet	lt
 800d688:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d68c:	9303      	strlt	r3, [sp, #12]
 800d68e:	2300      	movge	r3, #0
 800d690:	2201      	movlt	r2, #1
 800d692:	bfac      	ite	ge
 800d694:	6023      	strge	r3, [r4, #0]
 800d696:	6022      	strlt	r2, [r4, #0]
 800d698:	4b9b      	ldr	r3, [pc, #620]	; (800d908 <_dtoa_r+0x2e0>)
 800d69a:	9c03      	ldr	r4, [sp, #12]
 800d69c:	43a3      	bics	r3, r4
 800d69e:	d11c      	bne.n	800d6da <_dtoa_r+0xb2>
 800d6a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6a2:	f242 730f 	movw	r3, #9999	; 0x270f
 800d6a6:	6013      	str	r3, [r2, #0]
 800d6a8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d6ac:	ea53 0308 	orrs.w	r3, r3, r8
 800d6b0:	f000 84fd 	beq.w	800e0ae <_dtoa_r+0xa86>
 800d6b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d6b6:	b963      	cbnz	r3, 800d6d2 <_dtoa_r+0xaa>
 800d6b8:	4b94      	ldr	r3, [pc, #592]	; (800d90c <_dtoa_r+0x2e4>)
 800d6ba:	e01f      	b.n	800d6fc <_dtoa_r+0xd4>
 800d6bc:	4b94      	ldr	r3, [pc, #592]	; (800d910 <_dtoa_r+0x2e8>)
 800d6be:	9301      	str	r3, [sp, #4]
 800d6c0:	3308      	adds	r3, #8
 800d6c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d6c4:	6013      	str	r3, [r2, #0]
 800d6c6:	9801      	ldr	r0, [sp, #4]
 800d6c8:	b011      	add	sp, #68	; 0x44
 800d6ca:	ecbd 8b02 	vpop	{d8}
 800d6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6d2:	4b8e      	ldr	r3, [pc, #568]	; (800d90c <_dtoa_r+0x2e4>)
 800d6d4:	9301      	str	r3, [sp, #4]
 800d6d6:	3303      	adds	r3, #3
 800d6d8:	e7f3      	b.n	800d6c2 <_dtoa_r+0x9a>
 800d6da:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d6de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6e6:	d10b      	bne.n	800d700 <_dtoa_r+0xd8>
 800d6e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	6013      	str	r3, [r2, #0]
 800d6ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	f000 84d9 	beq.w	800e0a8 <_dtoa_r+0xa80>
 800d6f6:	4887      	ldr	r0, [pc, #540]	; (800d914 <_dtoa_r+0x2ec>)
 800d6f8:	6018      	str	r0, [r3, #0]
 800d6fa:	1e43      	subs	r3, r0, #1
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	e7e2      	b.n	800d6c6 <_dtoa_r+0x9e>
 800d700:	a90f      	add	r1, sp, #60	; 0x3c
 800d702:	aa0e      	add	r2, sp, #56	; 0x38
 800d704:	4630      	mov	r0, r6
 800d706:	eeb0 0b48 	vmov.f64	d0, d8
 800d70a:	f001 fa4f 	bl	800ebac <__d2b>
 800d70e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d712:	4605      	mov	r5, r0
 800d714:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d716:	2900      	cmp	r1, #0
 800d718:	d046      	beq.n	800d7a8 <_dtoa_r+0x180>
 800d71a:	ee18 4a90 	vmov	r4, s17
 800d71e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d722:	ec53 2b18 	vmov	r2, r3, d8
 800d726:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d72a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d72e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d732:	2400      	movs	r4, #0
 800d734:	ec43 2b16 	vmov	d6, r2, r3
 800d738:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d73c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800d8e8 <_dtoa_r+0x2c0>
 800d740:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d744:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800d8f0 <_dtoa_r+0x2c8>
 800d748:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d74c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800d8f8 <_dtoa_r+0x2d0>
 800d750:	ee07 1a90 	vmov	s15, r1
 800d754:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d758:	eeb0 7b46 	vmov.f64	d7, d6
 800d75c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d760:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d764:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d76c:	ee16 ba90 	vmov	fp, s13
 800d770:	940a      	str	r4, [sp, #40]	; 0x28
 800d772:	d508      	bpl.n	800d786 <_dtoa_r+0x15e>
 800d774:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d778:	eeb4 6b47 	vcmp.f64	d6, d7
 800d77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d780:	bf18      	it	ne
 800d782:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d786:	f1bb 0f16 	cmp.w	fp, #22
 800d78a:	d82f      	bhi.n	800d7ec <_dtoa_r+0x1c4>
 800d78c:	4b62      	ldr	r3, [pc, #392]	; (800d918 <_dtoa_r+0x2f0>)
 800d78e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d792:	ed93 7b00 	vldr	d7, [r3]
 800d796:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d79e:	d501      	bpl.n	800d7a4 <_dtoa_r+0x17c>
 800d7a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	e022      	b.n	800d7ee <_dtoa_r+0x1c6>
 800d7a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d7aa:	4401      	add	r1, r0
 800d7ac:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d7b0:	2b20      	cmp	r3, #32
 800d7b2:	bfc1      	itttt	gt
 800d7b4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d7b8:	fa04 f303 	lslgt.w	r3, r4, r3
 800d7bc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d7c0:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d7c4:	bfd6      	itet	le
 800d7c6:	f1c3 0320 	rsble	r3, r3, #32
 800d7ca:	ea43 0808 	orrgt.w	r8, r3, r8
 800d7ce:	fa08 f803 	lslle.w	r8, r8, r3
 800d7d2:	ee07 8a90 	vmov	s15, r8
 800d7d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d7da:	3901      	subs	r1, #1
 800d7dc:	ee17 4a90 	vmov	r4, s15
 800d7e0:	ec53 2b17 	vmov	r2, r3, d7
 800d7e4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d7e8:	2401      	movs	r4, #1
 800d7ea:	e7a3      	b.n	800d734 <_dtoa_r+0x10c>
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7f0:	1a43      	subs	r3, r0, r1
 800d7f2:	1e5a      	subs	r2, r3, #1
 800d7f4:	bf45      	ittet	mi
 800d7f6:	f1c3 0301 	rsbmi	r3, r3, #1
 800d7fa:	9304      	strmi	r3, [sp, #16]
 800d7fc:	2300      	movpl	r3, #0
 800d7fe:	2300      	movmi	r3, #0
 800d800:	9205      	str	r2, [sp, #20]
 800d802:	bf54      	ite	pl
 800d804:	9304      	strpl	r3, [sp, #16]
 800d806:	9305      	strmi	r3, [sp, #20]
 800d808:	f1bb 0f00 	cmp.w	fp, #0
 800d80c:	db18      	blt.n	800d840 <_dtoa_r+0x218>
 800d80e:	9b05      	ldr	r3, [sp, #20]
 800d810:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800d814:	445b      	add	r3, fp
 800d816:	9305      	str	r3, [sp, #20]
 800d818:	2300      	movs	r3, #0
 800d81a:	9a06      	ldr	r2, [sp, #24]
 800d81c:	2a09      	cmp	r2, #9
 800d81e:	d849      	bhi.n	800d8b4 <_dtoa_r+0x28c>
 800d820:	2a05      	cmp	r2, #5
 800d822:	bfc4      	itt	gt
 800d824:	3a04      	subgt	r2, #4
 800d826:	9206      	strgt	r2, [sp, #24]
 800d828:	9a06      	ldr	r2, [sp, #24]
 800d82a:	f1a2 0202 	sub.w	r2, r2, #2
 800d82e:	bfcc      	ite	gt
 800d830:	2400      	movgt	r4, #0
 800d832:	2401      	movle	r4, #1
 800d834:	2a03      	cmp	r2, #3
 800d836:	d848      	bhi.n	800d8ca <_dtoa_r+0x2a2>
 800d838:	e8df f002 	tbb	[pc, r2]
 800d83c:	3a2c2e0b 	.word	0x3a2c2e0b
 800d840:	9b04      	ldr	r3, [sp, #16]
 800d842:	2200      	movs	r2, #0
 800d844:	eba3 030b 	sub.w	r3, r3, fp
 800d848:	9304      	str	r3, [sp, #16]
 800d84a:	9209      	str	r2, [sp, #36]	; 0x24
 800d84c:	f1cb 0300 	rsb	r3, fp, #0
 800d850:	e7e3      	b.n	800d81a <_dtoa_r+0x1f2>
 800d852:	2200      	movs	r2, #0
 800d854:	9207      	str	r2, [sp, #28]
 800d856:	9a08      	ldr	r2, [sp, #32]
 800d858:	2a00      	cmp	r2, #0
 800d85a:	dc39      	bgt.n	800d8d0 <_dtoa_r+0x2a8>
 800d85c:	f04f 0a01 	mov.w	sl, #1
 800d860:	46d1      	mov	r9, sl
 800d862:	4652      	mov	r2, sl
 800d864:	f8cd a020 	str.w	sl, [sp, #32]
 800d868:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d86a:	2100      	movs	r1, #0
 800d86c:	6079      	str	r1, [r7, #4]
 800d86e:	2004      	movs	r0, #4
 800d870:	f100 0c14 	add.w	ip, r0, #20
 800d874:	4594      	cmp	ip, r2
 800d876:	6879      	ldr	r1, [r7, #4]
 800d878:	d92f      	bls.n	800d8da <_dtoa_r+0x2b2>
 800d87a:	4630      	mov	r0, r6
 800d87c:	930d      	str	r3, [sp, #52]	; 0x34
 800d87e:	f000 fe6d 	bl	800e55c <_Balloc>
 800d882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d884:	9001      	str	r0, [sp, #4]
 800d886:	4602      	mov	r2, r0
 800d888:	2800      	cmp	r0, #0
 800d88a:	d149      	bne.n	800d920 <_dtoa_r+0x2f8>
 800d88c:	4b23      	ldr	r3, [pc, #140]	; (800d91c <_dtoa_r+0x2f4>)
 800d88e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d892:	e6e1      	b.n	800d658 <_dtoa_r+0x30>
 800d894:	2201      	movs	r2, #1
 800d896:	e7dd      	b.n	800d854 <_dtoa_r+0x22c>
 800d898:	2200      	movs	r2, #0
 800d89a:	9207      	str	r2, [sp, #28]
 800d89c:	9a08      	ldr	r2, [sp, #32]
 800d89e:	eb0b 0a02 	add.w	sl, fp, r2
 800d8a2:	f10a 0901 	add.w	r9, sl, #1
 800d8a6:	464a      	mov	r2, r9
 800d8a8:	2a01      	cmp	r2, #1
 800d8aa:	bfb8      	it	lt
 800d8ac:	2201      	movlt	r2, #1
 800d8ae:	e7db      	b.n	800d868 <_dtoa_r+0x240>
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	e7f2      	b.n	800d89a <_dtoa_r+0x272>
 800d8b4:	2401      	movs	r4, #1
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800d8bc:	f04f 3aff 	mov.w	sl, #4294967295
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	46d1      	mov	r9, sl
 800d8c4:	2212      	movs	r2, #18
 800d8c6:	9108      	str	r1, [sp, #32]
 800d8c8:	e7ce      	b.n	800d868 <_dtoa_r+0x240>
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	9207      	str	r2, [sp, #28]
 800d8ce:	e7f5      	b.n	800d8bc <_dtoa_r+0x294>
 800d8d0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d8d4:	46d1      	mov	r9, sl
 800d8d6:	4652      	mov	r2, sl
 800d8d8:	e7c6      	b.n	800d868 <_dtoa_r+0x240>
 800d8da:	3101      	adds	r1, #1
 800d8dc:	6079      	str	r1, [r7, #4]
 800d8de:	0040      	lsls	r0, r0, #1
 800d8e0:	e7c6      	b.n	800d870 <_dtoa_r+0x248>
 800d8e2:	bf00      	nop
 800d8e4:	f3af 8000 	nop.w
 800d8e8:	636f4361 	.word	0x636f4361
 800d8ec:	3fd287a7 	.word	0x3fd287a7
 800d8f0:	8b60c8b3 	.word	0x8b60c8b3
 800d8f4:	3fc68a28 	.word	0x3fc68a28
 800d8f8:	509f79fb 	.word	0x509f79fb
 800d8fc:	3fd34413 	.word	0x3fd34413
 800d900:	0800ff35 	.word	0x0800ff35
 800d904:	0800ff4c 	.word	0x0800ff4c
 800d908:	7ff00000 	.word	0x7ff00000
 800d90c:	0800ff31 	.word	0x0800ff31
 800d910:	0800ff28 	.word	0x0800ff28
 800d914:	0800ff05 	.word	0x0800ff05
 800d918:	080100a0 	.word	0x080100a0
 800d91c:	0800ffa7 	.word	0x0800ffa7
 800d920:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d922:	9901      	ldr	r1, [sp, #4]
 800d924:	6011      	str	r1, [r2, #0]
 800d926:	f1b9 0f0e 	cmp.w	r9, #14
 800d92a:	d86c      	bhi.n	800da06 <_dtoa_r+0x3de>
 800d92c:	2c00      	cmp	r4, #0
 800d92e:	d06a      	beq.n	800da06 <_dtoa_r+0x3de>
 800d930:	f1bb 0f00 	cmp.w	fp, #0
 800d934:	f340 80a0 	ble.w	800da78 <_dtoa_r+0x450>
 800d938:	49c1      	ldr	r1, [pc, #772]	; (800dc40 <_dtoa_r+0x618>)
 800d93a:	f00b 020f 	and.w	r2, fp, #15
 800d93e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d942:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d946:	ed92 7b00 	vldr	d7, [r2]
 800d94a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d94e:	f000 8087 	beq.w	800da60 <_dtoa_r+0x438>
 800d952:	4abc      	ldr	r2, [pc, #752]	; (800dc44 <_dtoa_r+0x61c>)
 800d954:	ed92 6b08 	vldr	d6, [r2, #32]
 800d958:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d95c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d960:	f001 010f 	and.w	r1, r1, #15
 800d964:	2203      	movs	r2, #3
 800d966:	48b7      	ldr	r0, [pc, #732]	; (800dc44 <_dtoa_r+0x61c>)
 800d968:	2900      	cmp	r1, #0
 800d96a:	d17b      	bne.n	800da64 <_dtoa_r+0x43c>
 800d96c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d970:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d974:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d978:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d97a:	2900      	cmp	r1, #0
 800d97c:	f000 80a2 	beq.w	800dac4 <_dtoa_r+0x49c>
 800d980:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d984:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d988:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d990:	f140 8098 	bpl.w	800dac4 <_dtoa_r+0x49c>
 800d994:	f1b9 0f00 	cmp.w	r9, #0
 800d998:	f000 8094 	beq.w	800dac4 <_dtoa_r+0x49c>
 800d99c:	f1ba 0f00 	cmp.w	sl, #0
 800d9a0:	dd2f      	ble.n	800da02 <_dtoa_r+0x3da>
 800d9a2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d9a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d9aa:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d9ae:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d9b2:	3201      	adds	r2, #1
 800d9b4:	4650      	mov	r0, sl
 800d9b6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d9ba:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d9be:	ee07 2a90 	vmov	s15, r2
 800d9c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d9c6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d9ca:	ee15 4a90 	vmov	r4, s11
 800d9ce:	ec52 1b15 	vmov	r1, r2, d5
 800d9d2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	d177      	bne.n	800daca <_dtoa_r+0x4a2>
 800d9da:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d9de:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d9e2:	ec42 1b17 	vmov	d7, r1, r2
 800d9e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ee:	f300 8263 	bgt.w	800deb8 <_dtoa_r+0x890>
 800d9f2:	eeb1 7b47 	vneg.f64	d7, d7
 800d9f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9fe:	f100 8258 	bmi.w	800deb2 <_dtoa_r+0x88a>
 800da02:	ed8d 8b02 	vstr	d8, [sp, #8]
 800da06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da08:	2a00      	cmp	r2, #0
 800da0a:	f2c0 811d 	blt.w	800dc48 <_dtoa_r+0x620>
 800da0e:	f1bb 0f0e 	cmp.w	fp, #14
 800da12:	f300 8119 	bgt.w	800dc48 <_dtoa_r+0x620>
 800da16:	4b8a      	ldr	r3, [pc, #552]	; (800dc40 <_dtoa_r+0x618>)
 800da18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800da1c:	ed93 6b00 	vldr	d6, [r3]
 800da20:	9b08      	ldr	r3, [sp, #32]
 800da22:	2b00      	cmp	r3, #0
 800da24:	f280 80b7 	bge.w	800db96 <_dtoa_r+0x56e>
 800da28:	f1b9 0f00 	cmp.w	r9, #0
 800da2c:	f300 80b3 	bgt.w	800db96 <_dtoa_r+0x56e>
 800da30:	f040 823f 	bne.w	800deb2 <_dtoa_r+0x88a>
 800da34:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800da38:	ee26 6b07 	vmul.f64	d6, d6, d7
 800da3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da48:	464c      	mov	r4, r9
 800da4a:	464f      	mov	r7, r9
 800da4c:	f280 8215 	bge.w	800de7a <_dtoa_r+0x852>
 800da50:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800da54:	2331      	movs	r3, #49	; 0x31
 800da56:	f808 3b01 	strb.w	r3, [r8], #1
 800da5a:	f10b 0b01 	add.w	fp, fp, #1
 800da5e:	e211      	b.n	800de84 <_dtoa_r+0x85c>
 800da60:	2202      	movs	r2, #2
 800da62:	e780      	b.n	800d966 <_dtoa_r+0x33e>
 800da64:	07cc      	lsls	r4, r1, #31
 800da66:	d504      	bpl.n	800da72 <_dtoa_r+0x44a>
 800da68:	ed90 6b00 	vldr	d6, [r0]
 800da6c:	3201      	adds	r2, #1
 800da6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800da72:	1049      	asrs	r1, r1, #1
 800da74:	3008      	adds	r0, #8
 800da76:	e777      	b.n	800d968 <_dtoa_r+0x340>
 800da78:	d022      	beq.n	800dac0 <_dtoa_r+0x498>
 800da7a:	f1cb 0100 	rsb	r1, fp, #0
 800da7e:	4a70      	ldr	r2, [pc, #448]	; (800dc40 <_dtoa_r+0x618>)
 800da80:	f001 000f 	and.w	r0, r1, #15
 800da84:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800da88:	ed92 7b00 	vldr	d7, [r2]
 800da8c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800da90:	ed8d 7b02 	vstr	d7, [sp, #8]
 800da94:	486b      	ldr	r0, [pc, #428]	; (800dc44 <_dtoa_r+0x61c>)
 800da96:	1109      	asrs	r1, r1, #4
 800da98:	2400      	movs	r4, #0
 800da9a:	2202      	movs	r2, #2
 800da9c:	b929      	cbnz	r1, 800daaa <_dtoa_r+0x482>
 800da9e:	2c00      	cmp	r4, #0
 800daa0:	f43f af6a 	beq.w	800d978 <_dtoa_r+0x350>
 800daa4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800daa8:	e766      	b.n	800d978 <_dtoa_r+0x350>
 800daaa:	07cf      	lsls	r7, r1, #31
 800daac:	d505      	bpl.n	800daba <_dtoa_r+0x492>
 800daae:	ed90 6b00 	vldr	d6, [r0]
 800dab2:	3201      	adds	r2, #1
 800dab4:	2401      	movs	r4, #1
 800dab6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800daba:	1049      	asrs	r1, r1, #1
 800dabc:	3008      	adds	r0, #8
 800dabe:	e7ed      	b.n	800da9c <_dtoa_r+0x474>
 800dac0:	2202      	movs	r2, #2
 800dac2:	e759      	b.n	800d978 <_dtoa_r+0x350>
 800dac4:	465f      	mov	r7, fp
 800dac6:	4648      	mov	r0, r9
 800dac8:	e775      	b.n	800d9b6 <_dtoa_r+0x38e>
 800daca:	ec42 1b17 	vmov	d7, r1, r2
 800dace:	4a5c      	ldr	r2, [pc, #368]	; (800dc40 <_dtoa_r+0x618>)
 800dad0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800dad4:	ed12 4b02 	vldr	d4, [r2, #-8]
 800dad8:	9a01      	ldr	r2, [sp, #4]
 800dada:	1814      	adds	r4, r2, r0
 800dadc:	9a07      	ldr	r2, [sp, #28]
 800dade:	b352      	cbz	r2, 800db36 <_dtoa_r+0x50e>
 800dae0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800dae4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800dae8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800daec:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800daf0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800daf4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800daf8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dafc:	ee14 2a90 	vmov	r2, s9
 800db00:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800db04:	3230      	adds	r2, #48	; 0x30
 800db06:	ee36 6b45 	vsub.f64	d6, d6, d5
 800db0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800db0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db12:	f808 2b01 	strb.w	r2, [r8], #1
 800db16:	d439      	bmi.n	800db8c <_dtoa_r+0x564>
 800db18:	ee32 5b46 	vsub.f64	d5, d2, d6
 800db1c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800db20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db24:	d472      	bmi.n	800dc0c <_dtoa_r+0x5e4>
 800db26:	45a0      	cmp	r8, r4
 800db28:	f43f af6b 	beq.w	800da02 <_dtoa_r+0x3da>
 800db2c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800db30:	ee26 6b03 	vmul.f64	d6, d6, d3
 800db34:	e7e0      	b.n	800daf8 <_dtoa_r+0x4d0>
 800db36:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800db3a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800db3e:	4621      	mov	r1, r4
 800db40:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800db44:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800db48:	ee14 2a90 	vmov	r2, s9
 800db4c:	3230      	adds	r2, #48	; 0x30
 800db4e:	f808 2b01 	strb.w	r2, [r8], #1
 800db52:	45a0      	cmp	r8, r4
 800db54:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800db58:	ee36 6b45 	vsub.f64	d6, d6, d5
 800db5c:	d118      	bne.n	800db90 <_dtoa_r+0x568>
 800db5e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800db62:	ee37 4b05 	vadd.f64	d4, d7, d5
 800db66:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800db6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db6e:	dc4d      	bgt.n	800dc0c <_dtoa_r+0x5e4>
 800db70:	ee35 7b47 	vsub.f64	d7, d5, d7
 800db74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800db78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db7c:	f57f af41 	bpl.w	800da02 <_dtoa_r+0x3da>
 800db80:	4688      	mov	r8, r1
 800db82:	3901      	subs	r1, #1
 800db84:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800db88:	2b30      	cmp	r3, #48	; 0x30
 800db8a:	d0f9      	beq.n	800db80 <_dtoa_r+0x558>
 800db8c:	46bb      	mov	fp, r7
 800db8e:	e02a      	b.n	800dbe6 <_dtoa_r+0x5be>
 800db90:	ee26 6b03 	vmul.f64	d6, d6, d3
 800db94:	e7d6      	b.n	800db44 <_dtoa_r+0x51c>
 800db96:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db9a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800db9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dba2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800dba6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800dbaa:	ee15 3a10 	vmov	r3, s10
 800dbae:	3330      	adds	r3, #48	; 0x30
 800dbb0:	f808 3b01 	strb.w	r3, [r8], #1
 800dbb4:	9b01      	ldr	r3, [sp, #4]
 800dbb6:	eba8 0303 	sub.w	r3, r8, r3
 800dbba:	4599      	cmp	r9, r3
 800dbbc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800dbc0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800dbc4:	d133      	bne.n	800dc2e <_dtoa_r+0x606>
 800dbc6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dbca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dbce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbd2:	dc1a      	bgt.n	800dc0a <_dtoa_r+0x5e2>
 800dbd4:	eeb4 7b46 	vcmp.f64	d7, d6
 800dbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbdc:	d103      	bne.n	800dbe6 <_dtoa_r+0x5be>
 800dbde:	ee15 3a10 	vmov	r3, s10
 800dbe2:	07d9      	lsls	r1, r3, #31
 800dbe4:	d411      	bmi.n	800dc0a <_dtoa_r+0x5e2>
 800dbe6:	4629      	mov	r1, r5
 800dbe8:	4630      	mov	r0, r6
 800dbea:	f000 fcf7 	bl	800e5dc <_Bfree>
 800dbee:	2300      	movs	r3, #0
 800dbf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dbf2:	f888 3000 	strb.w	r3, [r8]
 800dbf6:	f10b 0301 	add.w	r3, fp, #1
 800dbfa:	6013      	str	r3, [r2, #0]
 800dbfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	f43f ad61 	beq.w	800d6c6 <_dtoa_r+0x9e>
 800dc04:	f8c3 8000 	str.w	r8, [r3]
 800dc08:	e55d      	b.n	800d6c6 <_dtoa_r+0x9e>
 800dc0a:	465f      	mov	r7, fp
 800dc0c:	4643      	mov	r3, r8
 800dc0e:	4698      	mov	r8, r3
 800dc10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc14:	2a39      	cmp	r2, #57	; 0x39
 800dc16:	d106      	bne.n	800dc26 <_dtoa_r+0x5fe>
 800dc18:	9a01      	ldr	r2, [sp, #4]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d1f7      	bne.n	800dc0e <_dtoa_r+0x5e6>
 800dc1e:	9901      	ldr	r1, [sp, #4]
 800dc20:	2230      	movs	r2, #48	; 0x30
 800dc22:	3701      	adds	r7, #1
 800dc24:	700a      	strb	r2, [r1, #0]
 800dc26:	781a      	ldrb	r2, [r3, #0]
 800dc28:	3201      	adds	r2, #1
 800dc2a:	701a      	strb	r2, [r3, #0]
 800dc2c:	e7ae      	b.n	800db8c <_dtoa_r+0x564>
 800dc2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dc32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc3a:	d1b2      	bne.n	800dba2 <_dtoa_r+0x57a>
 800dc3c:	e7d3      	b.n	800dbe6 <_dtoa_r+0x5be>
 800dc3e:	bf00      	nop
 800dc40:	080100a0 	.word	0x080100a0
 800dc44:	08010078 	.word	0x08010078
 800dc48:	9907      	ldr	r1, [sp, #28]
 800dc4a:	2900      	cmp	r1, #0
 800dc4c:	f000 80d0 	beq.w	800ddf0 <_dtoa_r+0x7c8>
 800dc50:	9906      	ldr	r1, [sp, #24]
 800dc52:	2901      	cmp	r1, #1
 800dc54:	f300 80b4 	bgt.w	800ddc0 <_dtoa_r+0x798>
 800dc58:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dc5a:	2900      	cmp	r1, #0
 800dc5c:	f000 80ac 	beq.w	800ddb8 <_dtoa_r+0x790>
 800dc60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dc64:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800dc68:	461c      	mov	r4, r3
 800dc6a:	930a      	str	r3, [sp, #40]	; 0x28
 800dc6c:	9b04      	ldr	r3, [sp, #16]
 800dc6e:	4413      	add	r3, r2
 800dc70:	9304      	str	r3, [sp, #16]
 800dc72:	9b05      	ldr	r3, [sp, #20]
 800dc74:	2101      	movs	r1, #1
 800dc76:	4413      	add	r3, r2
 800dc78:	4630      	mov	r0, r6
 800dc7a:	9305      	str	r3, [sp, #20]
 800dc7c:	f000 fd66 	bl	800e74c <__i2b>
 800dc80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc82:	4607      	mov	r7, r0
 800dc84:	f1b8 0f00 	cmp.w	r8, #0
 800dc88:	dd0d      	ble.n	800dca6 <_dtoa_r+0x67e>
 800dc8a:	9a05      	ldr	r2, [sp, #20]
 800dc8c:	2a00      	cmp	r2, #0
 800dc8e:	dd0a      	ble.n	800dca6 <_dtoa_r+0x67e>
 800dc90:	4542      	cmp	r2, r8
 800dc92:	9904      	ldr	r1, [sp, #16]
 800dc94:	bfa8      	it	ge
 800dc96:	4642      	movge	r2, r8
 800dc98:	1a89      	subs	r1, r1, r2
 800dc9a:	9104      	str	r1, [sp, #16]
 800dc9c:	9905      	ldr	r1, [sp, #20]
 800dc9e:	eba8 0802 	sub.w	r8, r8, r2
 800dca2:	1a8a      	subs	r2, r1, r2
 800dca4:	9205      	str	r2, [sp, #20]
 800dca6:	b303      	cbz	r3, 800dcea <_dtoa_r+0x6c2>
 800dca8:	9a07      	ldr	r2, [sp, #28]
 800dcaa:	2a00      	cmp	r2, #0
 800dcac:	f000 80a5 	beq.w	800ddfa <_dtoa_r+0x7d2>
 800dcb0:	2c00      	cmp	r4, #0
 800dcb2:	dd13      	ble.n	800dcdc <_dtoa_r+0x6b4>
 800dcb4:	4639      	mov	r1, r7
 800dcb6:	4622      	mov	r2, r4
 800dcb8:	4630      	mov	r0, r6
 800dcba:	930d      	str	r3, [sp, #52]	; 0x34
 800dcbc:	f000 fe06 	bl	800e8cc <__pow5mult>
 800dcc0:	462a      	mov	r2, r5
 800dcc2:	4601      	mov	r1, r0
 800dcc4:	4607      	mov	r7, r0
 800dcc6:	4630      	mov	r0, r6
 800dcc8:	f000 fd56 	bl	800e778 <__multiply>
 800dccc:	4629      	mov	r1, r5
 800dcce:	900a      	str	r0, [sp, #40]	; 0x28
 800dcd0:	4630      	mov	r0, r6
 800dcd2:	f000 fc83 	bl	800e5dc <_Bfree>
 800dcd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcda:	4615      	mov	r5, r2
 800dcdc:	1b1a      	subs	r2, r3, r4
 800dcde:	d004      	beq.n	800dcea <_dtoa_r+0x6c2>
 800dce0:	4629      	mov	r1, r5
 800dce2:	4630      	mov	r0, r6
 800dce4:	f000 fdf2 	bl	800e8cc <__pow5mult>
 800dce8:	4605      	mov	r5, r0
 800dcea:	2101      	movs	r1, #1
 800dcec:	4630      	mov	r0, r6
 800dcee:	f000 fd2d 	bl	800e74c <__i2b>
 800dcf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	4604      	mov	r4, r0
 800dcf8:	f340 8081 	ble.w	800ddfe <_dtoa_r+0x7d6>
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	4601      	mov	r1, r0
 800dd00:	4630      	mov	r0, r6
 800dd02:	f000 fde3 	bl	800e8cc <__pow5mult>
 800dd06:	9b06      	ldr	r3, [sp, #24]
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	4604      	mov	r4, r0
 800dd0c:	dd7a      	ble.n	800de04 <_dtoa_r+0x7dc>
 800dd0e:	2300      	movs	r3, #0
 800dd10:	930a      	str	r3, [sp, #40]	; 0x28
 800dd12:	6922      	ldr	r2, [r4, #16]
 800dd14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dd18:	6910      	ldr	r0, [r2, #16]
 800dd1a:	f000 fcc7 	bl	800e6ac <__hi0bits>
 800dd1e:	f1c0 0020 	rsb	r0, r0, #32
 800dd22:	9b05      	ldr	r3, [sp, #20]
 800dd24:	4418      	add	r0, r3
 800dd26:	f010 001f 	ands.w	r0, r0, #31
 800dd2a:	f000 808c 	beq.w	800de46 <_dtoa_r+0x81e>
 800dd2e:	f1c0 0220 	rsb	r2, r0, #32
 800dd32:	2a04      	cmp	r2, #4
 800dd34:	f340 8085 	ble.w	800de42 <_dtoa_r+0x81a>
 800dd38:	f1c0 001c 	rsb	r0, r0, #28
 800dd3c:	9b04      	ldr	r3, [sp, #16]
 800dd3e:	4403      	add	r3, r0
 800dd40:	9304      	str	r3, [sp, #16]
 800dd42:	9b05      	ldr	r3, [sp, #20]
 800dd44:	4403      	add	r3, r0
 800dd46:	4480      	add	r8, r0
 800dd48:	9305      	str	r3, [sp, #20]
 800dd4a:	9b04      	ldr	r3, [sp, #16]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	dd05      	ble.n	800dd5c <_dtoa_r+0x734>
 800dd50:	4629      	mov	r1, r5
 800dd52:	461a      	mov	r2, r3
 800dd54:	4630      	mov	r0, r6
 800dd56:	f000 fe13 	bl	800e980 <__lshift>
 800dd5a:	4605      	mov	r5, r0
 800dd5c:	9b05      	ldr	r3, [sp, #20]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	dd05      	ble.n	800dd6e <_dtoa_r+0x746>
 800dd62:	4621      	mov	r1, r4
 800dd64:	461a      	mov	r2, r3
 800dd66:	4630      	mov	r0, r6
 800dd68:	f000 fe0a 	bl	800e980 <__lshift>
 800dd6c:	4604      	mov	r4, r0
 800dd6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d06a      	beq.n	800de4a <_dtoa_r+0x822>
 800dd74:	4621      	mov	r1, r4
 800dd76:	4628      	mov	r0, r5
 800dd78:	f000 fe72 	bl	800ea60 <__mcmp>
 800dd7c:	2800      	cmp	r0, #0
 800dd7e:	da64      	bge.n	800de4a <_dtoa_r+0x822>
 800dd80:	2300      	movs	r3, #0
 800dd82:	4629      	mov	r1, r5
 800dd84:	220a      	movs	r2, #10
 800dd86:	4630      	mov	r0, r6
 800dd88:	f000 fc4a 	bl	800e620 <__multadd>
 800dd8c:	9b07      	ldr	r3, [sp, #28]
 800dd8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dd92:	4605      	mov	r5, r0
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	f000 8191 	beq.w	800e0bc <_dtoa_r+0xa94>
 800dd9a:	4639      	mov	r1, r7
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	220a      	movs	r2, #10
 800dda0:	4630      	mov	r0, r6
 800dda2:	f000 fc3d 	bl	800e620 <__multadd>
 800dda6:	f1ba 0f00 	cmp.w	sl, #0
 800ddaa:	4607      	mov	r7, r0
 800ddac:	f300 808d 	bgt.w	800deca <_dtoa_r+0x8a2>
 800ddb0:	9b06      	ldr	r3, [sp, #24]
 800ddb2:	2b02      	cmp	r3, #2
 800ddb4:	dc50      	bgt.n	800de58 <_dtoa_r+0x830>
 800ddb6:	e088      	b.n	800deca <_dtoa_r+0x8a2>
 800ddb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ddba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ddbe:	e751      	b.n	800dc64 <_dtoa_r+0x63c>
 800ddc0:	f109 34ff 	add.w	r4, r9, #4294967295
 800ddc4:	42a3      	cmp	r3, r4
 800ddc6:	bfbf      	itttt	lt
 800ddc8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800ddca:	1ae3      	sublt	r3, r4, r3
 800ddcc:	18d2      	addlt	r2, r2, r3
 800ddce:	9209      	strlt	r2, [sp, #36]	; 0x24
 800ddd0:	bfb6      	itet	lt
 800ddd2:	4623      	movlt	r3, r4
 800ddd4:	1b1c      	subge	r4, r3, r4
 800ddd6:	2400      	movlt	r4, #0
 800ddd8:	f1b9 0f00 	cmp.w	r9, #0
 800dddc:	bfb5      	itete	lt
 800ddde:	9a04      	ldrlt	r2, [sp, #16]
 800dde0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800dde4:	eba2 0809 	sublt.w	r8, r2, r9
 800dde8:	464a      	movge	r2, r9
 800ddea:	bfb8      	it	lt
 800ddec:	2200      	movlt	r2, #0
 800ddee:	e73c      	b.n	800dc6a <_dtoa_r+0x642>
 800ddf0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ddf4:	9f07      	ldr	r7, [sp, #28]
 800ddf6:	461c      	mov	r4, r3
 800ddf8:	e744      	b.n	800dc84 <_dtoa_r+0x65c>
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	e770      	b.n	800dce0 <_dtoa_r+0x6b8>
 800ddfe:	9b06      	ldr	r3, [sp, #24]
 800de00:	2b01      	cmp	r3, #1
 800de02:	dc18      	bgt.n	800de36 <_dtoa_r+0x80e>
 800de04:	9b02      	ldr	r3, [sp, #8]
 800de06:	b9b3      	cbnz	r3, 800de36 <_dtoa_r+0x80e>
 800de08:	9b03      	ldr	r3, [sp, #12]
 800de0a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800de0e:	b9a2      	cbnz	r2, 800de3a <_dtoa_r+0x812>
 800de10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800de14:	0d12      	lsrs	r2, r2, #20
 800de16:	0512      	lsls	r2, r2, #20
 800de18:	b18a      	cbz	r2, 800de3e <_dtoa_r+0x816>
 800de1a:	9b04      	ldr	r3, [sp, #16]
 800de1c:	3301      	adds	r3, #1
 800de1e:	9304      	str	r3, [sp, #16]
 800de20:	9b05      	ldr	r3, [sp, #20]
 800de22:	3301      	adds	r3, #1
 800de24:	9305      	str	r3, [sp, #20]
 800de26:	2301      	movs	r3, #1
 800de28:	930a      	str	r3, [sp, #40]	; 0x28
 800de2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f47f af70 	bne.w	800dd12 <_dtoa_r+0x6ea>
 800de32:	2001      	movs	r0, #1
 800de34:	e775      	b.n	800dd22 <_dtoa_r+0x6fa>
 800de36:	2300      	movs	r3, #0
 800de38:	e7f6      	b.n	800de28 <_dtoa_r+0x800>
 800de3a:	9b02      	ldr	r3, [sp, #8]
 800de3c:	e7f4      	b.n	800de28 <_dtoa_r+0x800>
 800de3e:	920a      	str	r2, [sp, #40]	; 0x28
 800de40:	e7f3      	b.n	800de2a <_dtoa_r+0x802>
 800de42:	d082      	beq.n	800dd4a <_dtoa_r+0x722>
 800de44:	4610      	mov	r0, r2
 800de46:	301c      	adds	r0, #28
 800de48:	e778      	b.n	800dd3c <_dtoa_r+0x714>
 800de4a:	f1b9 0f00 	cmp.w	r9, #0
 800de4e:	dc37      	bgt.n	800dec0 <_dtoa_r+0x898>
 800de50:	9b06      	ldr	r3, [sp, #24]
 800de52:	2b02      	cmp	r3, #2
 800de54:	dd34      	ble.n	800dec0 <_dtoa_r+0x898>
 800de56:	46ca      	mov	sl, r9
 800de58:	f1ba 0f00 	cmp.w	sl, #0
 800de5c:	d10d      	bne.n	800de7a <_dtoa_r+0x852>
 800de5e:	4621      	mov	r1, r4
 800de60:	4653      	mov	r3, sl
 800de62:	2205      	movs	r2, #5
 800de64:	4630      	mov	r0, r6
 800de66:	f000 fbdb 	bl	800e620 <__multadd>
 800de6a:	4601      	mov	r1, r0
 800de6c:	4604      	mov	r4, r0
 800de6e:	4628      	mov	r0, r5
 800de70:	f000 fdf6 	bl	800ea60 <__mcmp>
 800de74:	2800      	cmp	r0, #0
 800de76:	f73f adeb 	bgt.w	800da50 <_dtoa_r+0x428>
 800de7a:	9b08      	ldr	r3, [sp, #32]
 800de7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800de80:	ea6f 0b03 	mvn.w	fp, r3
 800de84:	f04f 0900 	mov.w	r9, #0
 800de88:	4621      	mov	r1, r4
 800de8a:	4630      	mov	r0, r6
 800de8c:	f000 fba6 	bl	800e5dc <_Bfree>
 800de90:	2f00      	cmp	r7, #0
 800de92:	f43f aea8 	beq.w	800dbe6 <_dtoa_r+0x5be>
 800de96:	f1b9 0f00 	cmp.w	r9, #0
 800de9a:	d005      	beq.n	800dea8 <_dtoa_r+0x880>
 800de9c:	45b9      	cmp	r9, r7
 800de9e:	d003      	beq.n	800dea8 <_dtoa_r+0x880>
 800dea0:	4649      	mov	r1, r9
 800dea2:	4630      	mov	r0, r6
 800dea4:	f000 fb9a 	bl	800e5dc <_Bfree>
 800dea8:	4639      	mov	r1, r7
 800deaa:	4630      	mov	r0, r6
 800deac:	f000 fb96 	bl	800e5dc <_Bfree>
 800deb0:	e699      	b.n	800dbe6 <_dtoa_r+0x5be>
 800deb2:	2400      	movs	r4, #0
 800deb4:	4627      	mov	r7, r4
 800deb6:	e7e0      	b.n	800de7a <_dtoa_r+0x852>
 800deb8:	46bb      	mov	fp, r7
 800deba:	4604      	mov	r4, r0
 800debc:	4607      	mov	r7, r0
 800debe:	e5c7      	b.n	800da50 <_dtoa_r+0x428>
 800dec0:	9b07      	ldr	r3, [sp, #28]
 800dec2:	46ca      	mov	sl, r9
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	f000 8100 	beq.w	800e0ca <_dtoa_r+0xaa2>
 800deca:	f1b8 0f00 	cmp.w	r8, #0
 800dece:	dd05      	ble.n	800dedc <_dtoa_r+0x8b4>
 800ded0:	4639      	mov	r1, r7
 800ded2:	4642      	mov	r2, r8
 800ded4:	4630      	mov	r0, r6
 800ded6:	f000 fd53 	bl	800e980 <__lshift>
 800deda:	4607      	mov	r7, r0
 800dedc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d05d      	beq.n	800df9e <_dtoa_r+0x976>
 800dee2:	6879      	ldr	r1, [r7, #4]
 800dee4:	4630      	mov	r0, r6
 800dee6:	f000 fb39 	bl	800e55c <_Balloc>
 800deea:	4680      	mov	r8, r0
 800deec:	b928      	cbnz	r0, 800defa <_dtoa_r+0x8d2>
 800deee:	4b82      	ldr	r3, [pc, #520]	; (800e0f8 <_dtoa_r+0xad0>)
 800def0:	4602      	mov	r2, r0
 800def2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800def6:	f7ff bbaf 	b.w	800d658 <_dtoa_r+0x30>
 800defa:	693a      	ldr	r2, [r7, #16]
 800defc:	3202      	adds	r2, #2
 800defe:	0092      	lsls	r2, r2, #2
 800df00:	f107 010c 	add.w	r1, r7, #12
 800df04:	300c      	adds	r0, #12
 800df06:	f7fe fd09 	bl	800c91c <memcpy>
 800df0a:	2201      	movs	r2, #1
 800df0c:	4641      	mov	r1, r8
 800df0e:	4630      	mov	r0, r6
 800df10:	f000 fd36 	bl	800e980 <__lshift>
 800df14:	9b01      	ldr	r3, [sp, #4]
 800df16:	3301      	adds	r3, #1
 800df18:	9304      	str	r3, [sp, #16]
 800df1a:	9b01      	ldr	r3, [sp, #4]
 800df1c:	4453      	add	r3, sl
 800df1e:	9308      	str	r3, [sp, #32]
 800df20:	9b02      	ldr	r3, [sp, #8]
 800df22:	f003 0301 	and.w	r3, r3, #1
 800df26:	46b9      	mov	r9, r7
 800df28:	9307      	str	r3, [sp, #28]
 800df2a:	4607      	mov	r7, r0
 800df2c:	9b04      	ldr	r3, [sp, #16]
 800df2e:	4621      	mov	r1, r4
 800df30:	3b01      	subs	r3, #1
 800df32:	4628      	mov	r0, r5
 800df34:	9302      	str	r3, [sp, #8]
 800df36:	f7ff faeb 	bl	800d510 <quorem>
 800df3a:	4603      	mov	r3, r0
 800df3c:	3330      	adds	r3, #48	; 0x30
 800df3e:	9005      	str	r0, [sp, #20]
 800df40:	4649      	mov	r1, r9
 800df42:	4628      	mov	r0, r5
 800df44:	9309      	str	r3, [sp, #36]	; 0x24
 800df46:	f000 fd8b 	bl	800ea60 <__mcmp>
 800df4a:	463a      	mov	r2, r7
 800df4c:	4682      	mov	sl, r0
 800df4e:	4621      	mov	r1, r4
 800df50:	4630      	mov	r0, r6
 800df52:	f000 fda1 	bl	800ea98 <__mdiff>
 800df56:	68c2      	ldr	r2, [r0, #12]
 800df58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df5a:	4680      	mov	r8, r0
 800df5c:	bb0a      	cbnz	r2, 800dfa2 <_dtoa_r+0x97a>
 800df5e:	4601      	mov	r1, r0
 800df60:	4628      	mov	r0, r5
 800df62:	f000 fd7d 	bl	800ea60 <__mcmp>
 800df66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df68:	4602      	mov	r2, r0
 800df6a:	4641      	mov	r1, r8
 800df6c:	4630      	mov	r0, r6
 800df6e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800df72:	f000 fb33 	bl	800e5dc <_Bfree>
 800df76:	9b06      	ldr	r3, [sp, #24]
 800df78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df7a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800df7e:	ea43 0102 	orr.w	r1, r3, r2
 800df82:	9b07      	ldr	r3, [sp, #28]
 800df84:	430b      	orrs	r3, r1
 800df86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df88:	d10d      	bne.n	800dfa6 <_dtoa_r+0x97e>
 800df8a:	2b39      	cmp	r3, #57	; 0x39
 800df8c:	d029      	beq.n	800dfe2 <_dtoa_r+0x9ba>
 800df8e:	f1ba 0f00 	cmp.w	sl, #0
 800df92:	dd01      	ble.n	800df98 <_dtoa_r+0x970>
 800df94:	9b05      	ldr	r3, [sp, #20]
 800df96:	3331      	adds	r3, #49	; 0x31
 800df98:	9a02      	ldr	r2, [sp, #8]
 800df9a:	7013      	strb	r3, [r2, #0]
 800df9c:	e774      	b.n	800de88 <_dtoa_r+0x860>
 800df9e:	4638      	mov	r0, r7
 800dfa0:	e7b8      	b.n	800df14 <_dtoa_r+0x8ec>
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	e7e1      	b.n	800df6a <_dtoa_r+0x942>
 800dfa6:	f1ba 0f00 	cmp.w	sl, #0
 800dfaa:	db06      	blt.n	800dfba <_dtoa_r+0x992>
 800dfac:	9906      	ldr	r1, [sp, #24]
 800dfae:	ea41 0a0a 	orr.w	sl, r1, sl
 800dfb2:	9907      	ldr	r1, [sp, #28]
 800dfb4:	ea5a 0101 	orrs.w	r1, sl, r1
 800dfb8:	d120      	bne.n	800dffc <_dtoa_r+0x9d4>
 800dfba:	2a00      	cmp	r2, #0
 800dfbc:	ddec      	ble.n	800df98 <_dtoa_r+0x970>
 800dfbe:	4629      	mov	r1, r5
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	4630      	mov	r0, r6
 800dfc4:	9304      	str	r3, [sp, #16]
 800dfc6:	f000 fcdb 	bl	800e980 <__lshift>
 800dfca:	4621      	mov	r1, r4
 800dfcc:	4605      	mov	r5, r0
 800dfce:	f000 fd47 	bl	800ea60 <__mcmp>
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	9b04      	ldr	r3, [sp, #16]
 800dfd6:	dc02      	bgt.n	800dfde <_dtoa_r+0x9b6>
 800dfd8:	d1de      	bne.n	800df98 <_dtoa_r+0x970>
 800dfda:	07da      	lsls	r2, r3, #31
 800dfdc:	d5dc      	bpl.n	800df98 <_dtoa_r+0x970>
 800dfde:	2b39      	cmp	r3, #57	; 0x39
 800dfe0:	d1d8      	bne.n	800df94 <_dtoa_r+0x96c>
 800dfe2:	9a02      	ldr	r2, [sp, #8]
 800dfe4:	2339      	movs	r3, #57	; 0x39
 800dfe6:	7013      	strb	r3, [r2, #0]
 800dfe8:	4643      	mov	r3, r8
 800dfea:	4698      	mov	r8, r3
 800dfec:	3b01      	subs	r3, #1
 800dfee:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800dff2:	2a39      	cmp	r2, #57	; 0x39
 800dff4:	d051      	beq.n	800e09a <_dtoa_r+0xa72>
 800dff6:	3201      	adds	r2, #1
 800dff8:	701a      	strb	r2, [r3, #0]
 800dffa:	e745      	b.n	800de88 <_dtoa_r+0x860>
 800dffc:	2a00      	cmp	r2, #0
 800dffe:	dd03      	ble.n	800e008 <_dtoa_r+0x9e0>
 800e000:	2b39      	cmp	r3, #57	; 0x39
 800e002:	d0ee      	beq.n	800dfe2 <_dtoa_r+0x9ba>
 800e004:	3301      	adds	r3, #1
 800e006:	e7c7      	b.n	800df98 <_dtoa_r+0x970>
 800e008:	9a04      	ldr	r2, [sp, #16]
 800e00a:	9908      	ldr	r1, [sp, #32]
 800e00c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e010:	428a      	cmp	r2, r1
 800e012:	d02b      	beq.n	800e06c <_dtoa_r+0xa44>
 800e014:	4629      	mov	r1, r5
 800e016:	2300      	movs	r3, #0
 800e018:	220a      	movs	r2, #10
 800e01a:	4630      	mov	r0, r6
 800e01c:	f000 fb00 	bl	800e620 <__multadd>
 800e020:	45b9      	cmp	r9, r7
 800e022:	4605      	mov	r5, r0
 800e024:	f04f 0300 	mov.w	r3, #0
 800e028:	f04f 020a 	mov.w	r2, #10
 800e02c:	4649      	mov	r1, r9
 800e02e:	4630      	mov	r0, r6
 800e030:	d107      	bne.n	800e042 <_dtoa_r+0xa1a>
 800e032:	f000 faf5 	bl	800e620 <__multadd>
 800e036:	4681      	mov	r9, r0
 800e038:	4607      	mov	r7, r0
 800e03a:	9b04      	ldr	r3, [sp, #16]
 800e03c:	3301      	adds	r3, #1
 800e03e:	9304      	str	r3, [sp, #16]
 800e040:	e774      	b.n	800df2c <_dtoa_r+0x904>
 800e042:	f000 faed 	bl	800e620 <__multadd>
 800e046:	4639      	mov	r1, r7
 800e048:	4681      	mov	r9, r0
 800e04a:	2300      	movs	r3, #0
 800e04c:	220a      	movs	r2, #10
 800e04e:	4630      	mov	r0, r6
 800e050:	f000 fae6 	bl	800e620 <__multadd>
 800e054:	4607      	mov	r7, r0
 800e056:	e7f0      	b.n	800e03a <_dtoa_r+0xa12>
 800e058:	f1ba 0f00 	cmp.w	sl, #0
 800e05c:	9a01      	ldr	r2, [sp, #4]
 800e05e:	bfcc      	ite	gt
 800e060:	46d0      	movgt	r8, sl
 800e062:	f04f 0801 	movle.w	r8, #1
 800e066:	4490      	add	r8, r2
 800e068:	f04f 0900 	mov.w	r9, #0
 800e06c:	4629      	mov	r1, r5
 800e06e:	2201      	movs	r2, #1
 800e070:	4630      	mov	r0, r6
 800e072:	9302      	str	r3, [sp, #8]
 800e074:	f000 fc84 	bl	800e980 <__lshift>
 800e078:	4621      	mov	r1, r4
 800e07a:	4605      	mov	r5, r0
 800e07c:	f000 fcf0 	bl	800ea60 <__mcmp>
 800e080:	2800      	cmp	r0, #0
 800e082:	dcb1      	bgt.n	800dfe8 <_dtoa_r+0x9c0>
 800e084:	d102      	bne.n	800e08c <_dtoa_r+0xa64>
 800e086:	9b02      	ldr	r3, [sp, #8]
 800e088:	07db      	lsls	r3, r3, #31
 800e08a:	d4ad      	bmi.n	800dfe8 <_dtoa_r+0x9c0>
 800e08c:	4643      	mov	r3, r8
 800e08e:	4698      	mov	r8, r3
 800e090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e094:	2a30      	cmp	r2, #48	; 0x30
 800e096:	d0fa      	beq.n	800e08e <_dtoa_r+0xa66>
 800e098:	e6f6      	b.n	800de88 <_dtoa_r+0x860>
 800e09a:	9a01      	ldr	r2, [sp, #4]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d1a4      	bne.n	800dfea <_dtoa_r+0x9c2>
 800e0a0:	f10b 0b01 	add.w	fp, fp, #1
 800e0a4:	2331      	movs	r3, #49	; 0x31
 800e0a6:	e778      	b.n	800df9a <_dtoa_r+0x972>
 800e0a8:	4b14      	ldr	r3, [pc, #80]	; (800e0fc <_dtoa_r+0xad4>)
 800e0aa:	f7ff bb27 	b.w	800d6fc <_dtoa_r+0xd4>
 800e0ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	f47f ab03 	bne.w	800d6bc <_dtoa_r+0x94>
 800e0b6:	4b12      	ldr	r3, [pc, #72]	; (800e100 <_dtoa_r+0xad8>)
 800e0b8:	f7ff bb20 	b.w	800d6fc <_dtoa_r+0xd4>
 800e0bc:	f1ba 0f00 	cmp.w	sl, #0
 800e0c0:	dc03      	bgt.n	800e0ca <_dtoa_r+0xaa2>
 800e0c2:	9b06      	ldr	r3, [sp, #24]
 800e0c4:	2b02      	cmp	r3, #2
 800e0c6:	f73f aec7 	bgt.w	800de58 <_dtoa_r+0x830>
 800e0ca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e0ce:	4621      	mov	r1, r4
 800e0d0:	4628      	mov	r0, r5
 800e0d2:	f7ff fa1d 	bl	800d510 <quorem>
 800e0d6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e0da:	f808 3b01 	strb.w	r3, [r8], #1
 800e0de:	9a01      	ldr	r2, [sp, #4]
 800e0e0:	eba8 0202 	sub.w	r2, r8, r2
 800e0e4:	4592      	cmp	sl, r2
 800e0e6:	ddb7      	ble.n	800e058 <_dtoa_r+0xa30>
 800e0e8:	4629      	mov	r1, r5
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	220a      	movs	r2, #10
 800e0ee:	4630      	mov	r0, r6
 800e0f0:	f000 fa96 	bl	800e620 <__multadd>
 800e0f4:	4605      	mov	r5, r0
 800e0f6:	e7ea      	b.n	800e0ce <_dtoa_r+0xaa6>
 800e0f8:	0800ffa7 	.word	0x0800ffa7
 800e0fc:	0800ff04 	.word	0x0800ff04
 800e100:	0800ff28 	.word	0x0800ff28

0800e104 <__sflush_r>:
 800e104:	898a      	ldrh	r2, [r1, #12]
 800e106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e10a:	4605      	mov	r5, r0
 800e10c:	0710      	lsls	r0, r2, #28
 800e10e:	460c      	mov	r4, r1
 800e110:	d458      	bmi.n	800e1c4 <__sflush_r+0xc0>
 800e112:	684b      	ldr	r3, [r1, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	dc05      	bgt.n	800e124 <__sflush_r+0x20>
 800e118:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	dc02      	bgt.n	800e124 <__sflush_r+0x20>
 800e11e:	2000      	movs	r0, #0
 800e120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e126:	2e00      	cmp	r6, #0
 800e128:	d0f9      	beq.n	800e11e <__sflush_r+0x1a>
 800e12a:	2300      	movs	r3, #0
 800e12c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e130:	682f      	ldr	r7, [r5, #0]
 800e132:	602b      	str	r3, [r5, #0]
 800e134:	d032      	beq.n	800e19c <__sflush_r+0x98>
 800e136:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e138:	89a3      	ldrh	r3, [r4, #12]
 800e13a:	075a      	lsls	r2, r3, #29
 800e13c:	d505      	bpl.n	800e14a <__sflush_r+0x46>
 800e13e:	6863      	ldr	r3, [r4, #4]
 800e140:	1ac0      	subs	r0, r0, r3
 800e142:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e144:	b10b      	cbz	r3, 800e14a <__sflush_r+0x46>
 800e146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e148:	1ac0      	subs	r0, r0, r3
 800e14a:	2300      	movs	r3, #0
 800e14c:	4602      	mov	r2, r0
 800e14e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e150:	6a21      	ldr	r1, [r4, #32]
 800e152:	4628      	mov	r0, r5
 800e154:	47b0      	blx	r6
 800e156:	1c43      	adds	r3, r0, #1
 800e158:	89a3      	ldrh	r3, [r4, #12]
 800e15a:	d106      	bne.n	800e16a <__sflush_r+0x66>
 800e15c:	6829      	ldr	r1, [r5, #0]
 800e15e:	291d      	cmp	r1, #29
 800e160:	d82c      	bhi.n	800e1bc <__sflush_r+0xb8>
 800e162:	4a2a      	ldr	r2, [pc, #168]	; (800e20c <__sflush_r+0x108>)
 800e164:	40ca      	lsrs	r2, r1
 800e166:	07d6      	lsls	r6, r2, #31
 800e168:	d528      	bpl.n	800e1bc <__sflush_r+0xb8>
 800e16a:	2200      	movs	r2, #0
 800e16c:	6062      	str	r2, [r4, #4]
 800e16e:	04d9      	lsls	r1, r3, #19
 800e170:	6922      	ldr	r2, [r4, #16]
 800e172:	6022      	str	r2, [r4, #0]
 800e174:	d504      	bpl.n	800e180 <__sflush_r+0x7c>
 800e176:	1c42      	adds	r2, r0, #1
 800e178:	d101      	bne.n	800e17e <__sflush_r+0x7a>
 800e17a:	682b      	ldr	r3, [r5, #0]
 800e17c:	b903      	cbnz	r3, 800e180 <__sflush_r+0x7c>
 800e17e:	6560      	str	r0, [r4, #84]	; 0x54
 800e180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e182:	602f      	str	r7, [r5, #0]
 800e184:	2900      	cmp	r1, #0
 800e186:	d0ca      	beq.n	800e11e <__sflush_r+0x1a>
 800e188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e18c:	4299      	cmp	r1, r3
 800e18e:	d002      	beq.n	800e196 <__sflush_r+0x92>
 800e190:	4628      	mov	r0, r5
 800e192:	f000 fd7d 	bl	800ec90 <_free_r>
 800e196:	2000      	movs	r0, #0
 800e198:	6360      	str	r0, [r4, #52]	; 0x34
 800e19a:	e7c1      	b.n	800e120 <__sflush_r+0x1c>
 800e19c:	6a21      	ldr	r1, [r4, #32]
 800e19e:	2301      	movs	r3, #1
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	47b0      	blx	r6
 800e1a4:	1c41      	adds	r1, r0, #1
 800e1a6:	d1c7      	bne.n	800e138 <__sflush_r+0x34>
 800e1a8:	682b      	ldr	r3, [r5, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d0c4      	beq.n	800e138 <__sflush_r+0x34>
 800e1ae:	2b1d      	cmp	r3, #29
 800e1b0:	d001      	beq.n	800e1b6 <__sflush_r+0xb2>
 800e1b2:	2b16      	cmp	r3, #22
 800e1b4:	d101      	bne.n	800e1ba <__sflush_r+0xb6>
 800e1b6:	602f      	str	r7, [r5, #0]
 800e1b8:	e7b1      	b.n	800e11e <__sflush_r+0x1a>
 800e1ba:	89a3      	ldrh	r3, [r4, #12]
 800e1bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1c0:	81a3      	strh	r3, [r4, #12]
 800e1c2:	e7ad      	b.n	800e120 <__sflush_r+0x1c>
 800e1c4:	690f      	ldr	r7, [r1, #16]
 800e1c6:	2f00      	cmp	r7, #0
 800e1c8:	d0a9      	beq.n	800e11e <__sflush_r+0x1a>
 800e1ca:	0793      	lsls	r3, r2, #30
 800e1cc:	680e      	ldr	r6, [r1, #0]
 800e1ce:	bf08      	it	eq
 800e1d0:	694b      	ldreq	r3, [r1, #20]
 800e1d2:	600f      	str	r7, [r1, #0]
 800e1d4:	bf18      	it	ne
 800e1d6:	2300      	movne	r3, #0
 800e1d8:	eba6 0807 	sub.w	r8, r6, r7
 800e1dc:	608b      	str	r3, [r1, #8]
 800e1de:	f1b8 0f00 	cmp.w	r8, #0
 800e1e2:	dd9c      	ble.n	800e11e <__sflush_r+0x1a>
 800e1e4:	6a21      	ldr	r1, [r4, #32]
 800e1e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e1e8:	4643      	mov	r3, r8
 800e1ea:	463a      	mov	r2, r7
 800e1ec:	4628      	mov	r0, r5
 800e1ee:	47b0      	blx	r6
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	dc06      	bgt.n	800e202 <__sflush_r+0xfe>
 800e1f4:	89a3      	ldrh	r3, [r4, #12]
 800e1f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1fa:	81a3      	strh	r3, [r4, #12]
 800e1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e200:	e78e      	b.n	800e120 <__sflush_r+0x1c>
 800e202:	4407      	add	r7, r0
 800e204:	eba8 0800 	sub.w	r8, r8, r0
 800e208:	e7e9      	b.n	800e1de <__sflush_r+0xda>
 800e20a:	bf00      	nop
 800e20c:	20400001 	.word	0x20400001

0800e210 <_fflush_r>:
 800e210:	b538      	push	{r3, r4, r5, lr}
 800e212:	690b      	ldr	r3, [r1, #16]
 800e214:	4605      	mov	r5, r0
 800e216:	460c      	mov	r4, r1
 800e218:	b913      	cbnz	r3, 800e220 <_fflush_r+0x10>
 800e21a:	2500      	movs	r5, #0
 800e21c:	4628      	mov	r0, r5
 800e21e:	bd38      	pop	{r3, r4, r5, pc}
 800e220:	b118      	cbz	r0, 800e22a <_fflush_r+0x1a>
 800e222:	6983      	ldr	r3, [r0, #24]
 800e224:	b90b      	cbnz	r3, 800e22a <_fflush_r+0x1a>
 800e226:	f000 f887 	bl	800e338 <__sinit>
 800e22a:	4b14      	ldr	r3, [pc, #80]	; (800e27c <_fflush_r+0x6c>)
 800e22c:	429c      	cmp	r4, r3
 800e22e:	d11b      	bne.n	800e268 <_fflush_r+0x58>
 800e230:	686c      	ldr	r4, [r5, #4]
 800e232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d0ef      	beq.n	800e21a <_fflush_r+0xa>
 800e23a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e23c:	07d0      	lsls	r0, r2, #31
 800e23e:	d404      	bmi.n	800e24a <_fflush_r+0x3a>
 800e240:	0599      	lsls	r1, r3, #22
 800e242:	d402      	bmi.n	800e24a <_fflush_r+0x3a>
 800e244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e246:	f000 f91a 	bl	800e47e <__retarget_lock_acquire_recursive>
 800e24a:	4628      	mov	r0, r5
 800e24c:	4621      	mov	r1, r4
 800e24e:	f7ff ff59 	bl	800e104 <__sflush_r>
 800e252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e254:	07da      	lsls	r2, r3, #31
 800e256:	4605      	mov	r5, r0
 800e258:	d4e0      	bmi.n	800e21c <_fflush_r+0xc>
 800e25a:	89a3      	ldrh	r3, [r4, #12]
 800e25c:	059b      	lsls	r3, r3, #22
 800e25e:	d4dd      	bmi.n	800e21c <_fflush_r+0xc>
 800e260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e262:	f000 f90d 	bl	800e480 <__retarget_lock_release_recursive>
 800e266:	e7d9      	b.n	800e21c <_fflush_r+0xc>
 800e268:	4b05      	ldr	r3, [pc, #20]	; (800e280 <_fflush_r+0x70>)
 800e26a:	429c      	cmp	r4, r3
 800e26c:	d101      	bne.n	800e272 <_fflush_r+0x62>
 800e26e:	68ac      	ldr	r4, [r5, #8]
 800e270:	e7df      	b.n	800e232 <_fflush_r+0x22>
 800e272:	4b04      	ldr	r3, [pc, #16]	; (800e284 <_fflush_r+0x74>)
 800e274:	429c      	cmp	r4, r3
 800e276:	bf08      	it	eq
 800e278:	68ec      	ldreq	r4, [r5, #12]
 800e27a:	e7da      	b.n	800e232 <_fflush_r+0x22>
 800e27c:	0800ffd8 	.word	0x0800ffd8
 800e280:	0800fff8 	.word	0x0800fff8
 800e284:	0800ffb8 	.word	0x0800ffb8

0800e288 <std>:
 800e288:	2300      	movs	r3, #0
 800e28a:	b510      	push	{r4, lr}
 800e28c:	4604      	mov	r4, r0
 800e28e:	e9c0 3300 	strd	r3, r3, [r0]
 800e292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e296:	6083      	str	r3, [r0, #8]
 800e298:	8181      	strh	r1, [r0, #12]
 800e29a:	6643      	str	r3, [r0, #100]	; 0x64
 800e29c:	81c2      	strh	r2, [r0, #14]
 800e29e:	6183      	str	r3, [r0, #24]
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	2208      	movs	r2, #8
 800e2a4:	305c      	adds	r0, #92	; 0x5c
 800e2a6:	f7fe fb47 	bl	800c938 <memset>
 800e2aa:	4b05      	ldr	r3, [pc, #20]	; (800e2c0 <std+0x38>)
 800e2ac:	6263      	str	r3, [r4, #36]	; 0x24
 800e2ae:	4b05      	ldr	r3, [pc, #20]	; (800e2c4 <std+0x3c>)
 800e2b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e2b2:	4b05      	ldr	r3, [pc, #20]	; (800e2c8 <std+0x40>)
 800e2b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2b6:	4b05      	ldr	r3, [pc, #20]	; (800e2cc <std+0x44>)
 800e2b8:	6224      	str	r4, [r4, #32]
 800e2ba:	6323      	str	r3, [r4, #48]	; 0x30
 800e2bc:	bd10      	pop	{r4, pc}
 800e2be:	bf00      	nop
 800e2c0:	0800f3dd 	.word	0x0800f3dd
 800e2c4:	0800f3ff 	.word	0x0800f3ff
 800e2c8:	0800f437 	.word	0x0800f437
 800e2cc:	0800f45b 	.word	0x0800f45b

0800e2d0 <_cleanup_r>:
 800e2d0:	4901      	ldr	r1, [pc, #4]	; (800e2d8 <_cleanup_r+0x8>)
 800e2d2:	f000 b8af 	b.w	800e434 <_fwalk_reent>
 800e2d6:	bf00      	nop
 800e2d8:	0800e211 	.word	0x0800e211

0800e2dc <__sfmoreglue>:
 800e2dc:	b570      	push	{r4, r5, r6, lr}
 800e2de:	2268      	movs	r2, #104	; 0x68
 800e2e0:	1e4d      	subs	r5, r1, #1
 800e2e2:	4355      	muls	r5, r2
 800e2e4:	460e      	mov	r6, r1
 800e2e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e2ea:	f000 fd3d 	bl	800ed68 <_malloc_r>
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	b140      	cbz	r0, 800e304 <__sfmoreglue+0x28>
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	e9c0 1600 	strd	r1, r6, [r0]
 800e2f8:	300c      	adds	r0, #12
 800e2fa:	60a0      	str	r0, [r4, #8]
 800e2fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e300:	f7fe fb1a 	bl	800c938 <memset>
 800e304:	4620      	mov	r0, r4
 800e306:	bd70      	pop	{r4, r5, r6, pc}

0800e308 <__sfp_lock_acquire>:
 800e308:	4801      	ldr	r0, [pc, #4]	; (800e310 <__sfp_lock_acquire+0x8>)
 800e30a:	f000 b8b8 	b.w	800e47e <__retarget_lock_acquire_recursive>
 800e30e:	bf00      	nop
 800e310:	240046c1 	.word	0x240046c1

0800e314 <__sfp_lock_release>:
 800e314:	4801      	ldr	r0, [pc, #4]	; (800e31c <__sfp_lock_release+0x8>)
 800e316:	f000 b8b3 	b.w	800e480 <__retarget_lock_release_recursive>
 800e31a:	bf00      	nop
 800e31c:	240046c1 	.word	0x240046c1

0800e320 <__sinit_lock_acquire>:
 800e320:	4801      	ldr	r0, [pc, #4]	; (800e328 <__sinit_lock_acquire+0x8>)
 800e322:	f000 b8ac 	b.w	800e47e <__retarget_lock_acquire_recursive>
 800e326:	bf00      	nop
 800e328:	240046c2 	.word	0x240046c2

0800e32c <__sinit_lock_release>:
 800e32c:	4801      	ldr	r0, [pc, #4]	; (800e334 <__sinit_lock_release+0x8>)
 800e32e:	f000 b8a7 	b.w	800e480 <__retarget_lock_release_recursive>
 800e332:	bf00      	nop
 800e334:	240046c2 	.word	0x240046c2

0800e338 <__sinit>:
 800e338:	b510      	push	{r4, lr}
 800e33a:	4604      	mov	r4, r0
 800e33c:	f7ff fff0 	bl	800e320 <__sinit_lock_acquire>
 800e340:	69a3      	ldr	r3, [r4, #24]
 800e342:	b11b      	cbz	r3, 800e34c <__sinit+0x14>
 800e344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e348:	f7ff bff0 	b.w	800e32c <__sinit_lock_release>
 800e34c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e350:	6523      	str	r3, [r4, #80]	; 0x50
 800e352:	4b13      	ldr	r3, [pc, #76]	; (800e3a0 <__sinit+0x68>)
 800e354:	4a13      	ldr	r2, [pc, #76]	; (800e3a4 <__sinit+0x6c>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	62a2      	str	r2, [r4, #40]	; 0x28
 800e35a:	42a3      	cmp	r3, r4
 800e35c:	bf04      	itt	eq
 800e35e:	2301      	moveq	r3, #1
 800e360:	61a3      	streq	r3, [r4, #24]
 800e362:	4620      	mov	r0, r4
 800e364:	f000 f820 	bl	800e3a8 <__sfp>
 800e368:	6060      	str	r0, [r4, #4]
 800e36a:	4620      	mov	r0, r4
 800e36c:	f000 f81c 	bl	800e3a8 <__sfp>
 800e370:	60a0      	str	r0, [r4, #8]
 800e372:	4620      	mov	r0, r4
 800e374:	f000 f818 	bl	800e3a8 <__sfp>
 800e378:	2200      	movs	r2, #0
 800e37a:	60e0      	str	r0, [r4, #12]
 800e37c:	2104      	movs	r1, #4
 800e37e:	6860      	ldr	r0, [r4, #4]
 800e380:	f7ff ff82 	bl	800e288 <std>
 800e384:	68a0      	ldr	r0, [r4, #8]
 800e386:	2201      	movs	r2, #1
 800e388:	2109      	movs	r1, #9
 800e38a:	f7ff ff7d 	bl	800e288 <std>
 800e38e:	68e0      	ldr	r0, [r4, #12]
 800e390:	2202      	movs	r2, #2
 800e392:	2112      	movs	r1, #18
 800e394:	f7ff ff78 	bl	800e288 <std>
 800e398:	2301      	movs	r3, #1
 800e39a:	61a3      	str	r3, [r4, #24]
 800e39c:	e7d2      	b.n	800e344 <__sinit+0xc>
 800e39e:	bf00      	nop
 800e3a0:	0800fef0 	.word	0x0800fef0
 800e3a4:	0800e2d1 	.word	0x0800e2d1

0800e3a8 <__sfp>:
 800e3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3aa:	4607      	mov	r7, r0
 800e3ac:	f7ff ffac 	bl	800e308 <__sfp_lock_acquire>
 800e3b0:	4b1e      	ldr	r3, [pc, #120]	; (800e42c <__sfp+0x84>)
 800e3b2:	681e      	ldr	r6, [r3, #0]
 800e3b4:	69b3      	ldr	r3, [r6, #24]
 800e3b6:	b913      	cbnz	r3, 800e3be <__sfp+0x16>
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	f7ff ffbd 	bl	800e338 <__sinit>
 800e3be:	3648      	adds	r6, #72	; 0x48
 800e3c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e3c4:	3b01      	subs	r3, #1
 800e3c6:	d503      	bpl.n	800e3d0 <__sfp+0x28>
 800e3c8:	6833      	ldr	r3, [r6, #0]
 800e3ca:	b30b      	cbz	r3, 800e410 <__sfp+0x68>
 800e3cc:	6836      	ldr	r6, [r6, #0]
 800e3ce:	e7f7      	b.n	800e3c0 <__sfp+0x18>
 800e3d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e3d4:	b9d5      	cbnz	r5, 800e40c <__sfp+0x64>
 800e3d6:	4b16      	ldr	r3, [pc, #88]	; (800e430 <__sfp+0x88>)
 800e3d8:	60e3      	str	r3, [r4, #12]
 800e3da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e3de:	6665      	str	r5, [r4, #100]	; 0x64
 800e3e0:	f000 f84c 	bl	800e47c <__retarget_lock_init_recursive>
 800e3e4:	f7ff ff96 	bl	800e314 <__sfp_lock_release>
 800e3e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e3ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e3f0:	6025      	str	r5, [r4, #0]
 800e3f2:	61a5      	str	r5, [r4, #24]
 800e3f4:	2208      	movs	r2, #8
 800e3f6:	4629      	mov	r1, r5
 800e3f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e3fc:	f7fe fa9c 	bl	800c938 <memset>
 800e400:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e404:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e408:	4620      	mov	r0, r4
 800e40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e40c:	3468      	adds	r4, #104	; 0x68
 800e40e:	e7d9      	b.n	800e3c4 <__sfp+0x1c>
 800e410:	2104      	movs	r1, #4
 800e412:	4638      	mov	r0, r7
 800e414:	f7ff ff62 	bl	800e2dc <__sfmoreglue>
 800e418:	4604      	mov	r4, r0
 800e41a:	6030      	str	r0, [r6, #0]
 800e41c:	2800      	cmp	r0, #0
 800e41e:	d1d5      	bne.n	800e3cc <__sfp+0x24>
 800e420:	f7ff ff78 	bl	800e314 <__sfp_lock_release>
 800e424:	230c      	movs	r3, #12
 800e426:	603b      	str	r3, [r7, #0]
 800e428:	e7ee      	b.n	800e408 <__sfp+0x60>
 800e42a:	bf00      	nop
 800e42c:	0800fef0 	.word	0x0800fef0
 800e430:	ffff0001 	.word	0xffff0001

0800e434 <_fwalk_reent>:
 800e434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e438:	4606      	mov	r6, r0
 800e43a:	4688      	mov	r8, r1
 800e43c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e440:	2700      	movs	r7, #0
 800e442:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e446:	f1b9 0901 	subs.w	r9, r9, #1
 800e44a:	d505      	bpl.n	800e458 <_fwalk_reent+0x24>
 800e44c:	6824      	ldr	r4, [r4, #0]
 800e44e:	2c00      	cmp	r4, #0
 800e450:	d1f7      	bne.n	800e442 <_fwalk_reent+0xe>
 800e452:	4638      	mov	r0, r7
 800e454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e458:	89ab      	ldrh	r3, [r5, #12]
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	d907      	bls.n	800e46e <_fwalk_reent+0x3a>
 800e45e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e462:	3301      	adds	r3, #1
 800e464:	d003      	beq.n	800e46e <_fwalk_reent+0x3a>
 800e466:	4629      	mov	r1, r5
 800e468:	4630      	mov	r0, r6
 800e46a:	47c0      	blx	r8
 800e46c:	4307      	orrs	r7, r0
 800e46e:	3568      	adds	r5, #104	; 0x68
 800e470:	e7e9      	b.n	800e446 <_fwalk_reent+0x12>
	...

0800e474 <_localeconv_r>:
 800e474:	4800      	ldr	r0, [pc, #0]	; (800e478 <_localeconv_r+0x4>)
 800e476:	4770      	bx	lr
 800e478:	24000170 	.word	0x24000170

0800e47c <__retarget_lock_init_recursive>:
 800e47c:	4770      	bx	lr

0800e47e <__retarget_lock_acquire_recursive>:
 800e47e:	4770      	bx	lr

0800e480 <__retarget_lock_release_recursive>:
 800e480:	4770      	bx	lr

0800e482 <__swhatbuf_r>:
 800e482:	b570      	push	{r4, r5, r6, lr}
 800e484:	460e      	mov	r6, r1
 800e486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e48a:	2900      	cmp	r1, #0
 800e48c:	b096      	sub	sp, #88	; 0x58
 800e48e:	4614      	mov	r4, r2
 800e490:	461d      	mov	r5, r3
 800e492:	da08      	bge.n	800e4a6 <__swhatbuf_r+0x24>
 800e494:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e498:	2200      	movs	r2, #0
 800e49a:	602a      	str	r2, [r5, #0]
 800e49c:	061a      	lsls	r2, r3, #24
 800e49e:	d410      	bmi.n	800e4c2 <__swhatbuf_r+0x40>
 800e4a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4a4:	e00e      	b.n	800e4c4 <__swhatbuf_r+0x42>
 800e4a6:	466a      	mov	r2, sp
 800e4a8:	f001 f82e 	bl	800f508 <_fstat_r>
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	dbf1      	blt.n	800e494 <__swhatbuf_r+0x12>
 800e4b0:	9a01      	ldr	r2, [sp, #4]
 800e4b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e4b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e4ba:	425a      	negs	r2, r3
 800e4bc:	415a      	adcs	r2, r3
 800e4be:	602a      	str	r2, [r5, #0]
 800e4c0:	e7ee      	b.n	800e4a0 <__swhatbuf_r+0x1e>
 800e4c2:	2340      	movs	r3, #64	; 0x40
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	6023      	str	r3, [r4, #0]
 800e4c8:	b016      	add	sp, #88	; 0x58
 800e4ca:	bd70      	pop	{r4, r5, r6, pc}

0800e4cc <__smakebuf_r>:
 800e4cc:	898b      	ldrh	r3, [r1, #12]
 800e4ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e4d0:	079d      	lsls	r5, r3, #30
 800e4d2:	4606      	mov	r6, r0
 800e4d4:	460c      	mov	r4, r1
 800e4d6:	d507      	bpl.n	800e4e8 <__smakebuf_r+0x1c>
 800e4d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e4dc:	6023      	str	r3, [r4, #0]
 800e4de:	6123      	str	r3, [r4, #16]
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	6163      	str	r3, [r4, #20]
 800e4e4:	b002      	add	sp, #8
 800e4e6:	bd70      	pop	{r4, r5, r6, pc}
 800e4e8:	ab01      	add	r3, sp, #4
 800e4ea:	466a      	mov	r2, sp
 800e4ec:	f7ff ffc9 	bl	800e482 <__swhatbuf_r>
 800e4f0:	9900      	ldr	r1, [sp, #0]
 800e4f2:	4605      	mov	r5, r0
 800e4f4:	4630      	mov	r0, r6
 800e4f6:	f000 fc37 	bl	800ed68 <_malloc_r>
 800e4fa:	b948      	cbnz	r0, 800e510 <__smakebuf_r+0x44>
 800e4fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e500:	059a      	lsls	r2, r3, #22
 800e502:	d4ef      	bmi.n	800e4e4 <__smakebuf_r+0x18>
 800e504:	f023 0303 	bic.w	r3, r3, #3
 800e508:	f043 0302 	orr.w	r3, r3, #2
 800e50c:	81a3      	strh	r3, [r4, #12]
 800e50e:	e7e3      	b.n	800e4d8 <__smakebuf_r+0xc>
 800e510:	4b0d      	ldr	r3, [pc, #52]	; (800e548 <__smakebuf_r+0x7c>)
 800e512:	62b3      	str	r3, [r6, #40]	; 0x28
 800e514:	89a3      	ldrh	r3, [r4, #12]
 800e516:	6020      	str	r0, [r4, #0]
 800e518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e51c:	81a3      	strh	r3, [r4, #12]
 800e51e:	9b00      	ldr	r3, [sp, #0]
 800e520:	6163      	str	r3, [r4, #20]
 800e522:	9b01      	ldr	r3, [sp, #4]
 800e524:	6120      	str	r0, [r4, #16]
 800e526:	b15b      	cbz	r3, 800e540 <__smakebuf_r+0x74>
 800e528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e52c:	4630      	mov	r0, r6
 800e52e:	f000 fffd 	bl	800f52c <_isatty_r>
 800e532:	b128      	cbz	r0, 800e540 <__smakebuf_r+0x74>
 800e534:	89a3      	ldrh	r3, [r4, #12]
 800e536:	f023 0303 	bic.w	r3, r3, #3
 800e53a:	f043 0301 	orr.w	r3, r3, #1
 800e53e:	81a3      	strh	r3, [r4, #12]
 800e540:	89a0      	ldrh	r0, [r4, #12]
 800e542:	4305      	orrs	r5, r0
 800e544:	81a5      	strh	r5, [r4, #12]
 800e546:	e7cd      	b.n	800e4e4 <__smakebuf_r+0x18>
 800e548:	0800e2d1 	.word	0x0800e2d1

0800e54c <malloc>:
 800e54c:	4b02      	ldr	r3, [pc, #8]	; (800e558 <malloc+0xc>)
 800e54e:	4601      	mov	r1, r0
 800e550:	6818      	ldr	r0, [r3, #0]
 800e552:	f000 bc09 	b.w	800ed68 <_malloc_r>
 800e556:	bf00      	nop
 800e558:	2400001c 	.word	0x2400001c

0800e55c <_Balloc>:
 800e55c:	b570      	push	{r4, r5, r6, lr}
 800e55e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e560:	4604      	mov	r4, r0
 800e562:	460d      	mov	r5, r1
 800e564:	b976      	cbnz	r6, 800e584 <_Balloc+0x28>
 800e566:	2010      	movs	r0, #16
 800e568:	f7ff fff0 	bl	800e54c <malloc>
 800e56c:	4602      	mov	r2, r0
 800e56e:	6260      	str	r0, [r4, #36]	; 0x24
 800e570:	b920      	cbnz	r0, 800e57c <_Balloc+0x20>
 800e572:	4b18      	ldr	r3, [pc, #96]	; (800e5d4 <_Balloc+0x78>)
 800e574:	4818      	ldr	r0, [pc, #96]	; (800e5d8 <_Balloc+0x7c>)
 800e576:	2166      	movs	r1, #102	; 0x66
 800e578:	f000 ff86 	bl	800f488 <__assert_func>
 800e57c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e580:	6006      	str	r6, [r0, #0]
 800e582:	60c6      	str	r6, [r0, #12]
 800e584:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e586:	68f3      	ldr	r3, [r6, #12]
 800e588:	b183      	cbz	r3, 800e5ac <_Balloc+0x50>
 800e58a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e58c:	68db      	ldr	r3, [r3, #12]
 800e58e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e592:	b9b8      	cbnz	r0, 800e5c4 <_Balloc+0x68>
 800e594:	2101      	movs	r1, #1
 800e596:	fa01 f605 	lsl.w	r6, r1, r5
 800e59a:	1d72      	adds	r2, r6, #5
 800e59c:	0092      	lsls	r2, r2, #2
 800e59e:	4620      	mov	r0, r4
 800e5a0:	f000 fb60 	bl	800ec64 <_calloc_r>
 800e5a4:	b160      	cbz	r0, 800e5c0 <_Balloc+0x64>
 800e5a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e5aa:	e00e      	b.n	800e5ca <_Balloc+0x6e>
 800e5ac:	2221      	movs	r2, #33	; 0x21
 800e5ae:	2104      	movs	r1, #4
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	f000 fb57 	bl	800ec64 <_calloc_r>
 800e5b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5b8:	60f0      	str	r0, [r6, #12]
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d1e4      	bne.n	800e58a <_Balloc+0x2e>
 800e5c0:	2000      	movs	r0, #0
 800e5c2:	bd70      	pop	{r4, r5, r6, pc}
 800e5c4:	6802      	ldr	r2, [r0, #0]
 800e5c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e5d0:	e7f7      	b.n	800e5c2 <_Balloc+0x66>
 800e5d2:	bf00      	nop
 800e5d4:	0800ff35 	.word	0x0800ff35
 800e5d8:	08010018 	.word	0x08010018

0800e5dc <_Bfree>:
 800e5dc:	b570      	push	{r4, r5, r6, lr}
 800e5de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e5e0:	4605      	mov	r5, r0
 800e5e2:	460c      	mov	r4, r1
 800e5e4:	b976      	cbnz	r6, 800e604 <_Bfree+0x28>
 800e5e6:	2010      	movs	r0, #16
 800e5e8:	f7ff ffb0 	bl	800e54c <malloc>
 800e5ec:	4602      	mov	r2, r0
 800e5ee:	6268      	str	r0, [r5, #36]	; 0x24
 800e5f0:	b920      	cbnz	r0, 800e5fc <_Bfree+0x20>
 800e5f2:	4b09      	ldr	r3, [pc, #36]	; (800e618 <_Bfree+0x3c>)
 800e5f4:	4809      	ldr	r0, [pc, #36]	; (800e61c <_Bfree+0x40>)
 800e5f6:	218a      	movs	r1, #138	; 0x8a
 800e5f8:	f000 ff46 	bl	800f488 <__assert_func>
 800e5fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e600:	6006      	str	r6, [r0, #0]
 800e602:	60c6      	str	r6, [r0, #12]
 800e604:	b13c      	cbz	r4, 800e616 <_Bfree+0x3a>
 800e606:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e608:	6862      	ldr	r2, [r4, #4]
 800e60a:	68db      	ldr	r3, [r3, #12]
 800e60c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e610:	6021      	str	r1, [r4, #0]
 800e612:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e616:	bd70      	pop	{r4, r5, r6, pc}
 800e618:	0800ff35 	.word	0x0800ff35
 800e61c:	08010018 	.word	0x08010018

0800e620 <__multadd>:
 800e620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e624:	690d      	ldr	r5, [r1, #16]
 800e626:	4607      	mov	r7, r0
 800e628:	460c      	mov	r4, r1
 800e62a:	461e      	mov	r6, r3
 800e62c:	f101 0c14 	add.w	ip, r1, #20
 800e630:	2000      	movs	r0, #0
 800e632:	f8dc 3000 	ldr.w	r3, [ip]
 800e636:	b299      	uxth	r1, r3
 800e638:	fb02 6101 	mla	r1, r2, r1, r6
 800e63c:	0c1e      	lsrs	r6, r3, #16
 800e63e:	0c0b      	lsrs	r3, r1, #16
 800e640:	fb02 3306 	mla	r3, r2, r6, r3
 800e644:	b289      	uxth	r1, r1
 800e646:	3001      	adds	r0, #1
 800e648:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e64c:	4285      	cmp	r5, r0
 800e64e:	f84c 1b04 	str.w	r1, [ip], #4
 800e652:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e656:	dcec      	bgt.n	800e632 <__multadd+0x12>
 800e658:	b30e      	cbz	r6, 800e69e <__multadd+0x7e>
 800e65a:	68a3      	ldr	r3, [r4, #8]
 800e65c:	42ab      	cmp	r3, r5
 800e65e:	dc19      	bgt.n	800e694 <__multadd+0x74>
 800e660:	6861      	ldr	r1, [r4, #4]
 800e662:	4638      	mov	r0, r7
 800e664:	3101      	adds	r1, #1
 800e666:	f7ff ff79 	bl	800e55c <_Balloc>
 800e66a:	4680      	mov	r8, r0
 800e66c:	b928      	cbnz	r0, 800e67a <__multadd+0x5a>
 800e66e:	4602      	mov	r2, r0
 800e670:	4b0c      	ldr	r3, [pc, #48]	; (800e6a4 <__multadd+0x84>)
 800e672:	480d      	ldr	r0, [pc, #52]	; (800e6a8 <__multadd+0x88>)
 800e674:	21b5      	movs	r1, #181	; 0xb5
 800e676:	f000 ff07 	bl	800f488 <__assert_func>
 800e67a:	6922      	ldr	r2, [r4, #16]
 800e67c:	3202      	adds	r2, #2
 800e67e:	f104 010c 	add.w	r1, r4, #12
 800e682:	0092      	lsls	r2, r2, #2
 800e684:	300c      	adds	r0, #12
 800e686:	f7fe f949 	bl	800c91c <memcpy>
 800e68a:	4621      	mov	r1, r4
 800e68c:	4638      	mov	r0, r7
 800e68e:	f7ff ffa5 	bl	800e5dc <_Bfree>
 800e692:	4644      	mov	r4, r8
 800e694:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e698:	3501      	adds	r5, #1
 800e69a:	615e      	str	r6, [r3, #20]
 800e69c:	6125      	str	r5, [r4, #16]
 800e69e:	4620      	mov	r0, r4
 800e6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6a4:	0800ffa7 	.word	0x0800ffa7
 800e6a8:	08010018 	.word	0x08010018

0800e6ac <__hi0bits>:
 800e6ac:	0c03      	lsrs	r3, r0, #16
 800e6ae:	041b      	lsls	r3, r3, #16
 800e6b0:	b9d3      	cbnz	r3, 800e6e8 <__hi0bits+0x3c>
 800e6b2:	0400      	lsls	r0, r0, #16
 800e6b4:	2310      	movs	r3, #16
 800e6b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e6ba:	bf04      	itt	eq
 800e6bc:	0200      	lsleq	r0, r0, #8
 800e6be:	3308      	addeq	r3, #8
 800e6c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e6c4:	bf04      	itt	eq
 800e6c6:	0100      	lsleq	r0, r0, #4
 800e6c8:	3304      	addeq	r3, #4
 800e6ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e6ce:	bf04      	itt	eq
 800e6d0:	0080      	lsleq	r0, r0, #2
 800e6d2:	3302      	addeq	r3, #2
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	db05      	blt.n	800e6e4 <__hi0bits+0x38>
 800e6d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e6dc:	f103 0301 	add.w	r3, r3, #1
 800e6e0:	bf08      	it	eq
 800e6e2:	2320      	moveq	r3, #32
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	4770      	bx	lr
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	e7e4      	b.n	800e6b6 <__hi0bits+0xa>

0800e6ec <__lo0bits>:
 800e6ec:	6803      	ldr	r3, [r0, #0]
 800e6ee:	f013 0207 	ands.w	r2, r3, #7
 800e6f2:	4601      	mov	r1, r0
 800e6f4:	d00b      	beq.n	800e70e <__lo0bits+0x22>
 800e6f6:	07da      	lsls	r2, r3, #31
 800e6f8:	d423      	bmi.n	800e742 <__lo0bits+0x56>
 800e6fa:	0798      	lsls	r0, r3, #30
 800e6fc:	bf49      	itett	mi
 800e6fe:	085b      	lsrmi	r3, r3, #1
 800e700:	089b      	lsrpl	r3, r3, #2
 800e702:	2001      	movmi	r0, #1
 800e704:	600b      	strmi	r3, [r1, #0]
 800e706:	bf5c      	itt	pl
 800e708:	600b      	strpl	r3, [r1, #0]
 800e70a:	2002      	movpl	r0, #2
 800e70c:	4770      	bx	lr
 800e70e:	b298      	uxth	r0, r3
 800e710:	b9a8      	cbnz	r0, 800e73e <__lo0bits+0x52>
 800e712:	0c1b      	lsrs	r3, r3, #16
 800e714:	2010      	movs	r0, #16
 800e716:	b2da      	uxtb	r2, r3
 800e718:	b90a      	cbnz	r2, 800e71e <__lo0bits+0x32>
 800e71a:	3008      	adds	r0, #8
 800e71c:	0a1b      	lsrs	r3, r3, #8
 800e71e:	071a      	lsls	r2, r3, #28
 800e720:	bf04      	itt	eq
 800e722:	091b      	lsreq	r3, r3, #4
 800e724:	3004      	addeq	r0, #4
 800e726:	079a      	lsls	r2, r3, #30
 800e728:	bf04      	itt	eq
 800e72a:	089b      	lsreq	r3, r3, #2
 800e72c:	3002      	addeq	r0, #2
 800e72e:	07da      	lsls	r2, r3, #31
 800e730:	d403      	bmi.n	800e73a <__lo0bits+0x4e>
 800e732:	085b      	lsrs	r3, r3, #1
 800e734:	f100 0001 	add.w	r0, r0, #1
 800e738:	d005      	beq.n	800e746 <__lo0bits+0x5a>
 800e73a:	600b      	str	r3, [r1, #0]
 800e73c:	4770      	bx	lr
 800e73e:	4610      	mov	r0, r2
 800e740:	e7e9      	b.n	800e716 <__lo0bits+0x2a>
 800e742:	2000      	movs	r0, #0
 800e744:	4770      	bx	lr
 800e746:	2020      	movs	r0, #32
 800e748:	4770      	bx	lr
	...

0800e74c <__i2b>:
 800e74c:	b510      	push	{r4, lr}
 800e74e:	460c      	mov	r4, r1
 800e750:	2101      	movs	r1, #1
 800e752:	f7ff ff03 	bl	800e55c <_Balloc>
 800e756:	4602      	mov	r2, r0
 800e758:	b928      	cbnz	r0, 800e766 <__i2b+0x1a>
 800e75a:	4b05      	ldr	r3, [pc, #20]	; (800e770 <__i2b+0x24>)
 800e75c:	4805      	ldr	r0, [pc, #20]	; (800e774 <__i2b+0x28>)
 800e75e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e762:	f000 fe91 	bl	800f488 <__assert_func>
 800e766:	2301      	movs	r3, #1
 800e768:	6144      	str	r4, [r0, #20]
 800e76a:	6103      	str	r3, [r0, #16]
 800e76c:	bd10      	pop	{r4, pc}
 800e76e:	bf00      	nop
 800e770:	0800ffa7 	.word	0x0800ffa7
 800e774:	08010018 	.word	0x08010018

0800e778 <__multiply>:
 800e778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e77c:	4691      	mov	r9, r2
 800e77e:	690a      	ldr	r2, [r1, #16]
 800e780:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e784:	429a      	cmp	r2, r3
 800e786:	bfb8      	it	lt
 800e788:	460b      	movlt	r3, r1
 800e78a:	460c      	mov	r4, r1
 800e78c:	bfbc      	itt	lt
 800e78e:	464c      	movlt	r4, r9
 800e790:	4699      	movlt	r9, r3
 800e792:	6927      	ldr	r7, [r4, #16]
 800e794:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e798:	68a3      	ldr	r3, [r4, #8]
 800e79a:	6861      	ldr	r1, [r4, #4]
 800e79c:	eb07 060a 	add.w	r6, r7, sl
 800e7a0:	42b3      	cmp	r3, r6
 800e7a2:	b085      	sub	sp, #20
 800e7a4:	bfb8      	it	lt
 800e7a6:	3101      	addlt	r1, #1
 800e7a8:	f7ff fed8 	bl	800e55c <_Balloc>
 800e7ac:	b930      	cbnz	r0, 800e7bc <__multiply+0x44>
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	4b44      	ldr	r3, [pc, #272]	; (800e8c4 <__multiply+0x14c>)
 800e7b2:	4845      	ldr	r0, [pc, #276]	; (800e8c8 <__multiply+0x150>)
 800e7b4:	f240 115d 	movw	r1, #349	; 0x15d
 800e7b8:	f000 fe66 	bl	800f488 <__assert_func>
 800e7bc:	f100 0514 	add.w	r5, r0, #20
 800e7c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e7c4:	462b      	mov	r3, r5
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	4543      	cmp	r3, r8
 800e7ca:	d321      	bcc.n	800e810 <__multiply+0x98>
 800e7cc:	f104 0314 	add.w	r3, r4, #20
 800e7d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e7d4:	f109 0314 	add.w	r3, r9, #20
 800e7d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e7dc:	9202      	str	r2, [sp, #8]
 800e7de:	1b3a      	subs	r2, r7, r4
 800e7e0:	3a15      	subs	r2, #21
 800e7e2:	f022 0203 	bic.w	r2, r2, #3
 800e7e6:	3204      	adds	r2, #4
 800e7e8:	f104 0115 	add.w	r1, r4, #21
 800e7ec:	428f      	cmp	r7, r1
 800e7ee:	bf38      	it	cc
 800e7f0:	2204      	movcc	r2, #4
 800e7f2:	9201      	str	r2, [sp, #4]
 800e7f4:	9a02      	ldr	r2, [sp, #8]
 800e7f6:	9303      	str	r3, [sp, #12]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d80c      	bhi.n	800e816 <__multiply+0x9e>
 800e7fc:	2e00      	cmp	r6, #0
 800e7fe:	dd03      	ble.n	800e808 <__multiply+0x90>
 800e800:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e804:	2b00      	cmp	r3, #0
 800e806:	d05a      	beq.n	800e8be <__multiply+0x146>
 800e808:	6106      	str	r6, [r0, #16]
 800e80a:	b005      	add	sp, #20
 800e80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e810:	f843 2b04 	str.w	r2, [r3], #4
 800e814:	e7d8      	b.n	800e7c8 <__multiply+0x50>
 800e816:	f8b3 a000 	ldrh.w	sl, [r3]
 800e81a:	f1ba 0f00 	cmp.w	sl, #0
 800e81e:	d024      	beq.n	800e86a <__multiply+0xf2>
 800e820:	f104 0e14 	add.w	lr, r4, #20
 800e824:	46a9      	mov	r9, r5
 800e826:	f04f 0c00 	mov.w	ip, #0
 800e82a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e82e:	f8d9 1000 	ldr.w	r1, [r9]
 800e832:	fa1f fb82 	uxth.w	fp, r2
 800e836:	b289      	uxth	r1, r1
 800e838:	fb0a 110b 	mla	r1, sl, fp, r1
 800e83c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e840:	f8d9 2000 	ldr.w	r2, [r9]
 800e844:	4461      	add	r1, ip
 800e846:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e84a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e84e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e852:	b289      	uxth	r1, r1
 800e854:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e858:	4577      	cmp	r7, lr
 800e85a:	f849 1b04 	str.w	r1, [r9], #4
 800e85e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e862:	d8e2      	bhi.n	800e82a <__multiply+0xb2>
 800e864:	9a01      	ldr	r2, [sp, #4]
 800e866:	f845 c002 	str.w	ip, [r5, r2]
 800e86a:	9a03      	ldr	r2, [sp, #12]
 800e86c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e870:	3304      	adds	r3, #4
 800e872:	f1b9 0f00 	cmp.w	r9, #0
 800e876:	d020      	beq.n	800e8ba <__multiply+0x142>
 800e878:	6829      	ldr	r1, [r5, #0]
 800e87a:	f104 0c14 	add.w	ip, r4, #20
 800e87e:	46ae      	mov	lr, r5
 800e880:	f04f 0a00 	mov.w	sl, #0
 800e884:	f8bc b000 	ldrh.w	fp, [ip]
 800e888:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e88c:	fb09 220b 	mla	r2, r9, fp, r2
 800e890:	4492      	add	sl, r2
 800e892:	b289      	uxth	r1, r1
 800e894:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e898:	f84e 1b04 	str.w	r1, [lr], #4
 800e89c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e8a0:	f8be 1000 	ldrh.w	r1, [lr]
 800e8a4:	0c12      	lsrs	r2, r2, #16
 800e8a6:	fb09 1102 	mla	r1, r9, r2, r1
 800e8aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e8ae:	4567      	cmp	r7, ip
 800e8b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e8b4:	d8e6      	bhi.n	800e884 <__multiply+0x10c>
 800e8b6:	9a01      	ldr	r2, [sp, #4]
 800e8b8:	50a9      	str	r1, [r5, r2]
 800e8ba:	3504      	adds	r5, #4
 800e8bc:	e79a      	b.n	800e7f4 <__multiply+0x7c>
 800e8be:	3e01      	subs	r6, #1
 800e8c0:	e79c      	b.n	800e7fc <__multiply+0x84>
 800e8c2:	bf00      	nop
 800e8c4:	0800ffa7 	.word	0x0800ffa7
 800e8c8:	08010018 	.word	0x08010018

0800e8cc <__pow5mult>:
 800e8cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8d0:	4615      	mov	r5, r2
 800e8d2:	f012 0203 	ands.w	r2, r2, #3
 800e8d6:	4606      	mov	r6, r0
 800e8d8:	460f      	mov	r7, r1
 800e8da:	d007      	beq.n	800e8ec <__pow5mult+0x20>
 800e8dc:	4c25      	ldr	r4, [pc, #148]	; (800e974 <__pow5mult+0xa8>)
 800e8de:	3a01      	subs	r2, #1
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e8e6:	f7ff fe9b 	bl	800e620 <__multadd>
 800e8ea:	4607      	mov	r7, r0
 800e8ec:	10ad      	asrs	r5, r5, #2
 800e8ee:	d03d      	beq.n	800e96c <__pow5mult+0xa0>
 800e8f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e8f2:	b97c      	cbnz	r4, 800e914 <__pow5mult+0x48>
 800e8f4:	2010      	movs	r0, #16
 800e8f6:	f7ff fe29 	bl	800e54c <malloc>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	6270      	str	r0, [r6, #36]	; 0x24
 800e8fe:	b928      	cbnz	r0, 800e90c <__pow5mult+0x40>
 800e900:	4b1d      	ldr	r3, [pc, #116]	; (800e978 <__pow5mult+0xac>)
 800e902:	481e      	ldr	r0, [pc, #120]	; (800e97c <__pow5mult+0xb0>)
 800e904:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e908:	f000 fdbe 	bl	800f488 <__assert_func>
 800e90c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e910:	6004      	str	r4, [r0, #0]
 800e912:	60c4      	str	r4, [r0, #12]
 800e914:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e918:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e91c:	b94c      	cbnz	r4, 800e932 <__pow5mult+0x66>
 800e91e:	f240 2171 	movw	r1, #625	; 0x271
 800e922:	4630      	mov	r0, r6
 800e924:	f7ff ff12 	bl	800e74c <__i2b>
 800e928:	2300      	movs	r3, #0
 800e92a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e92e:	4604      	mov	r4, r0
 800e930:	6003      	str	r3, [r0, #0]
 800e932:	f04f 0900 	mov.w	r9, #0
 800e936:	07eb      	lsls	r3, r5, #31
 800e938:	d50a      	bpl.n	800e950 <__pow5mult+0x84>
 800e93a:	4639      	mov	r1, r7
 800e93c:	4622      	mov	r2, r4
 800e93e:	4630      	mov	r0, r6
 800e940:	f7ff ff1a 	bl	800e778 <__multiply>
 800e944:	4639      	mov	r1, r7
 800e946:	4680      	mov	r8, r0
 800e948:	4630      	mov	r0, r6
 800e94a:	f7ff fe47 	bl	800e5dc <_Bfree>
 800e94e:	4647      	mov	r7, r8
 800e950:	106d      	asrs	r5, r5, #1
 800e952:	d00b      	beq.n	800e96c <__pow5mult+0xa0>
 800e954:	6820      	ldr	r0, [r4, #0]
 800e956:	b938      	cbnz	r0, 800e968 <__pow5mult+0x9c>
 800e958:	4622      	mov	r2, r4
 800e95a:	4621      	mov	r1, r4
 800e95c:	4630      	mov	r0, r6
 800e95e:	f7ff ff0b 	bl	800e778 <__multiply>
 800e962:	6020      	str	r0, [r4, #0]
 800e964:	f8c0 9000 	str.w	r9, [r0]
 800e968:	4604      	mov	r4, r0
 800e96a:	e7e4      	b.n	800e936 <__pow5mult+0x6a>
 800e96c:	4638      	mov	r0, r7
 800e96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e972:	bf00      	nop
 800e974:	08010168 	.word	0x08010168
 800e978:	0800ff35 	.word	0x0800ff35
 800e97c:	08010018 	.word	0x08010018

0800e980 <__lshift>:
 800e980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e984:	460c      	mov	r4, r1
 800e986:	6849      	ldr	r1, [r1, #4]
 800e988:	6923      	ldr	r3, [r4, #16]
 800e98a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e98e:	68a3      	ldr	r3, [r4, #8]
 800e990:	4607      	mov	r7, r0
 800e992:	4691      	mov	r9, r2
 800e994:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e998:	f108 0601 	add.w	r6, r8, #1
 800e99c:	42b3      	cmp	r3, r6
 800e99e:	db0b      	blt.n	800e9b8 <__lshift+0x38>
 800e9a0:	4638      	mov	r0, r7
 800e9a2:	f7ff fddb 	bl	800e55c <_Balloc>
 800e9a6:	4605      	mov	r5, r0
 800e9a8:	b948      	cbnz	r0, 800e9be <__lshift+0x3e>
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	4b2a      	ldr	r3, [pc, #168]	; (800ea58 <__lshift+0xd8>)
 800e9ae:	482b      	ldr	r0, [pc, #172]	; (800ea5c <__lshift+0xdc>)
 800e9b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e9b4:	f000 fd68 	bl	800f488 <__assert_func>
 800e9b8:	3101      	adds	r1, #1
 800e9ba:	005b      	lsls	r3, r3, #1
 800e9bc:	e7ee      	b.n	800e99c <__lshift+0x1c>
 800e9be:	2300      	movs	r3, #0
 800e9c0:	f100 0114 	add.w	r1, r0, #20
 800e9c4:	f100 0210 	add.w	r2, r0, #16
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	4553      	cmp	r3, sl
 800e9cc:	db37      	blt.n	800ea3e <__lshift+0xbe>
 800e9ce:	6920      	ldr	r0, [r4, #16]
 800e9d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e9d4:	f104 0314 	add.w	r3, r4, #20
 800e9d8:	f019 091f 	ands.w	r9, r9, #31
 800e9dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e9e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e9e4:	d02f      	beq.n	800ea46 <__lshift+0xc6>
 800e9e6:	f1c9 0e20 	rsb	lr, r9, #32
 800e9ea:	468a      	mov	sl, r1
 800e9ec:	f04f 0c00 	mov.w	ip, #0
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	fa02 f209 	lsl.w	r2, r2, r9
 800e9f6:	ea42 020c 	orr.w	r2, r2, ip
 800e9fa:	f84a 2b04 	str.w	r2, [sl], #4
 800e9fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea02:	4298      	cmp	r0, r3
 800ea04:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ea08:	d8f2      	bhi.n	800e9f0 <__lshift+0x70>
 800ea0a:	1b03      	subs	r3, r0, r4
 800ea0c:	3b15      	subs	r3, #21
 800ea0e:	f023 0303 	bic.w	r3, r3, #3
 800ea12:	3304      	adds	r3, #4
 800ea14:	f104 0215 	add.w	r2, r4, #21
 800ea18:	4290      	cmp	r0, r2
 800ea1a:	bf38      	it	cc
 800ea1c:	2304      	movcc	r3, #4
 800ea1e:	f841 c003 	str.w	ip, [r1, r3]
 800ea22:	f1bc 0f00 	cmp.w	ip, #0
 800ea26:	d001      	beq.n	800ea2c <__lshift+0xac>
 800ea28:	f108 0602 	add.w	r6, r8, #2
 800ea2c:	3e01      	subs	r6, #1
 800ea2e:	4638      	mov	r0, r7
 800ea30:	612e      	str	r6, [r5, #16]
 800ea32:	4621      	mov	r1, r4
 800ea34:	f7ff fdd2 	bl	800e5dc <_Bfree>
 800ea38:	4628      	mov	r0, r5
 800ea3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ea42:	3301      	adds	r3, #1
 800ea44:	e7c1      	b.n	800e9ca <__lshift+0x4a>
 800ea46:	3904      	subs	r1, #4
 800ea48:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ea50:	4298      	cmp	r0, r3
 800ea52:	d8f9      	bhi.n	800ea48 <__lshift+0xc8>
 800ea54:	e7ea      	b.n	800ea2c <__lshift+0xac>
 800ea56:	bf00      	nop
 800ea58:	0800ffa7 	.word	0x0800ffa7
 800ea5c:	08010018 	.word	0x08010018

0800ea60 <__mcmp>:
 800ea60:	b530      	push	{r4, r5, lr}
 800ea62:	6902      	ldr	r2, [r0, #16]
 800ea64:	690c      	ldr	r4, [r1, #16]
 800ea66:	1b12      	subs	r2, r2, r4
 800ea68:	d10e      	bne.n	800ea88 <__mcmp+0x28>
 800ea6a:	f100 0314 	add.w	r3, r0, #20
 800ea6e:	3114      	adds	r1, #20
 800ea70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ea74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ea78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ea7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ea80:	42a5      	cmp	r5, r4
 800ea82:	d003      	beq.n	800ea8c <__mcmp+0x2c>
 800ea84:	d305      	bcc.n	800ea92 <__mcmp+0x32>
 800ea86:	2201      	movs	r2, #1
 800ea88:	4610      	mov	r0, r2
 800ea8a:	bd30      	pop	{r4, r5, pc}
 800ea8c:	4283      	cmp	r3, r0
 800ea8e:	d3f3      	bcc.n	800ea78 <__mcmp+0x18>
 800ea90:	e7fa      	b.n	800ea88 <__mcmp+0x28>
 800ea92:	f04f 32ff 	mov.w	r2, #4294967295
 800ea96:	e7f7      	b.n	800ea88 <__mcmp+0x28>

0800ea98 <__mdiff>:
 800ea98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea9c:	460c      	mov	r4, r1
 800ea9e:	4606      	mov	r6, r0
 800eaa0:	4611      	mov	r1, r2
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	4690      	mov	r8, r2
 800eaa6:	f7ff ffdb 	bl	800ea60 <__mcmp>
 800eaaa:	1e05      	subs	r5, r0, #0
 800eaac:	d110      	bne.n	800ead0 <__mdiff+0x38>
 800eaae:	4629      	mov	r1, r5
 800eab0:	4630      	mov	r0, r6
 800eab2:	f7ff fd53 	bl	800e55c <_Balloc>
 800eab6:	b930      	cbnz	r0, 800eac6 <__mdiff+0x2e>
 800eab8:	4b3a      	ldr	r3, [pc, #232]	; (800eba4 <__mdiff+0x10c>)
 800eaba:	4602      	mov	r2, r0
 800eabc:	f240 2132 	movw	r1, #562	; 0x232
 800eac0:	4839      	ldr	r0, [pc, #228]	; (800eba8 <__mdiff+0x110>)
 800eac2:	f000 fce1 	bl	800f488 <__assert_func>
 800eac6:	2301      	movs	r3, #1
 800eac8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eacc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead0:	bfa4      	itt	ge
 800ead2:	4643      	movge	r3, r8
 800ead4:	46a0      	movge	r8, r4
 800ead6:	4630      	mov	r0, r6
 800ead8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eadc:	bfa6      	itte	ge
 800eade:	461c      	movge	r4, r3
 800eae0:	2500      	movge	r5, #0
 800eae2:	2501      	movlt	r5, #1
 800eae4:	f7ff fd3a 	bl	800e55c <_Balloc>
 800eae8:	b920      	cbnz	r0, 800eaf4 <__mdiff+0x5c>
 800eaea:	4b2e      	ldr	r3, [pc, #184]	; (800eba4 <__mdiff+0x10c>)
 800eaec:	4602      	mov	r2, r0
 800eaee:	f44f 7110 	mov.w	r1, #576	; 0x240
 800eaf2:	e7e5      	b.n	800eac0 <__mdiff+0x28>
 800eaf4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eaf8:	6926      	ldr	r6, [r4, #16]
 800eafa:	60c5      	str	r5, [r0, #12]
 800eafc:	f104 0914 	add.w	r9, r4, #20
 800eb00:	f108 0514 	add.w	r5, r8, #20
 800eb04:	f100 0e14 	add.w	lr, r0, #20
 800eb08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800eb0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eb10:	f108 0210 	add.w	r2, r8, #16
 800eb14:	46f2      	mov	sl, lr
 800eb16:	2100      	movs	r1, #0
 800eb18:	f859 3b04 	ldr.w	r3, [r9], #4
 800eb1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eb20:	fa1f f883 	uxth.w	r8, r3
 800eb24:	fa11 f18b 	uxtah	r1, r1, fp
 800eb28:	0c1b      	lsrs	r3, r3, #16
 800eb2a:	eba1 0808 	sub.w	r8, r1, r8
 800eb2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eb32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eb36:	fa1f f888 	uxth.w	r8, r8
 800eb3a:	1419      	asrs	r1, r3, #16
 800eb3c:	454e      	cmp	r6, r9
 800eb3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eb42:	f84a 3b04 	str.w	r3, [sl], #4
 800eb46:	d8e7      	bhi.n	800eb18 <__mdiff+0x80>
 800eb48:	1b33      	subs	r3, r6, r4
 800eb4a:	3b15      	subs	r3, #21
 800eb4c:	f023 0303 	bic.w	r3, r3, #3
 800eb50:	3304      	adds	r3, #4
 800eb52:	3415      	adds	r4, #21
 800eb54:	42a6      	cmp	r6, r4
 800eb56:	bf38      	it	cc
 800eb58:	2304      	movcc	r3, #4
 800eb5a:	441d      	add	r5, r3
 800eb5c:	4473      	add	r3, lr
 800eb5e:	469e      	mov	lr, r3
 800eb60:	462e      	mov	r6, r5
 800eb62:	4566      	cmp	r6, ip
 800eb64:	d30e      	bcc.n	800eb84 <__mdiff+0xec>
 800eb66:	f10c 0203 	add.w	r2, ip, #3
 800eb6a:	1b52      	subs	r2, r2, r5
 800eb6c:	f022 0203 	bic.w	r2, r2, #3
 800eb70:	3d03      	subs	r5, #3
 800eb72:	45ac      	cmp	ip, r5
 800eb74:	bf38      	it	cc
 800eb76:	2200      	movcc	r2, #0
 800eb78:	441a      	add	r2, r3
 800eb7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800eb7e:	b17b      	cbz	r3, 800eba0 <__mdiff+0x108>
 800eb80:	6107      	str	r7, [r0, #16]
 800eb82:	e7a3      	b.n	800eacc <__mdiff+0x34>
 800eb84:	f856 8b04 	ldr.w	r8, [r6], #4
 800eb88:	fa11 f288 	uxtah	r2, r1, r8
 800eb8c:	1414      	asrs	r4, r2, #16
 800eb8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eb92:	b292      	uxth	r2, r2
 800eb94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800eb98:	f84e 2b04 	str.w	r2, [lr], #4
 800eb9c:	1421      	asrs	r1, r4, #16
 800eb9e:	e7e0      	b.n	800eb62 <__mdiff+0xca>
 800eba0:	3f01      	subs	r7, #1
 800eba2:	e7ea      	b.n	800eb7a <__mdiff+0xe2>
 800eba4:	0800ffa7 	.word	0x0800ffa7
 800eba8:	08010018 	.word	0x08010018

0800ebac <__d2b>:
 800ebac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ebb0:	4689      	mov	r9, r1
 800ebb2:	2101      	movs	r1, #1
 800ebb4:	ec57 6b10 	vmov	r6, r7, d0
 800ebb8:	4690      	mov	r8, r2
 800ebba:	f7ff fccf 	bl	800e55c <_Balloc>
 800ebbe:	4604      	mov	r4, r0
 800ebc0:	b930      	cbnz	r0, 800ebd0 <__d2b+0x24>
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	4b25      	ldr	r3, [pc, #148]	; (800ec5c <__d2b+0xb0>)
 800ebc6:	4826      	ldr	r0, [pc, #152]	; (800ec60 <__d2b+0xb4>)
 800ebc8:	f240 310a 	movw	r1, #778	; 0x30a
 800ebcc:	f000 fc5c 	bl	800f488 <__assert_func>
 800ebd0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ebd4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ebd8:	bb35      	cbnz	r5, 800ec28 <__d2b+0x7c>
 800ebda:	2e00      	cmp	r6, #0
 800ebdc:	9301      	str	r3, [sp, #4]
 800ebde:	d028      	beq.n	800ec32 <__d2b+0x86>
 800ebe0:	4668      	mov	r0, sp
 800ebe2:	9600      	str	r6, [sp, #0]
 800ebe4:	f7ff fd82 	bl	800e6ec <__lo0bits>
 800ebe8:	9900      	ldr	r1, [sp, #0]
 800ebea:	b300      	cbz	r0, 800ec2e <__d2b+0x82>
 800ebec:	9a01      	ldr	r2, [sp, #4]
 800ebee:	f1c0 0320 	rsb	r3, r0, #32
 800ebf2:	fa02 f303 	lsl.w	r3, r2, r3
 800ebf6:	430b      	orrs	r3, r1
 800ebf8:	40c2      	lsrs	r2, r0
 800ebfa:	6163      	str	r3, [r4, #20]
 800ebfc:	9201      	str	r2, [sp, #4]
 800ebfe:	9b01      	ldr	r3, [sp, #4]
 800ec00:	61a3      	str	r3, [r4, #24]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	bf14      	ite	ne
 800ec06:	2202      	movne	r2, #2
 800ec08:	2201      	moveq	r2, #1
 800ec0a:	6122      	str	r2, [r4, #16]
 800ec0c:	b1d5      	cbz	r5, 800ec44 <__d2b+0x98>
 800ec0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ec12:	4405      	add	r5, r0
 800ec14:	f8c9 5000 	str.w	r5, [r9]
 800ec18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ec1c:	f8c8 0000 	str.w	r0, [r8]
 800ec20:	4620      	mov	r0, r4
 800ec22:	b003      	add	sp, #12
 800ec24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ec2c:	e7d5      	b.n	800ebda <__d2b+0x2e>
 800ec2e:	6161      	str	r1, [r4, #20]
 800ec30:	e7e5      	b.n	800ebfe <__d2b+0x52>
 800ec32:	a801      	add	r0, sp, #4
 800ec34:	f7ff fd5a 	bl	800e6ec <__lo0bits>
 800ec38:	9b01      	ldr	r3, [sp, #4]
 800ec3a:	6163      	str	r3, [r4, #20]
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	6122      	str	r2, [r4, #16]
 800ec40:	3020      	adds	r0, #32
 800ec42:	e7e3      	b.n	800ec0c <__d2b+0x60>
 800ec44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ec48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ec4c:	f8c9 0000 	str.w	r0, [r9]
 800ec50:	6918      	ldr	r0, [r3, #16]
 800ec52:	f7ff fd2b 	bl	800e6ac <__hi0bits>
 800ec56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ec5a:	e7df      	b.n	800ec1c <__d2b+0x70>
 800ec5c:	0800ffa7 	.word	0x0800ffa7
 800ec60:	08010018 	.word	0x08010018

0800ec64 <_calloc_r>:
 800ec64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec66:	fba1 2402 	umull	r2, r4, r1, r2
 800ec6a:	b94c      	cbnz	r4, 800ec80 <_calloc_r+0x1c>
 800ec6c:	4611      	mov	r1, r2
 800ec6e:	9201      	str	r2, [sp, #4]
 800ec70:	f000 f87a 	bl	800ed68 <_malloc_r>
 800ec74:	9a01      	ldr	r2, [sp, #4]
 800ec76:	4605      	mov	r5, r0
 800ec78:	b930      	cbnz	r0, 800ec88 <_calloc_r+0x24>
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	b003      	add	sp, #12
 800ec7e:	bd30      	pop	{r4, r5, pc}
 800ec80:	220c      	movs	r2, #12
 800ec82:	6002      	str	r2, [r0, #0]
 800ec84:	2500      	movs	r5, #0
 800ec86:	e7f8      	b.n	800ec7a <_calloc_r+0x16>
 800ec88:	4621      	mov	r1, r4
 800ec8a:	f7fd fe55 	bl	800c938 <memset>
 800ec8e:	e7f4      	b.n	800ec7a <_calloc_r+0x16>

0800ec90 <_free_r>:
 800ec90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec92:	2900      	cmp	r1, #0
 800ec94:	d044      	beq.n	800ed20 <_free_r+0x90>
 800ec96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec9a:	9001      	str	r0, [sp, #4]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	f1a1 0404 	sub.w	r4, r1, #4
 800eca2:	bfb8      	it	lt
 800eca4:	18e4      	addlt	r4, r4, r3
 800eca6:	f000 fc8f 	bl	800f5c8 <__malloc_lock>
 800ecaa:	4a1e      	ldr	r2, [pc, #120]	; (800ed24 <_free_r+0x94>)
 800ecac:	9801      	ldr	r0, [sp, #4]
 800ecae:	6813      	ldr	r3, [r2, #0]
 800ecb0:	b933      	cbnz	r3, 800ecc0 <_free_r+0x30>
 800ecb2:	6063      	str	r3, [r4, #4]
 800ecb4:	6014      	str	r4, [r2, #0]
 800ecb6:	b003      	add	sp, #12
 800ecb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ecbc:	f000 bc8a 	b.w	800f5d4 <__malloc_unlock>
 800ecc0:	42a3      	cmp	r3, r4
 800ecc2:	d908      	bls.n	800ecd6 <_free_r+0x46>
 800ecc4:	6825      	ldr	r5, [r4, #0]
 800ecc6:	1961      	adds	r1, r4, r5
 800ecc8:	428b      	cmp	r3, r1
 800ecca:	bf01      	itttt	eq
 800eccc:	6819      	ldreq	r1, [r3, #0]
 800ecce:	685b      	ldreq	r3, [r3, #4]
 800ecd0:	1949      	addeq	r1, r1, r5
 800ecd2:	6021      	streq	r1, [r4, #0]
 800ecd4:	e7ed      	b.n	800ecb2 <_free_r+0x22>
 800ecd6:	461a      	mov	r2, r3
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	b10b      	cbz	r3, 800ece0 <_free_r+0x50>
 800ecdc:	42a3      	cmp	r3, r4
 800ecde:	d9fa      	bls.n	800ecd6 <_free_r+0x46>
 800ece0:	6811      	ldr	r1, [r2, #0]
 800ece2:	1855      	adds	r5, r2, r1
 800ece4:	42a5      	cmp	r5, r4
 800ece6:	d10b      	bne.n	800ed00 <_free_r+0x70>
 800ece8:	6824      	ldr	r4, [r4, #0]
 800ecea:	4421      	add	r1, r4
 800ecec:	1854      	adds	r4, r2, r1
 800ecee:	42a3      	cmp	r3, r4
 800ecf0:	6011      	str	r1, [r2, #0]
 800ecf2:	d1e0      	bne.n	800ecb6 <_free_r+0x26>
 800ecf4:	681c      	ldr	r4, [r3, #0]
 800ecf6:	685b      	ldr	r3, [r3, #4]
 800ecf8:	6053      	str	r3, [r2, #4]
 800ecfa:	4421      	add	r1, r4
 800ecfc:	6011      	str	r1, [r2, #0]
 800ecfe:	e7da      	b.n	800ecb6 <_free_r+0x26>
 800ed00:	d902      	bls.n	800ed08 <_free_r+0x78>
 800ed02:	230c      	movs	r3, #12
 800ed04:	6003      	str	r3, [r0, #0]
 800ed06:	e7d6      	b.n	800ecb6 <_free_r+0x26>
 800ed08:	6825      	ldr	r5, [r4, #0]
 800ed0a:	1961      	adds	r1, r4, r5
 800ed0c:	428b      	cmp	r3, r1
 800ed0e:	bf04      	itt	eq
 800ed10:	6819      	ldreq	r1, [r3, #0]
 800ed12:	685b      	ldreq	r3, [r3, #4]
 800ed14:	6063      	str	r3, [r4, #4]
 800ed16:	bf04      	itt	eq
 800ed18:	1949      	addeq	r1, r1, r5
 800ed1a:	6021      	streq	r1, [r4, #0]
 800ed1c:	6054      	str	r4, [r2, #4]
 800ed1e:	e7ca      	b.n	800ecb6 <_free_r+0x26>
 800ed20:	b003      	add	sp, #12
 800ed22:	bd30      	pop	{r4, r5, pc}
 800ed24:	240046c4 	.word	0x240046c4

0800ed28 <sbrk_aligned>:
 800ed28:	b570      	push	{r4, r5, r6, lr}
 800ed2a:	4e0e      	ldr	r6, [pc, #56]	; (800ed64 <sbrk_aligned+0x3c>)
 800ed2c:	460c      	mov	r4, r1
 800ed2e:	6831      	ldr	r1, [r6, #0]
 800ed30:	4605      	mov	r5, r0
 800ed32:	b911      	cbnz	r1, 800ed3a <sbrk_aligned+0x12>
 800ed34:	f000 fb42 	bl	800f3bc <_sbrk_r>
 800ed38:	6030      	str	r0, [r6, #0]
 800ed3a:	4621      	mov	r1, r4
 800ed3c:	4628      	mov	r0, r5
 800ed3e:	f000 fb3d 	bl	800f3bc <_sbrk_r>
 800ed42:	1c43      	adds	r3, r0, #1
 800ed44:	d00a      	beq.n	800ed5c <sbrk_aligned+0x34>
 800ed46:	1cc4      	adds	r4, r0, #3
 800ed48:	f024 0403 	bic.w	r4, r4, #3
 800ed4c:	42a0      	cmp	r0, r4
 800ed4e:	d007      	beq.n	800ed60 <sbrk_aligned+0x38>
 800ed50:	1a21      	subs	r1, r4, r0
 800ed52:	4628      	mov	r0, r5
 800ed54:	f000 fb32 	bl	800f3bc <_sbrk_r>
 800ed58:	3001      	adds	r0, #1
 800ed5a:	d101      	bne.n	800ed60 <sbrk_aligned+0x38>
 800ed5c:	f04f 34ff 	mov.w	r4, #4294967295
 800ed60:	4620      	mov	r0, r4
 800ed62:	bd70      	pop	{r4, r5, r6, pc}
 800ed64:	240046c8 	.word	0x240046c8

0800ed68 <_malloc_r>:
 800ed68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed6c:	1ccd      	adds	r5, r1, #3
 800ed6e:	f025 0503 	bic.w	r5, r5, #3
 800ed72:	3508      	adds	r5, #8
 800ed74:	2d0c      	cmp	r5, #12
 800ed76:	bf38      	it	cc
 800ed78:	250c      	movcc	r5, #12
 800ed7a:	2d00      	cmp	r5, #0
 800ed7c:	4607      	mov	r7, r0
 800ed7e:	db01      	blt.n	800ed84 <_malloc_r+0x1c>
 800ed80:	42a9      	cmp	r1, r5
 800ed82:	d905      	bls.n	800ed90 <_malloc_r+0x28>
 800ed84:	230c      	movs	r3, #12
 800ed86:	603b      	str	r3, [r7, #0]
 800ed88:	2600      	movs	r6, #0
 800ed8a:	4630      	mov	r0, r6
 800ed8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed90:	4e2e      	ldr	r6, [pc, #184]	; (800ee4c <_malloc_r+0xe4>)
 800ed92:	f000 fc19 	bl	800f5c8 <__malloc_lock>
 800ed96:	6833      	ldr	r3, [r6, #0]
 800ed98:	461c      	mov	r4, r3
 800ed9a:	bb34      	cbnz	r4, 800edea <_malloc_r+0x82>
 800ed9c:	4629      	mov	r1, r5
 800ed9e:	4638      	mov	r0, r7
 800eda0:	f7ff ffc2 	bl	800ed28 <sbrk_aligned>
 800eda4:	1c43      	adds	r3, r0, #1
 800eda6:	4604      	mov	r4, r0
 800eda8:	d14d      	bne.n	800ee46 <_malloc_r+0xde>
 800edaa:	6834      	ldr	r4, [r6, #0]
 800edac:	4626      	mov	r6, r4
 800edae:	2e00      	cmp	r6, #0
 800edb0:	d140      	bne.n	800ee34 <_malloc_r+0xcc>
 800edb2:	6823      	ldr	r3, [r4, #0]
 800edb4:	4631      	mov	r1, r6
 800edb6:	4638      	mov	r0, r7
 800edb8:	eb04 0803 	add.w	r8, r4, r3
 800edbc:	f000 fafe 	bl	800f3bc <_sbrk_r>
 800edc0:	4580      	cmp	r8, r0
 800edc2:	d13a      	bne.n	800ee3a <_malloc_r+0xd2>
 800edc4:	6821      	ldr	r1, [r4, #0]
 800edc6:	3503      	adds	r5, #3
 800edc8:	1a6d      	subs	r5, r5, r1
 800edca:	f025 0503 	bic.w	r5, r5, #3
 800edce:	3508      	adds	r5, #8
 800edd0:	2d0c      	cmp	r5, #12
 800edd2:	bf38      	it	cc
 800edd4:	250c      	movcc	r5, #12
 800edd6:	4629      	mov	r1, r5
 800edd8:	4638      	mov	r0, r7
 800edda:	f7ff ffa5 	bl	800ed28 <sbrk_aligned>
 800edde:	3001      	adds	r0, #1
 800ede0:	d02b      	beq.n	800ee3a <_malloc_r+0xd2>
 800ede2:	6823      	ldr	r3, [r4, #0]
 800ede4:	442b      	add	r3, r5
 800ede6:	6023      	str	r3, [r4, #0]
 800ede8:	e00e      	b.n	800ee08 <_malloc_r+0xa0>
 800edea:	6822      	ldr	r2, [r4, #0]
 800edec:	1b52      	subs	r2, r2, r5
 800edee:	d41e      	bmi.n	800ee2e <_malloc_r+0xc6>
 800edf0:	2a0b      	cmp	r2, #11
 800edf2:	d916      	bls.n	800ee22 <_malloc_r+0xba>
 800edf4:	1961      	adds	r1, r4, r5
 800edf6:	42a3      	cmp	r3, r4
 800edf8:	6025      	str	r5, [r4, #0]
 800edfa:	bf18      	it	ne
 800edfc:	6059      	strne	r1, [r3, #4]
 800edfe:	6863      	ldr	r3, [r4, #4]
 800ee00:	bf08      	it	eq
 800ee02:	6031      	streq	r1, [r6, #0]
 800ee04:	5162      	str	r2, [r4, r5]
 800ee06:	604b      	str	r3, [r1, #4]
 800ee08:	4638      	mov	r0, r7
 800ee0a:	f104 060b 	add.w	r6, r4, #11
 800ee0e:	f000 fbe1 	bl	800f5d4 <__malloc_unlock>
 800ee12:	f026 0607 	bic.w	r6, r6, #7
 800ee16:	1d23      	adds	r3, r4, #4
 800ee18:	1af2      	subs	r2, r6, r3
 800ee1a:	d0b6      	beq.n	800ed8a <_malloc_r+0x22>
 800ee1c:	1b9b      	subs	r3, r3, r6
 800ee1e:	50a3      	str	r3, [r4, r2]
 800ee20:	e7b3      	b.n	800ed8a <_malloc_r+0x22>
 800ee22:	6862      	ldr	r2, [r4, #4]
 800ee24:	42a3      	cmp	r3, r4
 800ee26:	bf0c      	ite	eq
 800ee28:	6032      	streq	r2, [r6, #0]
 800ee2a:	605a      	strne	r2, [r3, #4]
 800ee2c:	e7ec      	b.n	800ee08 <_malloc_r+0xa0>
 800ee2e:	4623      	mov	r3, r4
 800ee30:	6864      	ldr	r4, [r4, #4]
 800ee32:	e7b2      	b.n	800ed9a <_malloc_r+0x32>
 800ee34:	4634      	mov	r4, r6
 800ee36:	6876      	ldr	r6, [r6, #4]
 800ee38:	e7b9      	b.n	800edae <_malloc_r+0x46>
 800ee3a:	230c      	movs	r3, #12
 800ee3c:	603b      	str	r3, [r7, #0]
 800ee3e:	4638      	mov	r0, r7
 800ee40:	f000 fbc8 	bl	800f5d4 <__malloc_unlock>
 800ee44:	e7a1      	b.n	800ed8a <_malloc_r+0x22>
 800ee46:	6025      	str	r5, [r4, #0]
 800ee48:	e7de      	b.n	800ee08 <_malloc_r+0xa0>
 800ee4a:	bf00      	nop
 800ee4c:	240046c4 	.word	0x240046c4

0800ee50 <__ssputs_r>:
 800ee50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee54:	688e      	ldr	r6, [r1, #8]
 800ee56:	429e      	cmp	r6, r3
 800ee58:	4682      	mov	sl, r0
 800ee5a:	460c      	mov	r4, r1
 800ee5c:	4690      	mov	r8, r2
 800ee5e:	461f      	mov	r7, r3
 800ee60:	d838      	bhi.n	800eed4 <__ssputs_r+0x84>
 800ee62:	898a      	ldrh	r2, [r1, #12]
 800ee64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee68:	d032      	beq.n	800eed0 <__ssputs_r+0x80>
 800ee6a:	6825      	ldr	r5, [r4, #0]
 800ee6c:	6909      	ldr	r1, [r1, #16]
 800ee6e:	eba5 0901 	sub.w	r9, r5, r1
 800ee72:	6965      	ldr	r5, [r4, #20]
 800ee74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee7c:	3301      	adds	r3, #1
 800ee7e:	444b      	add	r3, r9
 800ee80:	106d      	asrs	r5, r5, #1
 800ee82:	429d      	cmp	r5, r3
 800ee84:	bf38      	it	cc
 800ee86:	461d      	movcc	r5, r3
 800ee88:	0553      	lsls	r3, r2, #21
 800ee8a:	d531      	bpl.n	800eef0 <__ssputs_r+0xa0>
 800ee8c:	4629      	mov	r1, r5
 800ee8e:	f7ff ff6b 	bl	800ed68 <_malloc_r>
 800ee92:	4606      	mov	r6, r0
 800ee94:	b950      	cbnz	r0, 800eeac <__ssputs_r+0x5c>
 800ee96:	230c      	movs	r3, #12
 800ee98:	f8ca 3000 	str.w	r3, [sl]
 800ee9c:	89a3      	ldrh	r3, [r4, #12]
 800ee9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eea2:	81a3      	strh	r3, [r4, #12]
 800eea4:	f04f 30ff 	mov.w	r0, #4294967295
 800eea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeac:	6921      	ldr	r1, [r4, #16]
 800eeae:	464a      	mov	r2, r9
 800eeb0:	f7fd fd34 	bl	800c91c <memcpy>
 800eeb4:	89a3      	ldrh	r3, [r4, #12]
 800eeb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eeba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eebe:	81a3      	strh	r3, [r4, #12]
 800eec0:	6126      	str	r6, [r4, #16]
 800eec2:	6165      	str	r5, [r4, #20]
 800eec4:	444e      	add	r6, r9
 800eec6:	eba5 0509 	sub.w	r5, r5, r9
 800eeca:	6026      	str	r6, [r4, #0]
 800eecc:	60a5      	str	r5, [r4, #8]
 800eece:	463e      	mov	r6, r7
 800eed0:	42be      	cmp	r6, r7
 800eed2:	d900      	bls.n	800eed6 <__ssputs_r+0x86>
 800eed4:	463e      	mov	r6, r7
 800eed6:	6820      	ldr	r0, [r4, #0]
 800eed8:	4632      	mov	r2, r6
 800eeda:	4641      	mov	r1, r8
 800eedc:	f000 fb5a 	bl	800f594 <memmove>
 800eee0:	68a3      	ldr	r3, [r4, #8]
 800eee2:	1b9b      	subs	r3, r3, r6
 800eee4:	60a3      	str	r3, [r4, #8]
 800eee6:	6823      	ldr	r3, [r4, #0]
 800eee8:	4433      	add	r3, r6
 800eeea:	6023      	str	r3, [r4, #0]
 800eeec:	2000      	movs	r0, #0
 800eeee:	e7db      	b.n	800eea8 <__ssputs_r+0x58>
 800eef0:	462a      	mov	r2, r5
 800eef2:	f000 fb75 	bl	800f5e0 <_realloc_r>
 800eef6:	4606      	mov	r6, r0
 800eef8:	2800      	cmp	r0, #0
 800eefa:	d1e1      	bne.n	800eec0 <__ssputs_r+0x70>
 800eefc:	6921      	ldr	r1, [r4, #16]
 800eefe:	4650      	mov	r0, sl
 800ef00:	f7ff fec6 	bl	800ec90 <_free_r>
 800ef04:	e7c7      	b.n	800ee96 <__ssputs_r+0x46>
	...

0800ef08 <_svfiprintf_r>:
 800ef08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef0c:	4698      	mov	r8, r3
 800ef0e:	898b      	ldrh	r3, [r1, #12]
 800ef10:	061b      	lsls	r3, r3, #24
 800ef12:	b09d      	sub	sp, #116	; 0x74
 800ef14:	4607      	mov	r7, r0
 800ef16:	460d      	mov	r5, r1
 800ef18:	4614      	mov	r4, r2
 800ef1a:	d50e      	bpl.n	800ef3a <_svfiprintf_r+0x32>
 800ef1c:	690b      	ldr	r3, [r1, #16]
 800ef1e:	b963      	cbnz	r3, 800ef3a <_svfiprintf_r+0x32>
 800ef20:	2140      	movs	r1, #64	; 0x40
 800ef22:	f7ff ff21 	bl	800ed68 <_malloc_r>
 800ef26:	6028      	str	r0, [r5, #0]
 800ef28:	6128      	str	r0, [r5, #16]
 800ef2a:	b920      	cbnz	r0, 800ef36 <_svfiprintf_r+0x2e>
 800ef2c:	230c      	movs	r3, #12
 800ef2e:	603b      	str	r3, [r7, #0]
 800ef30:	f04f 30ff 	mov.w	r0, #4294967295
 800ef34:	e0d1      	b.n	800f0da <_svfiprintf_r+0x1d2>
 800ef36:	2340      	movs	r3, #64	; 0x40
 800ef38:	616b      	str	r3, [r5, #20]
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ef3e:	2320      	movs	r3, #32
 800ef40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef44:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef48:	2330      	movs	r3, #48	; 0x30
 800ef4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f0f4 <_svfiprintf_r+0x1ec>
 800ef4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef52:	f04f 0901 	mov.w	r9, #1
 800ef56:	4623      	mov	r3, r4
 800ef58:	469a      	mov	sl, r3
 800ef5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef5e:	b10a      	cbz	r2, 800ef64 <_svfiprintf_r+0x5c>
 800ef60:	2a25      	cmp	r2, #37	; 0x25
 800ef62:	d1f9      	bne.n	800ef58 <_svfiprintf_r+0x50>
 800ef64:	ebba 0b04 	subs.w	fp, sl, r4
 800ef68:	d00b      	beq.n	800ef82 <_svfiprintf_r+0x7a>
 800ef6a:	465b      	mov	r3, fp
 800ef6c:	4622      	mov	r2, r4
 800ef6e:	4629      	mov	r1, r5
 800ef70:	4638      	mov	r0, r7
 800ef72:	f7ff ff6d 	bl	800ee50 <__ssputs_r>
 800ef76:	3001      	adds	r0, #1
 800ef78:	f000 80aa 	beq.w	800f0d0 <_svfiprintf_r+0x1c8>
 800ef7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef7e:	445a      	add	r2, fp
 800ef80:	9209      	str	r2, [sp, #36]	; 0x24
 800ef82:	f89a 3000 	ldrb.w	r3, [sl]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	f000 80a2 	beq.w	800f0d0 <_svfiprintf_r+0x1c8>
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef96:	f10a 0a01 	add.w	sl, sl, #1
 800ef9a:	9304      	str	r3, [sp, #16]
 800ef9c:	9307      	str	r3, [sp, #28]
 800ef9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efa2:	931a      	str	r3, [sp, #104]	; 0x68
 800efa4:	4654      	mov	r4, sl
 800efa6:	2205      	movs	r2, #5
 800efa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efac:	4851      	ldr	r0, [pc, #324]	; (800f0f4 <_svfiprintf_r+0x1ec>)
 800efae:	f7f1 f99f 	bl	80002f0 <memchr>
 800efb2:	9a04      	ldr	r2, [sp, #16]
 800efb4:	b9d8      	cbnz	r0, 800efee <_svfiprintf_r+0xe6>
 800efb6:	06d0      	lsls	r0, r2, #27
 800efb8:	bf44      	itt	mi
 800efba:	2320      	movmi	r3, #32
 800efbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efc0:	0711      	lsls	r1, r2, #28
 800efc2:	bf44      	itt	mi
 800efc4:	232b      	movmi	r3, #43	; 0x2b
 800efc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efca:	f89a 3000 	ldrb.w	r3, [sl]
 800efce:	2b2a      	cmp	r3, #42	; 0x2a
 800efd0:	d015      	beq.n	800effe <_svfiprintf_r+0xf6>
 800efd2:	9a07      	ldr	r2, [sp, #28]
 800efd4:	4654      	mov	r4, sl
 800efd6:	2000      	movs	r0, #0
 800efd8:	f04f 0c0a 	mov.w	ip, #10
 800efdc:	4621      	mov	r1, r4
 800efde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efe2:	3b30      	subs	r3, #48	; 0x30
 800efe4:	2b09      	cmp	r3, #9
 800efe6:	d94e      	bls.n	800f086 <_svfiprintf_r+0x17e>
 800efe8:	b1b0      	cbz	r0, 800f018 <_svfiprintf_r+0x110>
 800efea:	9207      	str	r2, [sp, #28]
 800efec:	e014      	b.n	800f018 <_svfiprintf_r+0x110>
 800efee:	eba0 0308 	sub.w	r3, r0, r8
 800eff2:	fa09 f303 	lsl.w	r3, r9, r3
 800eff6:	4313      	orrs	r3, r2
 800eff8:	9304      	str	r3, [sp, #16]
 800effa:	46a2      	mov	sl, r4
 800effc:	e7d2      	b.n	800efa4 <_svfiprintf_r+0x9c>
 800effe:	9b03      	ldr	r3, [sp, #12]
 800f000:	1d19      	adds	r1, r3, #4
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	9103      	str	r1, [sp, #12]
 800f006:	2b00      	cmp	r3, #0
 800f008:	bfbb      	ittet	lt
 800f00a:	425b      	neglt	r3, r3
 800f00c:	f042 0202 	orrlt.w	r2, r2, #2
 800f010:	9307      	strge	r3, [sp, #28]
 800f012:	9307      	strlt	r3, [sp, #28]
 800f014:	bfb8      	it	lt
 800f016:	9204      	strlt	r2, [sp, #16]
 800f018:	7823      	ldrb	r3, [r4, #0]
 800f01a:	2b2e      	cmp	r3, #46	; 0x2e
 800f01c:	d10c      	bne.n	800f038 <_svfiprintf_r+0x130>
 800f01e:	7863      	ldrb	r3, [r4, #1]
 800f020:	2b2a      	cmp	r3, #42	; 0x2a
 800f022:	d135      	bne.n	800f090 <_svfiprintf_r+0x188>
 800f024:	9b03      	ldr	r3, [sp, #12]
 800f026:	1d1a      	adds	r2, r3, #4
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	9203      	str	r2, [sp, #12]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	bfb8      	it	lt
 800f030:	f04f 33ff 	movlt.w	r3, #4294967295
 800f034:	3402      	adds	r4, #2
 800f036:	9305      	str	r3, [sp, #20]
 800f038:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f104 <_svfiprintf_r+0x1fc>
 800f03c:	7821      	ldrb	r1, [r4, #0]
 800f03e:	2203      	movs	r2, #3
 800f040:	4650      	mov	r0, sl
 800f042:	f7f1 f955 	bl	80002f0 <memchr>
 800f046:	b140      	cbz	r0, 800f05a <_svfiprintf_r+0x152>
 800f048:	2340      	movs	r3, #64	; 0x40
 800f04a:	eba0 000a 	sub.w	r0, r0, sl
 800f04e:	fa03 f000 	lsl.w	r0, r3, r0
 800f052:	9b04      	ldr	r3, [sp, #16]
 800f054:	4303      	orrs	r3, r0
 800f056:	3401      	adds	r4, #1
 800f058:	9304      	str	r3, [sp, #16]
 800f05a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f05e:	4826      	ldr	r0, [pc, #152]	; (800f0f8 <_svfiprintf_r+0x1f0>)
 800f060:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f064:	2206      	movs	r2, #6
 800f066:	f7f1 f943 	bl	80002f0 <memchr>
 800f06a:	2800      	cmp	r0, #0
 800f06c:	d038      	beq.n	800f0e0 <_svfiprintf_r+0x1d8>
 800f06e:	4b23      	ldr	r3, [pc, #140]	; (800f0fc <_svfiprintf_r+0x1f4>)
 800f070:	bb1b      	cbnz	r3, 800f0ba <_svfiprintf_r+0x1b2>
 800f072:	9b03      	ldr	r3, [sp, #12]
 800f074:	3307      	adds	r3, #7
 800f076:	f023 0307 	bic.w	r3, r3, #7
 800f07a:	3308      	adds	r3, #8
 800f07c:	9303      	str	r3, [sp, #12]
 800f07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f080:	4433      	add	r3, r6
 800f082:	9309      	str	r3, [sp, #36]	; 0x24
 800f084:	e767      	b.n	800ef56 <_svfiprintf_r+0x4e>
 800f086:	fb0c 3202 	mla	r2, ip, r2, r3
 800f08a:	460c      	mov	r4, r1
 800f08c:	2001      	movs	r0, #1
 800f08e:	e7a5      	b.n	800efdc <_svfiprintf_r+0xd4>
 800f090:	2300      	movs	r3, #0
 800f092:	3401      	adds	r4, #1
 800f094:	9305      	str	r3, [sp, #20]
 800f096:	4619      	mov	r1, r3
 800f098:	f04f 0c0a 	mov.w	ip, #10
 800f09c:	4620      	mov	r0, r4
 800f09e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0a2:	3a30      	subs	r2, #48	; 0x30
 800f0a4:	2a09      	cmp	r2, #9
 800f0a6:	d903      	bls.n	800f0b0 <_svfiprintf_r+0x1a8>
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d0c5      	beq.n	800f038 <_svfiprintf_r+0x130>
 800f0ac:	9105      	str	r1, [sp, #20]
 800f0ae:	e7c3      	b.n	800f038 <_svfiprintf_r+0x130>
 800f0b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0b4:	4604      	mov	r4, r0
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	e7f0      	b.n	800f09c <_svfiprintf_r+0x194>
 800f0ba:	ab03      	add	r3, sp, #12
 800f0bc:	9300      	str	r3, [sp, #0]
 800f0be:	462a      	mov	r2, r5
 800f0c0:	4b0f      	ldr	r3, [pc, #60]	; (800f100 <_svfiprintf_r+0x1f8>)
 800f0c2:	a904      	add	r1, sp, #16
 800f0c4:	4638      	mov	r0, r7
 800f0c6:	f7fd fccf 	bl	800ca68 <_printf_float>
 800f0ca:	1c42      	adds	r2, r0, #1
 800f0cc:	4606      	mov	r6, r0
 800f0ce:	d1d6      	bne.n	800f07e <_svfiprintf_r+0x176>
 800f0d0:	89ab      	ldrh	r3, [r5, #12]
 800f0d2:	065b      	lsls	r3, r3, #25
 800f0d4:	f53f af2c 	bmi.w	800ef30 <_svfiprintf_r+0x28>
 800f0d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0da:	b01d      	add	sp, #116	; 0x74
 800f0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e0:	ab03      	add	r3, sp, #12
 800f0e2:	9300      	str	r3, [sp, #0]
 800f0e4:	462a      	mov	r2, r5
 800f0e6:	4b06      	ldr	r3, [pc, #24]	; (800f100 <_svfiprintf_r+0x1f8>)
 800f0e8:	a904      	add	r1, sp, #16
 800f0ea:	4638      	mov	r0, r7
 800f0ec:	f7fd ff48 	bl	800cf80 <_printf_i>
 800f0f0:	e7eb      	b.n	800f0ca <_svfiprintf_r+0x1c2>
 800f0f2:	bf00      	nop
 800f0f4:	08010174 	.word	0x08010174
 800f0f8:	0801017e 	.word	0x0801017e
 800f0fc:	0800ca69 	.word	0x0800ca69
 800f100:	0800ee51 	.word	0x0800ee51
 800f104:	0801017a 	.word	0x0801017a

0800f108 <__sfputc_r>:
 800f108:	6893      	ldr	r3, [r2, #8]
 800f10a:	3b01      	subs	r3, #1
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	b410      	push	{r4}
 800f110:	6093      	str	r3, [r2, #8]
 800f112:	da08      	bge.n	800f126 <__sfputc_r+0x1e>
 800f114:	6994      	ldr	r4, [r2, #24]
 800f116:	42a3      	cmp	r3, r4
 800f118:	db01      	blt.n	800f11e <__sfputc_r+0x16>
 800f11a:	290a      	cmp	r1, #10
 800f11c:	d103      	bne.n	800f126 <__sfputc_r+0x1e>
 800f11e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f122:	f7fe b935 	b.w	800d390 <__swbuf_r>
 800f126:	6813      	ldr	r3, [r2, #0]
 800f128:	1c58      	adds	r0, r3, #1
 800f12a:	6010      	str	r0, [r2, #0]
 800f12c:	7019      	strb	r1, [r3, #0]
 800f12e:	4608      	mov	r0, r1
 800f130:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f134:	4770      	bx	lr

0800f136 <__sfputs_r>:
 800f136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f138:	4606      	mov	r6, r0
 800f13a:	460f      	mov	r7, r1
 800f13c:	4614      	mov	r4, r2
 800f13e:	18d5      	adds	r5, r2, r3
 800f140:	42ac      	cmp	r4, r5
 800f142:	d101      	bne.n	800f148 <__sfputs_r+0x12>
 800f144:	2000      	movs	r0, #0
 800f146:	e007      	b.n	800f158 <__sfputs_r+0x22>
 800f148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f14c:	463a      	mov	r2, r7
 800f14e:	4630      	mov	r0, r6
 800f150:	f7ff ffda 	bl	800f108 <__sfputc_r>
 800f154:	1c43      	adds	r3, r0, #1
 800f156:	d1f3      	bne.n	800f140 <__sfputs_r+0xa>
 800f158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f15c <_vfiprintf_r>:
 800f15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f160:	460d      	mov	r5, r1
 800f162:	b09d      	sub	sp, #116	; 0x74
 800f164:	4614      	mov	r4, r2
 800f166:	4698      	mov	r8, r3
 800f168:	4606      	mov	r6, r0
 800f16a:	b118      	cbz	r0, 800f174 <_vfiprintf_r+0x18>
 800f16c:	6983      	ldr	r3, [r0, #24]
 800f16e:	b90b      	cbnz	r3, 800f174 <_vfiprintf_r+0x18>
 800f170:	f7ff f8e2 	bl	800e338 <__sinit>
 800f174:	4b89      	ldr	r3, [pc, #548]	; (800f39c <_vfiprintf_r+0x240>)
 800f176:	429d      	cmp	r5, r3
 800f178:	d11b      	bne.n	800f1b2 <_vfiprintf_r+0x56>
 800f17a:	6875      	ldr	r5, [r6, #4]
 800f17c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f17e:	07d9      	lsls	r1, r3, #31
 800f180:	d405      	bmi.n	800f18e <_vfiprintf_r+0x32>
 800f182:	89ab      	ldrh	r3, [r5, #12]
 800f184:	059a      	lsls	r2, r3, #22
 800f186:	d402      	bmi.n	800f18e <_vfiprintf_r+0x32>
 800f188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f18a:	f7ff f978 	bl	800e47e <__retarget_lock_acquire_recursive>
 800f18e:	89ab      	ldrh	r3, [r5, #12]
 800f190:	071b      	lsls	r3, r3, #28
 800f192:	d501      	bpl.n	800f198 <_vfiprintf_r+0x3c>
 800f194:	692b      	ldr	r3, [r5, #16]
 800f196:	b9eb      	cbnz	r3, 800f1d4 <_vfiprintf_r+0x78>
 800f198:	4629      	mov	r1, r5
 800f19a:	4630      	mov	r0, r6
 800f19c:	f7fe f94a 	bl	800d434 <__swsetup_r>
 800f1a0:	b1c0      	cbz	r0, 800f1d4 <_vfiprintf_r+0x78>
 800f1a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1a4:	07dc      	lsls	r4, r3, #31
 800f1a6:	d50e      	bpl.n	800f1c6 <_vfiprintf_r+0x6a>
 800f1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1ac:	b01d      	add	sp, #116	; 0x74
 800f1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b2:	4b7b      	ldr	r3, [pc, #492]	; (800f3a0 <_vfiprintf_r+0x244>)
 800f1b4:	429d      	cmp	r5, r3
 800f1b6:	d101      	bne.n	800f1bc <_vfiprintf_r+0x60>
 800f1b8:	68b5      	ldr	r5, [r6, #8]
 800f1ba:	e7df      	b.n	800f17c <_vfiprintf_r+0x20>
 800f1bc:	4b79      	ldr	r3, [pc, #484]	; (800f3a4 <_vfiprintf_r+0x248>)
 800f1be:	429d      	cmp	r5, r3
 800f1c0:	bf08      	it	eq
 800f1c2:	68f5      	ldreq	r5, [r6, #12]
 800f1c4:	e7da      	b.n	800f17c <_vfiprintf_r+0x20>
 800f1c6:	89ab      	ldrh	r3, [r5, #12]
 800f1c8:	0598      	lsls	r0, r3, #22
 800f1ca:	d4ed      	bmi.n	800f1a8 <_vfiprintf_r+0x4c>
 800f1cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1ce:	f7ff f957 	bl	800e480 <__retarget_lock_release_recursive>
 800f1d2:	e7e9      	b.n	800f1a8 <_vfiprintf_r+0x4c>
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	9309      	str	r3, [sp, #36]	; 0x24
 800f1d8:	2320      	movs	r3, #32
 800f1da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1de:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1e2:	2330      	movs	r3, #48	; 0x30
 800f1e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f3a8 <_vfiprintf_r+0x24c>
 800f1e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1ec:	f04f 0901 	mov.w	r9, #1
 800f1f0:	4623      	mov	r3, r4
 800f1f2:	469a      	mov	sl, r3
 800f1f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1f8:	b10a      	cbz	r2, 800f1fe <_vfiprintf_r+0xa2>
 800f1fa:	2a25      	cmp	r2, #37	; 0x25
 800f1fc:	d1f9      	bne.n	800f1f2 <_vfiprintf_r+0x96>
 800f1fe:	ebba 0b04 	subs.w	fp, sl, r4
 800f202:	d00b      	beq.n	800f21c <_vfiprintf_r+0xc0>
 800f204:	465b      	mov	r3, fp
 800f206:	4622      	mov	r2, r4
 800f208:	4629      	mov	r1, r5
 800f20a:	4630      	mov	r0, r6
 800f20c:	f7ff ff93 	bl	800f136 <__sfputs_r>
 800f210:	3001      	adds	r0, #1
 800f212:	f000 80aa 	beq.w	800f36a <_vfiprintf_r+0x20e>
 800f216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f218:	445a      	add	r2, fp
 800f21a:	9209      	str	r2, [sp, #36]	; 0x24
 800f21c:	f89a 3000 	ldrb.w	r3, [sl]
 800f220:	2b00      	cmp	r3, #0
 800f222:	f000 80a2 	beq.w	800f36a <_vfiprintf_r+0x20e>
 800f226:	2300      	movs	r3, #0
 800f228:	f04f 32ff 	mov.w	r2, #4294967295
 800f22c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f230:	f10a 0a01 	add.w	sl, sl, #1
 800f234:	9304      	str	r3, [sp, #16]
 800f236:	9307      	str	r3, [sp, #28]
 800f238:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f23c:	931a      	str	r3, [sp, #104]	; 0x68
 800f23e:	4654      	mov	r4, sl
 800f240:	2205      	movs	r2, #5
 800f242:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f246:	4858      	ldr	r0, [pc, #352]	; (800f3a8 <_vfiprintf_r+0x24c>)
 800f248:	f7f1 f852 	bl	80002f0 <memchr>
 800f24c:	9a04      	ldr	r2, [sp, #16]
 800f24e:	b9d8      	cbnz	r0, 800f288 <_vfiprintf_r+0x12c>
 800f250:	06d1      	lsls	r1, r2, #27
 800f252:	bf44      	itt	mi
 800f254:	2320      	movmi	r3, #32
 800f256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f25a:	0713      	lsls	r3, r2, #28
 800f25c:	bf44      	itt	mi
 800f25e:	232b      	movmi	r3, #43	; 0x2b
 800f260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f264:	f89a 3000 	ldrb.w	r3, [sl]
 800f268:	2b2a      	cmp	r3, #42	; 0x2a
 800f26a:	d015      	beq.n	800f298 <_vfiprintf_r+0x13c>
 800f26c:	9a07      	ldr	r2, [sp, #28]
 800f26e:	4654      	mov	r4, sl
 800f270:	2000      	movs	r0, #0
 800f272:	f04f 0c0a 	mov.w	ip, #10
 800f276:	4621      	mov	r1, r4
 800f278:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f27c:	3b30      	subs	r3, #48	; 0x30
 800f27e:	2b09      	cmp	r3, #9
 800f280:	d94e      	bls.n	800f320 <_vfiprintf_r+0x1c4>
 800f282:	b1b0      	cbz	r0, 800f2b2 <_vfiprintf_r+0x156>
 800f284:	9207      	str	r2, [sp, #28]
 800f286:	e014      	b.n	800f2b2 <_vfiprintf_r+0x156>
 800f288:	eba0 0308 	sub.w	r3, r0, r8
 800f28c:	fa09 f303 	lsl.w	r3, r9, r3
 800f290:	4313      	orrs	r3, r2
 800f292:	9304      	str	r3, [sp, #16]
 800f294:	46a2      	mov	sl, r4
 800f296:	e7d2      	b.n	800f23e <_vfiprintf_r+0xe2>
 800f298:	9b03      	ldr	r3, [sp, #12]
 800f29a:	1d19      	adds	r1, r3, #4
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	9103      	str	r1, [sp, #12]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	bfbb      	ittet	lt
 800f2a4:	425b      	neglt	r3, r3
 800f2a6:	f042 0202 	orrlt.w	r2, r2, #2
 800f2aa:	9307      	strge	r3, [sp, #28]
 800f2ac:	9307      	strlt	r3, [sp, #28]
 800f2ae:	bfb8      	it	lt
 800f2b0:	9204      	strlt	r2, [sp, #16]
 800f2b2:	7823      	ldrb	r3, [r4, #0]
 800f2b4:	2b2e      	cmp	r3, #46	; 0x2e
 800f2b6:	d10c      	bne.n	800f2d2 <_vfiprintf_r+0x176>
 800f2b8:	7863      	ldrb	r3, [r4, #1]
 800f2ba:	2b2a      	cmp	r3, #42	; 0x2a
 800f2bc:	d135      	bne.n	800f32a <_vfiprintf_r+0x1ce>
 800f2be:	9b03      	ldr	r3, [sp, #12]
 800f2c0:	1d1a      	adds	r2, r3, #4
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	9203      	str	r2, [sp, #12]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	bfb8      	it	lt
 800f2ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2ce:	3402      	adds	r4, #2
 800f2d0:	9305      	str	r3, [sp, #20]
 800f2d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f3b8 <_vfiprintf_r+0x25c>
 800f2d6:	7821      	ldrb	r1, [r4, #0]
 800f2d8:	2203      	movs	r2, #3
 800f2da:	4650      	mov	r0, sl
 800f2dc:	f7f1 f808 	bl	80002f0 <memchr>
 800f2e0:	b140      	cbz	r0, 800f2f4 <_vfiprintf_r+0x198>
 800f2e2:	2340      	movs	r3, #64	; 0x40
 800f2e4:	eba0 000a 	sub.w	r0, r0, sl
 800f2e8:	fa03 f000 	lsl.w	r0, r3, r0
 800f2ec:	9b04      	ldr	r3, [sp, #16]
 800f2ee:	4303      	orrs	r3, r0
 800f2f0:	3401      	adds	r4, #1
 800f2f2:	9304      	str	r3, [sp, #16]
 800f2f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2f8:	482c      	ldr	r0, [pc, #176]	; (800f3ac <_vfiprintf_r+0x250>)
 800f2fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2fe:	2206      	movs	r2, #6
 800f300:	f7f0 fff6 	bl	80002f0 <memchr>
 800f304:	2800      	cmp	r0, #0
 800f306:	d03f      	beq.n	800f388 <_vfiprintf_r+0x22c>
 800f308:	4b29      	ldr	r3, [pc, #164]	; (800f3b0 <_vfiprintf_r+0x254>)
 800f30a:	bb1b      	cbnz	r3, 800f354 <_vfiprintf_r+0x1f8>
 800f30c:	9b03      	ldr	r3, [sp, #12]
 800f30e:	3307      	adds	r3, #7
 800f310:	f023 0307 	bic.w	r3, r3, #7
 800f314:	3308      	adds	r3, #8
 800f316:	9303      	str	r3, [sp, #12]
 800f318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f31a:	443b      	add	r3, r7
 800f31c:	9309      	str	r3, [sp, #36]	; 0x24
 800f31e:	e767      	b.n	800f1f0 <_vfiprintf_r+0x94>
 800f320:	fb0c 3202 	mla	r2, ip, r2, r3
 800f324:	460c      	mov	r4, r1
 800f326:	2001      	movs	r0, #1
 800f328:	e7a5      	b.n	800f276 <_vfiprintf_r+0x11a>
 800f32a:	2300      	movs	r3, #0
 800f32c:	3401      	adds	r4, #1
 800f32e:	9305      	str	r3, [sp, #20]
 800f330:	4619      	mov	r1, r3
 800f332:	f04f 0c0a 	mov.w	ip, #10
 800f336:	4620      	mov	r0, r4
 800f338:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f33c:	3a30      	subs	r2, #48	; 0x30
 800f33e:	2a09      	cmp	r2, #9
 800f340:	d903      	bls.n	800f34a <_vfiprintf_r+0x1ee>
 800f342:	2b00      	cmp	r3, #0
 800f344:	d0c5      	beq.n	800f2d2 <_vfiprintf_r+0x176>
 800f346:	9105      	str	r1, [sp, #20]
 800f348:	e7c3      	b.n	800f2d2 <_vfiprintf_r+0x176>
 800f34a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f34e:	4604      	mov	r4, r0
 800f350:	2301      	movs	r3, #1
 800f352:	e7f0      	b.n	800f336 <_vfiprintf_r+0x1da>
 800f354:	ab03      	add	r3, sp, #12
 800f356:	9300      	str	r3, [sp, #0]
 800f358:	462a      	mov	r2, r5
 800f35a:	4b16      	ldr	r3, [pc, #88]	; (800f3b4 <_vfiprintf_r+0x258>)
 800f35c:	a904      	add	r1, sp, #16
 800f35e:	4630      	mov	r0, r6
 800f360:	f7fd fb82 	bl	800ca68 <_printf_float>
 800f364:	4607      	mov	r7, r0
 800f366:	1c78      	adds	r0, r7, #1
 800f368:	d1d6      	bne.n	800f318 <_vfiprintf_r+0x1bc>
 800f36a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f36c:	07d9      	lsls	r1, r3, #31
 800f36e:	d405      	bmi.n	800f37c <_vfiprintf_r+0x220>
 800f370:	89ab      	ldrh	r3, [r5, #12]
 800f372:	059a      	lsls	r2, r3, #22
 800f374:	d402      	bmi.n	800f37c <_vfiprintf_r+0x220>
 800f376:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f378:	f7ff f882 	bl	800e480 <__retarget_lock_release_recursive>
 800f37c:	89ab      	ldrh	r3, [r5, #12]
 800f37e:	065b      	lsls	r3, r3, #25
 800f380:	f53f af12 	bmi.w	800f1a8 <_vfiprintf_r+0x4c>
 800f384:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f386:	e711      	b.n	800f1ac <_vfiprintf_r+0x50>
 800f388:	ab03      	add	r3, sp, #12
 800f38a:	9300      	str	r3, [sp, #0]
 800f38c:	462a      	mov	r2, r5
 800f38e:	4b09      	ldr	r3, [pc, #36]	; (800f3b4 <_vfiprintf_r+0x258>)
 800f390:	a904      	add	r1, sp, #16
 800f392:	4630      	mov	r0, r6
 800f394:	f7fd fdf4 	bl	800cf80 <_printf_i>
 800f398:	e7e4      	b.n	800f364 <_vfiprintf_r+0x208>
 800f39a:	bf00      	nop
 800f39c:	0800ffd8 	.word	0x0800ffd8
 800f3a0:	0800fff8 	.word	0x0800fff8
 800f3a4:	0800ffb8 	.word	0x0800ffb8
 800f3a8:	08010174 	.word	0x08010174
 800f3ac:	0801017e 	.word	0x0801017e
 800f3b0:	0800ca69 	.word	0x0800ca69
 800f3b4:	0800f137 	.word	0x0800f137
 800f3b8:	0801017a 	.word	0x0801017a

0800f3bc <_sbrk_r>:
 800f3bc:	b538      	push	{r3, r4, r5, lr}
 800f3be:	4d06      	ldr	r5, [pc, #24]	; (800f3d8 <_sbrk_r+0x1c>)
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	4604      	mov	r4, r0
 800f3c4:	4608      	mov	r0, r1
 800f3c6:	602b      	str	r3, [r5, #0]
 800f3c8:	f7f3 fc58 	bl	8002c7c <_sbrk>
 800f3cc:	1c43      	adds	r3, r0, #1
 800f3ce:	d102      	bne.n	800f3d6 <_sbrk_r+0x1a>
 800f3d0:	682b      	ldr	r3, [r5, #0]
 800f3d2:	b103      	cbz	r3, 800f3d6 <_sbrk_r+0x1a>
 800f3d4:	6023      	str	r3, [r4, #0]
 800f3d6:	bd38      	pop	{r3, r4, r5, pc}
 800f3d8:	240046cc 	.word	0x240046cc

0800f3dc <__sread>:
 800f3dc:	b510      	push	{r4, lr}
 800f3de:	460c      	mov	r4, r1
 800f3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3e4:	f000 f92c 	bl	800f640 <_read_r>
 800f3e8:	2800      	cmp	r0, #0
 800f3ea:	bfab      	itete	ge
 800f3ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f3ee:	89a3      	ldrhlt	r3, [r4, #12]
 800f3f0:	181b      	addge	r3, r3, r0
 800f3f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f3f6:	bfac      	ite	ge
 800f3f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f3fa:	81a3      	strhlt	r3, [r4, #12]
 800f3fc:	bd10      	pop	{r4, pc}

0800f3fe <__swrite>:
 800f3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f402:	461f      	mov	r7, r3
 800f404:	898b      	ldrh	r3, [r1, #12]
 800f406:	05db      	lsls	r3, r3, #23
 800f408:	4605      	mov	r5, r0
 800f40a:	460c      	mov	r4, r1
 800f40c:	4616      	mov	r6, r2
 800f40e:	d505      	bpl.n	800f41c <__swrite+0x1e>
 800f410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f414:	2302      	movs	r3, #2
 800f416:	2200      	movs	r2, #0
 800f418:	f000 f898 	bl	800f54c <_lseek_r>
 800f41c:	89a3      	ldrh	r3, [r4, #12]
 800f41e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f422:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f426:	81a3      	strh	r3, [r4, #12]
 800f428:	4632      	mov	r2, r6
 800f42a:	463b      	mov	r3, r7
 800f42c:	4628      	mov	r0, r5
 800f42e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f432:	f000 b817 	b.w	800f464 <_write_r>

0800f436 <__sseek>:
 800f436:	b510      	push	{r4, lr}
 800f438:	460c      	mov	r4, r1
 800f43a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f43e:	f000 f885 	bl	800f54c <_lseek_r>
 800f442:	1c43      	adds	r3, r0, #1
 800f444:	89a3      	ldrh	r3, [r4, #12]
 800f446:	bf15      	itete	ne
 800f448:	6560      	strne	r0, [r4, #84]	; 0x54
 800f44a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f44e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f452:	81a3      	strheq	r3, [r4, #12]
 800f454:	bf18      	it	ne
 800f456:	81a3      	strhne	r3, [r4, #12]
 800f458:	bd10      	pop	{r4, pc}

0800f45a <__sclose>:
 800f45a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f45e:	f000 b831 	b.w	800f4c4 <_close_r>
	...

0800f464 <_write_r>:
 800f464:	b538      	push	{r3, r4, r5, lr}
 800f466:	4d07      	ldr	r5, [pc, #28]	; (800f484 <_write_r+0x20>)
 800f468:	4604      	mov	r4, r0
 800f46a:	4608      	mov	r0, r1
 800f46c:	4611      	mov	r1, r2
 800f46e:	2200      	movs	r2, #0
 800f470:	602a      	str	r2, [r5, #0]
 800f472:	461a      	mov	r2, r3
 800f474:	f7f3 fbb1 	bl	8002bda <_write>
 800f478:	1c43      	adds	r3, r0, #1
 800f47a:	d102      	bne.n	800f482 <_write_r+0x1e>
 800f47c:	682b      	ldr	r3, [r5, #0]
 800f47e:	b103      	cbz	r3, 800f482 <_write_r+0x1e>
 800f480:	6023      	str	r3, [r4, #0]
 800f482:	bd38      	pop	{r3, r4, r5, pc}
 800f484:	240046cc 	.word	0x240046cc

0800f488 <__assert_func>:
 800f488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f48a:	4614      	mov	r4, r2
 800f48c:	461a      	mov	r2, r3
 800f48e:	4b09      	ldr	r3, [pc, #36]	; (800f4b4 <__assert_func+0x2c>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	4605      	mov	r5, r0
 800f494:	68d8      	ldr	r0, [r3, #12]
 800f496:	b14c      	cbz	r4, 800f4ac <__assert_func+0x24>
 800f498:	4b07      	ldr	r3, [pc, #28]	; (800f4b8 <__assert_func+0x30>)
 800f49a:	9100      	str	r1, [sp, #0]
 800f49c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f4a0:	4906      	ldr	r1, [pc, #24]	; (800f4bc <__assert_func+0x34>)
 800f4a2:	462b      	mov	r3, r5
 800f4a4:	f000 f81e 	bl	800f4e4 <fiprintf>
 800f4a8:	f000 f8e9 	bl	800f67e <abort>
 800f4ac:	4b04      	ldr	r3, [pc, #16]	; (800f4c0 <__assert_func+0x38>)
 800f4ae:	461c      	mov	r4, r3
 800f4b0:	e7f3      	b.n	800f49a <__assert_func+0x12>
 800f4b2:	bf00      	nop
 800f4b4:	2400001c 	.word	0x2400001c
 800f4b8:	08010185 	.word	0x08010185
 800f4bc:	08010192 	.word	0x08010192
 800f4c0:	080101c0 	.word	0x080101c0

0800f4c4 <_close_r>:
 800f4c4:	b538      	push	{r3, r4, r5, lr}
 800f4c6:	4d06      	ldr	r5, [pc, #24]	; (800f4e0 <_close_r+0x1c>)
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	4604      	mov	r4, r0
 800f4cc:	4608      	mov	r0, r1
 800f4ce:	602b      	str	r3, [r5, #0]
 800f4d0:	f7f3 fb9f 	bl	8002c12 <_close>
 800f4d4:	1c43      	adds	r3, r0, #1
 800f4d6:	d102      	bne.n	800f4de <_close_r+0x1a>
 800f4d8:	682b      	ldr	r3, [r5, #0]
 800f4da:	b103      	cbz	r3, 800f4de <_close_r+0x1a>
 800f4dc:	6023      	str	r3, [r4, #0]
 800f4de:	bd38      	pop	{r3, r4, r5, pc}
 800f4e0:	240046cc 	.word	0x240046cc

0800f4e4 <fiprintf>:
 800f4e4:	b40e      	push	{r1, r2, r3}
 800f4e6:	b503      	push	{r0, r1, lr}
 800f4e8:	4601      	mov	r1, r0
 800f4ea:	ab03      	add	r3, sp, #12
 800f4ec:	4805      	ldr	r0, [pc, #20]	; (800f504 <fiprintf+0x20>)
 800f4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4f2:	6800      	ldr	r0, [r0, #0]
 800f4f4:	9301      	str	r3, [sp, #4]
 800f4f6:	f7ff fe31 	bl	800f15c <_vfiprintf_r>
 800f4fa:	b002      	add	sp, #8
 800f4fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f500:	b003      	add	sp, #12
 800f502:	4770      	bx	lr
 800f504:	2400001c 	.word	0x2400001c

0800f508 <_fstat_r>:
 800f508:	b538      	push	{r3, r4, r5, lr}
 800f50a:	4d07      	ldr	r5, [pc, #28]	; (800f528 <_fstat_r+0x20>)
 800f50c:	2300      	movs	r3, #0
 800f50e:	4604      	mov	r4, r0
 800f510:	4608      	mov	r0, r1
 800f512:	4611      	mov	r1, r2
 800f514:	602b      	str	r3, [r5, #0]
 800f516:	f7f3 fb88 	bl	8002c2a <_fstat>
 800f51a:	1c43      	adds	r3, r0, #1
 800f51c:	d102      	bne.n	800f524 <_fstat_r+0x1c>
 800f51e:	682b      	ldr	r3, [r5, #0]
 800f520:	b103      	cbz	r3, 800f524 <_fstat_r+0x1c>
 800f522:	6023      	str	r3, [r4, #0]
 800f524:	bd38      	pop	{r3, r4, r5, pc}
 800f526:	bf00      	nop
 800f528:	240046cc 	.word	0x240046cc

0800f52c <_isatty_r>:
 800f52c:	b538      	push	{r3, r4, r5, lr}
 800f52e:	4d06      	ldr	r5, [pc, #24]	; (800f548 <_isatty_r+0x1c>)
 800f530:	2300      	movs	r3, #0
 800f532:	4604      	mov	r4, r0
 800f534:	4608      	mov	r0, r1
 800f536:	602b      	str	r3, [r5, #0]
 800f538:	f7f3 fb87 	bl	8002c4a <_isatty>
 800f53c:	1c43      	adds	r3, r0, #1
 800f53e:	d102      	bne.n	800f546 <_isatty_r+0x1a>
 800f540:	682b      	ldr	r3, [r5, #0]
 800f542:	b103      	cbz	r3, 800f546 <_isatty_r+0x1a>
 800f544:	6023      	str	r3, [r4, #0]
 800f546:	bd38      	pop	{r3, r4, r5, pc}
 800f548:	240046cc 	.word	0x240046cc

0800f54c <_lseek_r>:
 800f54c:	b538      	push	{r3, r4, r5, lr}
 800f54e:	4d07      	ldr	r5, [pc, #28]	; (800f56c <_lseek_r+0x20>)
 800f550:	4604      	mov	r4, r0
 800f552:	4608      	mov	r0, r1
 800f554:	4611      	mov	r1, r2
 800f556:	2200      	movs	r2, #0
 800f558:	602a      	str	r2, [r5, #0]
 800f55a:	461a      	mov	r2, r3
 800f55c:	f7f3 fb80 	bl	8002c60 <_lseek>
 800f560:	1c43      	adds	r3, r0, #1
 800f562:	d102      	bne.n	800f56a <_lseek_r+0x1e>
 800f564:	682b      	ldr	r3, [r5, #0]
 800f566:	b103      	cbz	r3, 800f56a <_lseek_r+0x1e>
 800f568:	6023      	str	r3, [r4, #0]
 800f56a:	bd38      	pop	{r3, r4, r5, pc}
 800f56c:	240046cc 	.word	0x240046cc

0800f570 <__ascii_mbtowc>:
 800f570:	b082      	sub	sp, #8
 800f572:	b901      	cbnz	r1, 800f576 <__ascii_mbtowc+0x6>
 800f574:	a901      	add	r1, sp, #4
 800f576:	b142      	cbz	r2, 800f58a <__ascii_mbtowc+0x1a>
 800f578:	b14b      	cbz	r3, 800f58e <__ascii_mbtowc+0x1e>
 800f57a:	7813      	ldrb	r3, [r2, #0]
 800f57c:	600b      	str	r3, [r1, #0]
 800f57e:	7812      	ldrb	r2, [r2, #0]
 800f580:	1e10      	subs	r0, r2, #0
 800f582:	bf18      	it	ne
 800f584:	2001      	movne	r0, #1
 800f586:	b002      	add	sp, #8
 800f588:	4770      	bx	lr
 800f58a:	4610      	mov	r0, r2
 800f58c:	e7fb      	b.n	800f586 <__ascii_mbtowc+0x16>
 800f58e:	f06f 0001 	mvn.w	r0, #1
 800f592:	e7f8      	b.n	800f586 <__ascii_mbtowc+0x16>

0800f594 <memmove>:
 800f594:	4288      	cmp	r0, r1
 800f596:	b510      	push	{r4, lr}
 800f598:	eb01 0402 	add.w	r4, r1, r2
 800f59c:	d902      	bls.n	800f5a4 <memmove+0x10>
 800f59e:	4284      	cmp	r4, r0
 800f5a0:	4623      	mov	r3, r4
 800f5a2:	d807      	bhi.n	800f5b4 <memmove+0x20>
 800f5a4:	1e43      	subs	r3, r0, #1
 800f5a6:	42a1      	cmp	r1, r4
 800f5a8:	d008      	beq.n	800f5bc <memmove+0x28>
 800f5aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f5b2:	e7f8      	b.n	800f5a6 <memmove+0x12>
 800f5b4:	4402      	add	r2, r0
 800f5b6:	4601      	mov	r1, r0
 800f5b8:	428a      	cmp	r2, r1
 800f5ba:	d100      	bne.n	800f5be <memmove+0x2a>
 800f5bc:	bd10      	pop	{r4, pc}
 800f5be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f5c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f5c6:	e7f7      	b.n	800f5b8 <memmove+0x24>

0800f5c8 <__malloc_lock>:
 800f5c8:	4801      	ldr	r0, [pc, #4]	; (800f5d0 <__malloc_lock+0x8>)
 800f5ca:	f7fe bf58 	b.w	800e47e <__retarget_lock_acquire_recursive>
 800f5ce:	bf00      	nop
 800f5d0:	240046c0 	.word	0x240046c0

0800f5d4 <__malloc_unlock>:
 800f5d4:	4801      	ldr	r0, [pc, #4]	; (800f5dc <__malloc_unlock+0x8>)
 800f5d6:	f7fe bf53 	b.w	800e480 <__retarget_lock_release_recursive>
 800f5da:	bf00      	nop
 800f5dc:	240046c0 	.word	0x240046c0

0800f5e0 <_realloc_r>:
 800f5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e4:	4680      	mov	r8, r0
 800f5e6:	4614      	mov	r4, r2
 800f5e8:	460e      	mov	r6, r1
 800f5ea:	b921      	cbnz	r1, 800f5f6 <_realloc_r+0x16>
 800f5ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5f0:	4611      	mov	r1, r2
 800f5f2:	f7ff bbb9 	b.w	800ed68 <_malloc_r>
 800f5f6:	b92a      	cbnz	r2, 800f604 <_realloc_r+0x24>
 800f5f8:	f7ff fb4a 	bl	800ec90 <_free_r>
 800f5fc:	4625      	mov	r5, r4
 800f5fe:	4628      	mov	r0, r5
 800f600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f604:	f000 f842 	bl	800f68c <_malloc_usable_size_r>
 800f608:	4284      	cmp	r4, r0
 800f60a:	4607      	mov	r7, r0
 800f60c:	d802      	bhi.n	800f614 <_realloc_r+0x34>
 800f60e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f612:	d812      	bhi.n	800f63a <_realloc_r+0x5a>
 800f614:	4621      	mov	r1, r4
 800f616:	4640      	mov	r0, r8
 800f618:	f7ff fba6 	bl	800ed68 <_malloc_r>
 800f61c:	4605      	mov	r5, r0
 800f61e:	2800      	cmp	r0, #0
 800f620:	d0ed      	beq.n	800f5fe <_realloc_r+0x1e>
 800f622:	42bc      	cmp	r4, r7
 800f624:	4622      	mov	r2, r4
 800f626:	4631      	mov	r1, r6
 800f628:	bf28      	it	cs
 800f62a:	463a      	movcs	r2, r7
 800f62c:	f7fd f976 	bl	800c91c <memcpy>
 800f630:	4631      	mov	r1, r6
 800f632:	4640      	mov	r0, r8
 800f634:	f7ff fb2c 	bl	800ec90 <_free_r>
 800f638:	e7e1      	b.n	800f5fe <_realloc_r+0x1e>
 800f63a:	4635      	mov	r5, r6
 800f63c:	e7df      	b.n	800f5fe <_realloc_r+0x1e>
	...

0800f640 <_read_r>:
 800f640:	b538      	push	{r3, r4, r5, lr}
 800f642:	4d07      	ldr	r5, [pc, #28]	; (800f660 <_read_r+0x20>)
 800f644:	4604      	mov	r4, r0
 800f646:	4608      	mov	r0, r1
 800f648:	4611      	mov	r1, r2
 800f64a:	2200      	movs	r2, #0
 800f64c:	602a      	str	r2, [r5, #0]
 800f64e:	461a      	mov	r2, r3
 800f650:	f7f3 faa6 	bl	8002ba0 <_read>
 800f654:	1c43      	adds	r3, r0, #1
 800f656:	d102      	bne.n	800f65e <_read_r+0x1e>
 800f658:	682b      	ldr	r3, [r5, #0]
 800f65a:	b103      	cbz	r3, 800f65e <_read_r+0x1e>
 800f65c:	6023      	str	r3, [r4, #0]
 800f65e:	bd38      	pop	{r3, r4, r5, pc}
 800f660:	240046cc 	.word	0x240046cc

0800f664 <__ascii_wctomb>:
 800f664:	b149      	cbz	r1, 800f67a <__ascii_wctomb+0x16>
 800f666:	2aff      	cmp	r2, #255	; 0xff
 800f668:	bf85      	ittet	hi
 800f66a:	238a      	movhi	r3, #138	; 0x8a
 800f66c:	6003      	strhi	r3, [r0, #0]
 800f66e:	700a      	strbls	r2, [r1, #0]
 800f670:	f04f 30ff 	movhi.w	r0, #4294967295
 800f674:	bf98      	it	ls
 800f676:	2001      	movls	r0, #1
 800f678:	4770      	bx	lr
 800f67a:	4608      	mov	r0, r1
 800f67c:	4770      	bx	lr

0800f67e <abort>:
 800f67e:	b508      	push	{r3, lr}
 800f680:	2006      	movs	r0, #6
 800f682:	f000 f833 	bl	800f6ec <raise>
 800f686:	2001      	movs	r0, #1
 800f688:	f7f3 fa80 	bl	8002b8c <_exit>

0800f68c <_malloc_usable_size_r>:
 800f68c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f690:	1f18      	subs	r0, r3, #4
 800f692:	2b00      	cmp	r3, #0
 800f694:	bfbc      	itt	lt
 800f696:	580b      	ldrlt	r3, [r1, r0]
 800f698:	18c0      	addlt	r0, r0, r3
 800f69a:	4770      	bx	lr

0800f69c <_raise_r>:
 800f69c:	291f      	cmp	r1, #31
 800f69e:	b538      	push	{r3, r4, r5, lr}
 800f6a0:	4604      	mov	r4, r0
 800f6a2:	460d      	mov	r5, r1
 800f6a4:	d904      	bls.n	800f6b0 <_raise_r+0x14>
 800f6a6:	2316      	movs	r3, #22
 800f6a8:	6003      	str	r3, [r0, #0]
 800f6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ae:	bd38      	pop	{r3, r4, r5, pc}
 800f6b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f6b2:	b112      	cbz	r2, 800f6ba <_raise_r+0x1e>
 800f6b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f6b8:	b94b      	cbnz	r3, 800f6ce <_raise_r+0x32>
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	f000 f830 	bl	800f720 <_getpid_r>
 800f6c0:	462a      	mov	r2, r5
 800f6c2:	4601      	mov	r1, r0
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6ca:	f000 b817 	b.w	800f6fc <_kill_r>
 800f6ce:	2b01      	cmp	r3, #1
 800f6d0:	d00a      	beq.n	800f6e8 <_raise_r+0x4c>
 800f6d2:	1c59      	adds	r1, r3, #1
 800f6d4:	d103      	bne.n	800f6de <_raise_r+0x42>
 800f6d6:	2316      	movs	r3, #22
 800f6d8:	6003      	str	r3, [r0, #0]
 800f6da:	2001      	movs	r0, #1
 800f6dc:	e7e7      	b.n	800f6ae <_raise_r+0x12>
 800f6de:	2400      	movs	r4, #0
 800f6e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f6e4:	4628      	mov	r0, r5
 800f6e6:	4798      	blx	r3
 800f6e8:	2000      	movs	r0, #0
 800f6ea:	e7e0      	b.n	800f6ae <_raise_r+0x12>

0800f6ec <raise>:
 800f6ec:	4b02      	ldr	r3, [pc, #8]	; (800f6f8 <raise+0xc>)
 800f6ee:	4601      	mov	r1, r0
 800f6f0:	6818      	ldr	r0, [r3, #0]
 800f6f2:	f7ff bfd3 	b.w	800f69c <_raise_r>
 800f6f6:	bf00      	nop
 800f6f8:	2400001c 	.word	0x2400001c

0800f6fc <_kill_r>:
 800f6fc:	b538      	push	{r3, r4, r5, lr}
 800f6fe:	4d07      	ldr	r5, [pc, #28]	; (800f71c <_kill_r+0x20>)
 800f700:	2300      	movs	r3, #0
 800f702:	4604      	mov	r4, r0
 800f704:	4608      	mov	r0, r1
 800f706:	4611      	mov	r1, r2
 800f708:	602b      	str	r3, [r5, #0]
 800f70a:	f7f3 fa2f 	bl	8002b6c <_kill>
 800f70e:	1c43      	adds	r3, r0, #1
 800f710:	d102      	bne.n	800f718 <_kill_r+0x1c>
 800f712:	682b      	ldr	r3, [r5, #0]
 800f714:	b103      	cbz	r3, 800f718 <_kill_r+0x1c>
 800f716:	6023      	str	r3, [r4, #0]
 800f718:	bd38      	pop	{r3, r4, r5, pc}
 800f71a:	bf00      	nop
 800f71c:	240046cc 	.word	0x240046cc

0800f720 <_getpid_r>:
 800f720:	f7f3 ba1c 	b.w	8002b5c <_getpid>

0800f724 <_init>:
 800f724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f726:	bf00      	nop
 800f728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f72a:	bc08      	pop	{r3}
 800f72c:	469e      	mov	lr, r3
 800f72e:	4770      	bx	lr

0800f730 <_fini>:
 800f730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f732:	bf00      	nop
 800f734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f736:	bc08      	pop	{r3}
 800f738:	469e      	mov	lr, r3
 800f73a:	4770      	bx	lr
